{
  "id": "29712f394a715399446d0bdb707ca631",
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.8.9",
  "solcLongVersion": "",
  "input": {
    "language": "Solidity",
    "sources": {
      "cache-zk/solpp-generated-contracts/bridge/interfaces/IL1Bridge.sol": {
        "content": "pragma solidity ^0.8.0;\n\n// SPDX-License-Identifier: MIT OR Apache-2.0\n\n\n\n/// @author Matter Labs\ninterface IL1Bridge {\n    function finalizeWithdrawal(\n        uint256 _l2BlockNumber,\n        uint256 _l2MessageIndex,\n        uint16 _l2TxNumberInBlock,\n        bytes calldata _message,\n        bytes32[] calldata _merkleProof\n    ) external;\n}\n"
      },
      "cache-zk/solpp-generated-contracts/bridge/L2ETHBridge.sol": {
        "content": "pragma solidity ^0.8.0;\n\n// SPDX-License-Identifier: MIT OR Apache-2.0\n\n\n\nimport {L2ContractHelper} from \"../L2ContractHelper.sol\";\n\nimport \"./interfaces/IL1Bridge.sol\";\nimport \"./interfaces/IL2Bridge.sol\";\nimport \"./interfaces/IL2EthInitializable.sol\";\nimport \"./interfaces/IL2StandardToken.sol\";\n\n/// @author Matter Labs\n/// @dev This contract is used for bridging the ether from L1.\ncontract L2ETHBridge is IL2Bridge {\n    /// @dev The total amount of tokens that have been minted\n    uint256 public totalSupply;\n\n    /// @dev Mapping of address to the balance\n    mapping(address => uint256) public balanceOf;\n\n    /// @dev Address of the L1 bridge counterpart\n    address public override l1Bridge;\n\n    /// @dev System contract that is responsible for storing and changing ether balances\n    IL2StandardToken constant ETH_TOKEN_SYSTEM_CONTRACT_ADDRESS = IL2StandardToken(address(0x800a));\n\n    /// @dev Ether native coin has no real address on L1, so a conventional zero address is used\n    address constant CONVENTIONAL_ETH_ADDRESS = address(0);\n\n    constructor(address _l1Bridge) {\n        l1Bridge = _l1Bridge;\n\n        IL2EthInitializable(address(ETH_TOKEN_SYSTEM_CONTRACT_ADDRESS)).initialization(address(this));\n    }\n\n    /// @dev Finalize the deposit and mint ether to the deposited address\n    /// @param _l1Sender The account address that initiate the deposit on L1\n    /// @param _l2Receiver The account address that would receive minted ether\n    /// @param _l1Token The address of the token that was locked on the L1. Always should be equal to zero (conventional value)\n    /// @param _amount Total amount of ether deposited from L1\n    function finalizeDeposit(\n        address _l1Sender,\n        address _l2Receiver,\n        address _l1Token,\n        uint256 _amount,\n        bytes calldata // _data\n    ) external {\n        // Only L1 bridge counterpart can initiate and finalize the deposit\n        require(msg.sender == l1Bridge, \"ni\");\n        require(_l1Token == CONVENTIONAL_ETH_ADDRESS);\n\n        ETH_TOKEN_SYSTEM_CONTRACT_ADDRESS.bridgeMint(_l2Receiver, _amount);\n\n        emit FinalizeDeposit(_l1Sender, _l2Receiver, CONVENTIONAL_ETH_ADDRESS, _amount);\n    }\n\n    /// @dev Initiate withdrawal ethers from L2 contract to the L1\n    /// NOTE: In order to get funds on L1, receiver should finalise deposit on L1 counterpart\n    function withdraw(\n        address _l1Receiver,\n        address _l2Token,\n        uint256 _amount\n    ) external override {\n        require(_l2Token == CONVENTIONAL_ETH_ADDRESS, \"zn\");\n\n        ETH_TOKEN_SYSTEM_CONTRACT_ADDRESS.bridgeBurn(msg.sender, _amount);\n        bytes memory message = _getL1WithdrawMessage(_l1Receiver, _amount);\n        L2ContractHelper.sendMessageToL1(message);\n\n        emit WithdrawalInitiated(msg.sender, _l1Receiver, CONVENTIONAL_ETH_ADDRESS, _amount);\n    }\n\n    /// @dev Get the \"withdrawal initialized\" fact message to be sent on L1\n    function _getL1WithdrawMessage(address _to, uint256 _amount) internal pure returns (bytes memory) {\n        return abi.encodePacked(IL1Bridge.finalizeWithdrawal.selector, _to, _amount);\n    }\n\n    /// @notice Address of the L2 token by its L1 couterpart\n    function l2TokenAddress(address) public pure returns (address) {\n        return CONVENTIONAL_ETH_ADDRESS;\n    }\n\n    /// @notice Address of the L1 token by its L2 couterpart\n    function l1TokenAddress(address) public pure override returns (address) {\n        return CONVENTIONAL_ETH_ADDRESS;\n    }\n}\n"
      },
      "cache-zk/solpp-generated-contracts/L2ContractHelper.sol": {
        "content": "pragma solidity ^0.8.0;\n\n// SPDX-License-Identifier: MIT OR Apache-2.0\n\n\n\ninterface IL2Messenger {\n    function sendToL1(bytes memory _message) external returns (bytes32);\n}\n\ninterface IContractDeployer {\n    function create2(\n        bytes32 _salt,\n        bytes32 _bytecodeHash,\n        bytes calldata _input\n    ) external;\n}\n\nuint160 constant SYSTEM_CONTRACTS_OFFSET = 0x8000; // 2^15\n\naddress constant BOOTLOADER_ADDRESS = address(SYSTEM_CONTRACTS_OFFSET + 0x01);\naddress constant VALUE_SIMULATOR_SYSTEM_CONTRACT_ADDRESS = address(SYSTEM_CONTRACTS_OFFSET + 0x09);\nIL2Messenger constant L2_MESSENGER = IL2Messenger(address(SYSTEM_CONTRACTS_OFFSET + 0x08));\n\nlibrary L2ContractHelper {\n    bytes32 constant CREATE2_PREFIX = keccak256(\"zksyncCreate2\");\n\n    function sendMessageToL1(bytes memory _message) internal returns (bytes32) {\n        return L2_MESSENGER.sendToL1(_message);\n    }\n\n    function computeCreate2Address(\n        address _sender,\n        bytes32 _salt,\n        bytes32 _bytecodeHash,\n        bytes32 _constructorInputHash\n    ) internal pure returns (address) {\n        bytes32 senderBytes = bytes32(uint256(uint160(_sender)));\n        bytes32 data = keccak256(\n            bytes.concat(CREATE2_PREFIX, senderBytes, _salt, _bytecodeHash, _constructorInputHash)\n        );\n\n        return address(uint160(uint256(data)));\n    }\n}\n\nstruct Transaction {\n    uint256 txType;\n    uint256 from;\n    uint256 to;\n    uint256 ergsLimit;\n    uint256 ergsPerPubdataByteLimit;\n    uint256 maxFeePerErg;\n    uint256 maxPriorityFeePerErg;\n    uint256 paymaster;\n    // In the future, we might want to add some\n    // new fields to the struct. The `txData` struct\n    // is to be passed to account and any changes to its structure\n    // would mean a breaking change to these accounts. In order to prevent this,\n    // we should keep some fields as \"reserved\".\n    // It is also recommneded that their length is fixed, since\n    // it would allow easier proof integration (in case we will need\n    // some special circuit for preprocessing transactions).\n    uint256[6] reserved;\n    bytes data;\n    bytes signature;\n    bytes32[] factoryDeps;\n    bytes paymasterInput;\n    // Reserved dynamic type for the future use-case. Using it should be avoided,\n    // But it is still here, just in case we want to enable some additional functionality.\n    bytes reservedDynamic;\n}\n"
      },
      "cache-zk/solpp-generated-contracts/bridge/interfaces/IL2Bridge.sol": {
        "content": "pragma solidity ^0.8.0;\n\n// SPDX-License-Identifier: MIT OR Apache-2.0\n\n\n\n/// @author Matter Labs\ninterface IL2Bridge {\n    event FinalizeDeposit(\n        address indexed l1Sender,\n        address indexed l2Receiver,\n        address indexed l2Token,\n        uint256 amount\n    );\n\n    event WithdrawalInitiated(\n        address indexed l2Sender,\n        address indexed l1Receiver,\n        address indexed l2Token,\n        uint256 amount\n    );\n\n    function finalizeDeposit(\n        address _l1Sender,\n        address _l2Receiver,\n        address _l1Token,\n        uint256 _amount,\n        bytes calldata _data\n    ) external;\n\n    function withdraw(\n        address _l1Receiver,\n        address _l2Token,\n        uint256 _amount\n    ) external;\n\n    function l1TokenAddress(address _l2Token) external view returns (address);\n\n    function l2TokenAddress(address _l1Token) external view returns (address);\n\n    function l1Bridge() external view returns (address);\n}\n"
      },
      "cache-zk/solpp-generated-contracts/bridge/interfaces/IL2EthInitializable.sol": {
        "content": "pragma solidity ^0.8.0;\n\n// SPDX-License-Identifier: MIT OR Apache-2.0\n\n\n\ninterface IL2EthInitializable {\n    function initialization(address _l2Bridge) external;\n}\n"
      },
      "cache-zk/solpp-generated-contracts/bridge/interfaces/IL2StandardToken.sol": {
        "content": "pragma solidity ^0.8.0;\n\n// SPDX-License-Identifier: MIT OR Apache-2.0\n\n\n\ninterface IL2StandardToken {\n    event BridgeMint(address indexed _account, uint256 _amount);\n\n    event BridgeBurn(address indexed _account, uint256 _amount);\n\n    function bridgeMint(address _account, uint256 _amount) external;\n\n    function bridgeBurn(address _account, uint256 _amount) external;\n\n    function l1Address() external view returns (address);\n\n    function l2Bridge() external view returns (address);\n}\n"
      },
      "cache-zk/solpp-generated-contracts/bridge/L2StandardERC20.sol": {
        "content": "pragma solidity ^0.8.0;\n\n// SPDX-License-Identifier: MIT OR Apache-2.0\n\n\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"./interfaces/IL2StandardToken.sol\";\nimport \"../ExternalDecoder.sol\";\n\n/// @author Matter Labs\n/// @notice The ERC20 token implementation, that is used in the \"default\" ERC20 bridge\ncontract L2StandardERC20 is ERC20Upgradeable, IL2StandardToken {\n    event BridgeInitialization(address indexed l1Token, string name, string symbol, uint8 decimals);\n\n    /// @dev Describes whether there is a specific getter in the token.\n    /// @notice Used to explicitly separate which getters the token has and which do not.\n    /// @notice Different tokens in L1 can implement or not implement getter function as `name`/`symbol`/`decimals`,\n    /// @notice Our goal is to store all the getters that L1 token implements, and for others, we keep it as an unimplemented method.\n    struct ERC20Getters {\n        bool ignoreName;\n        bool ignoreSymbol;\n        bool ignoreDecimals;\n    }\n\n    ERC20Getters availableGetters;\n\n    /// @dev The decimals of the token, that are used as a value for `decimals` getter function.\n    /// @notice A private variable is used only for decimals, but not for `name` and `symbol`, because standard\n    /// @notice OpenZeppelin token represents `name` and `symbol` as storage variables and `decimals` as constant.\n    uint8 private decimals_;\n\n    /// @dev Address of the L2 bridge that is used as trustee who can mint/burn tokens\n    address public override l2Bridge;\n\n    /// @dev Address of the L1 token that can be deposited to mint this L2 token\n    address public override l1Address;\n\n    /// @dev Contract is expected to be used as proxy implementation.\n    /// @dev Initialize the implementation to prevent Parity hack.\n    constructor() initializer {}\n\n    /// @notice Initializes a contract token for later use. Expected to be used in the proxy.\n    /// @dev Stores the L1 address of the bridge and set `name`/`symbol`/`decimls` getters that L1 token has.\n    function bridgeInitialize(address _l1Address, bytes memory _data) external initializer {\n        require(l1Address == address(0), \"in5\"); // Is already initialized\n        require(_l1Address != address(0), \"in6\"); // Should be non-zero address\n        l1Address = _l1Address;\n\n        l2Bridge = msg.sender;\n\n        // We parse the data exactly as they were created on the L1 bridge\n        (bytes memory nameBytes, bytes memory symbolBytes, bytes memory decimalsBytes) = abi.decode(\n            _data,\n            (bytes, bytes, bytes)\n        );\n\n        ERC20Getters memory getters;\n        string memory decodedName;\n        string memory decodedSymbol;\n\n        // L1 bridge didn't check if the L1 token return values with proper types for `name`/`symbol`/`decimals`\n        // That's why we need to try to decode them, and if it works out, set the values as getters.\n\n        // NOTE: Solidity doesn't have a convenient way to try to decode a value:\n        // - Decode them manually, i.e. write a function that will validate that data in the correct format\n        // and return decoded value and a boolean value - whether it was possible to decode.\n        // - Use the standard abi.decode method, but wrap it into an external call in which error can be handled.\n        // We use the second option here.\n\n        try ExternalDecoder.decodeString(nameBytes) returns (string memory nameString) {\n            decodedName = nameString;\n        } catch {\n            getters.ignoreName = true;\n        }\n\n        try ExternalDecoder.decodeString(symbolBytes) returns (string memory symbolString) {\n            decodedSymbol = symbolString;\n        } catch {\n            getters.ignoreSymbol = true;\n        }\n\n        // Set decoded values for name and symbol.\n        __ERC20_init_unchained(decodedName, decodedSymbol);\n\n        try ExternalDecoder.decodeUint8(decimalsBytes) returns (uint8 decimalsUint8) {\n            // Set decoded value for decimals.\n            decimals_ = decimalsUint8;\n        } catch {\n            getters.ignoreDecimals = true;\n        }\n\n        availableGetters = getters;\n        emit BridgeInitialization(_l1Address, decodedName, decodedSymbol, decimals_);\n    }\n\n    modifier onlyBridge() {\n        require(msg.sender == l2Bridge);\n        _;\n    }\n\n    /// @dev Mint tokens to a given account.\n    /// @notice Should be called by bridge after depositing tokens from L1.\n    function bridgeMint(address _to, uint256 _amount) external override onlyBridge {\n        _mint(_to, _amount);\n        emit BridgeMint(_to, _amount);\n    }\n\n    /// @dev Burn tokens from a given account.\n    /// @notice Should be called by bridge before withdrawing tokens to L1.\n    function bridgeBurn(address _from, uint256 _amount) external override onlyBridge {\n        _burn(_from, _amount);\n        emit BridgeBurn(_from, _amount);\n    }\n\n    function name() public view override returns (string memory) {\n        // If method is not available, behave like a token that does not implement this method - revert on call.\n        if (availableGetters.ignoreName) revert();\n        return super.name();\n    }\n\n    function symbol() public view override returns (string memory) {\n        // If method is not available, behave like a token that does not implement this method - revert on call.\n        if (availableGetters.ignoreSymbol) revert();\n        return super.symbol();\n    }\n\n    function decimals() public view override returns (uint8) {\n        // If method is not available, behave like a token that does not implement this method - revert on call.\n        if (availableGetters.ignoreDecimals) revert();\n        return decimals_;\n    }\n}\n"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"
      },
      "cache-zk/solpp-generated-contracts/ExternalDecoder.sol": {
        "content": "pragma solidity ^0.8.0;\n\n// SPDX-License-Identifier: MIT OR Apache-2.0\n\n\n\n/// @author Matter Labs\n/// @dev The library with which it is possible to use `abi.decode` with error handling.\n/// @dev All functions in this library are public and should be called in a try-catch block to handle errors.\nlibrary ExternalDecoder {\n    /// @dev External function to decode a string from bytes.\n    function decodeString(bytes memory _input) external pure returns (string memory result) {\n        (result) = abi.decode(_input, (string));\n    }\n\n    /// @dev External function to decode a uint8 from bytes.\n    function decodeUint8(bytes memory _input) external pure returns (uint8 result) {\n        (result) = abi.decode(_input, (uint8));\n    }\n}\n"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized < version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
      },
      "cache-zk/solpp-generated-contracts/bridge/L2ERC20Bridge.sol": {
        "content": "pragma solidity ^0.8.0;\n\n// SPDX-License-Identifier: MIT OR Apache-2.0\n\n\n\nimport \"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\";\nimport \"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\";\n\nimport \"./interfaces/IL1Bridge.sol\";\nimport \"./interfaces/IL2Bridge.sol\";\nimport \"./interfaces/IL2StandardToken.sol\";\n\nimport \"./L2StandardERC20.sol\";\nimport {L2ContractHelper} from \"../L2ContractHelper.sol\";\n\n/// @author Matter Labs\n/// @notice The \"default\" bridge implementation for the ERC20 tokens.\ncontract L2ERC20Bridge is IL2Bridge {\n    /// @dev The address of the L1 bridge counterpart.\n    address public override l1Bridge;\n\n    /// @dev Contract that store the implementation address for token.\n    /// @dev For more details see https://docs.openzeppelin.com/contracts/3.x/api/proxy#UpgradeableBeacon.\n    UpgradeableBeacon public l2TokenFactory;\n\n    /// @dev Bytecode hash of the proxy for tokens deployed by the bridge.\n    bytes32 l2TokenProxyBytecodeHash;\n\n    /// @dev A mapping l2 token address => l1 token address\n    mapping(address => address) public override l1TokenAddress;\n\n    constructor(\n        address _l1Bridge,\n        bytes32 _l2TokenProxyBytecodeHash,\n        address _governor\n    ) {\n        l1Bridge = _l1Bridge;\n\n        l2TokenProxyBytecodeHash = _l2TokenProxyBytecodeHash;\n        address l2StandardToken = address(new L2StandardERC20{salt: bytes32(0)}());\n        l2TokenFactory = new UpgradeableBeacon{salt: bytes32(0)}(l2StandardToken);\n        l2TokenFactory.transferOwnership(_governor);\n    }\n\n    /// @notice Finalize the deposit and mint funds\n    /// @param _l1Sender The account address that initiate the deposit on L1\n    /// @param _l2Receiver The account address that would receive minted ether\n    /// @param _l1Token The address of the token that was locked on the L1. Always should be equal to zero (conventional value)\n    /// @param _amount Total amount of tokens deposited from L1\n    /// @param _data The additional data that user can pass with the deposit\n    function finalizeDeposit(\n        address _l1Sender,\n        address _l2Receiver,\n        address _l1Token,\n        uint256 _amount,\n        bytes calldata _data\n    ) external override {\n        // Only L1 bridge counterpart can initiate and finalize the deposit\n        require(msg.sender == l1Bridge, \"mq\");\n\n        address expectedL2Token = l2TokenAddress(_l1Token);\n        if (l1TokenAddress[expectedL2Token] == address(0)) {\n            address deployedToken = _deployL2Token(_l1Token, _data);\n            require(deployedToken == expectedL2Token, \"mt\");\n            l1TokenAddress[expectedL2Token] = _l1Token;\n        }\n\n        IL2StandardToken(expectedL2Token).bridgeMint(_l2Receiver, _amount);\n\n        emit FinalizeDeposit(_l1Sender, _l2Receiver, expectedL2Token, _amount);\n    }\n\n    /// @dev Deploys and initialize the L2 token for the L1 counterpart\n    function _deployL2Token(address _l1Token, bytes calldata _data) internal returns (address) {\n        bytes32 salt = _getCreate2Salt(_l1Token);\n\n        BeaconProxy l2Token = new BeaconProxy{salt: salt}(address(l2TokenFactory), \"\");\n        L2StandardERC20(address(l2Token)).bridgeInitialize(_l1Token, _data);\n\n        return address(l2Token);\n    }\n\n    /// @notice Initiates a withdrawal by burning funds on the contract and sending the message to L1\n    /// where tokens would be unlocked\n    /// @param _l1Receiver The account address that should receive funds on L1\n    /// @param _l2Token The L2 token address which is withdrawn\n    /// @param _amount The total amount of tokens to be withdrawn\n    function withdraw(\n        address _l1Receiver,\n        address _l2Token,\n        uint256 _amount\n    ) external override {\n        IL2StandardToken(_l2Token).bridgeBurn(msg.sender, _amount);\n\n        address l1Token = l1TokenAddress[_l2Token];\n        require(l1Token != address(0), \"yh\");\n\n        bytes memory message = _getL1WithdrawMessage(_l1Receiver, l1Token, _amount);\n        L2ContractHelper.sendMessageToL1(message);\n\n        emit WithdrawalInitiated(msg.sender, _l1Receiver, _l2Token, _amount);\n    }\n\n    /// @dev Encode the message for l2ToL1log sent with withdraw initialization\n    function _getL1WithdrawMessage(\n        address _to,\n        address _l1Token,\n        uint256 _amount\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(IL1Bridge.finalizeWithdrawal.selector, _to, _l1Token, _amount);\n    }\n\n    /// @return Address of an L2 token counterpart\n    function l2TokenAddress(address _l1Token) public view override returns (address) {\n        bytes32 constructorInputHash = keccak256(abi.encode(address(l2TokenFactory), \"\"));\n        bytes32 salt = _getCreate2Salt(_l1Token);\n\n        return\n            L2ContractHelper.computeCreate2Address(address(this), salt, l2TokenProxyBytecodeHash, constructorInputHash);\n    }\n\n    /// @dev Convert the L1 token address to the create2 salt of deployed L2 token\n    function _getCreate2Salt(address _l1Token) internal pure returns (bytes32 salt) {\n        salt = bytes32(uint256(uint160(_l1Token)));\n    }\n}\n"
      },
      "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/BeaconProxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IBeacon.sol\";\nimport \"../Proxy.sol\";\nimport \"../ERC1967/ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements a proxy that gets the implementation address for each call from a {UpgradeableBeacon}.\n *\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\n * conflict with the storage layout of the implementation behind the proxy.\n *\n * _Available since v3.4._\n */\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the proxy with `beacon`.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\n     * will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity\n     * constructor.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract with the interface {IBeacon}.\n     */\n    constructor(address beacon, bytes memory data) payable {\n        assert(_BEACON_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.beacon\")) - 1));\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n\n    /**\n     * @dev Returns the current beacon address.\n     */\n    function _beacon() internal view virtual returns (address) {\n        return _getBeacon();\n    }\n\n    /**\n     * @dev Returns the current implementation address of the associated beacon.\n     */\n    function _implementation() internal view virtual override returns (address) {\n        return IBeacon(_getBeacon()).implementation();\n    }\n\n    /**\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract.\n     * - The implementation returned by `beacon` must be a contract.\n     */\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n}\n"
      },
      "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/UpgradeableBeacon.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IBeacon.sol\";\nimport \"../../access/Ownable.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\n * implementation contract, which is where they will delegate all function calls.\n *\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\n */\ncontract UpgradeableBeacon is IBeacon, Ownable {\n    address private _implementation;\n\n    /**\n     * @dev Emitted when the implementation returned by the beacon is changed.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\n     * beacon.\n     */\n    constructor(address implementation_) {\n        _setImplementation(implementation_);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function implementation() public view virtual override returns (address) {\n        return _implementation;\n    }\n\n    /**\n     * @dev Upgrades the beacon to a new implementation.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * Requirements:\n     *\n     * - msg.sender must be the owner of the contract.\n     * - `newImplementation` must be a contract.\n     */\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Sets the implementation contract address for this beacon\n     *\n     * Requirements:\n     *\n     * - `newImplementation` must be a contract.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"UpgradeableBeacon: implementation is not a contract\");\n        _implementation = newImplementation;\n    }\n}\n"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
      },
      "@openzeppelin/contracts/proxy/Proxy.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
      },
      "@openzeppelin/contracts/utils/Address.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
      },
      "@openzeppelin/contracts/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "@openzeppelin/contracts/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
      },
      "cache-zk/solpp-generated-contracts/TestnetPaymaster.sol": {
        "content": "pragma solidity ^0.8.0;\n\n// SPDX-License-Identifier: MIT\n\n\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"./interfaces/IPaymaster.sol\";\nimport \"./interfaces/IPaymasterFlow.sol\";\nimport \"./L2ContractHelper.sol\";\n\n// This is a dummy paymaster. It expects the paymasterInput to contain its \"signature\" as well as the needed exchange rate.\n// It supports only approval-based paymaster flow.\ncontract TestnetPaymaster is IPaymaster {\n    function validateAndPayForPaymasterTransaction(\n        bytes32,\n        bytes32,\n        Transaction calldata _transaction\n    ) external payable returns (bytes memory context) {\n        require(msg.sender == BOOTLOADER_ADDRESS, \"Only bootloader can call this contract\");\n        require(_transaction.paymasterInput.length >= 4, \"The standard paymaster input must be at least 4 bytes long\");\n\n        bytes4 paymasterInputSelector = bytes4(_transaction.paymasterInput[0:4]);\n        if (paymasterInputSelector == IPaymasterFlow.approvalBased.selector) {\n            // While the actual data consists of address, uint256 and bytes data,\n            // the data is not needed for the testnet paymaster\n            (address token, uint256 amount, ) = abi.decode(_transaction.paymasterInput[4:], (address, uint256, bytes));\n\n            // Firstly, we verify that the user has provided enough allowance\n            address userAddress = address(uint160(_transaction.from));\n            address thisAddress = address(this);\n\n            uint256 providedAllowance = IERC20(token).allowance(userAddress, thisAddress);\n            require(providedAllowance >= amount, \"The user did not provide enough allowance\");\n\n            // The testnet paymaster exchanges X wei of the token to the X wei of ETH.\n            uint256 requiredETH = _transaction.ergsLimit * _transaction.maxFeePerErg;\n            require(amount >= requiredETH, \"User does not provide enough tokens to exchange\");\n\n            // Pulling all the tokens from the user\n            IERC20(token).transferFrom(userAddress, thisAddress, amount);\n            // The bootloader never returns any data, so it can safely be ignored here.\n            (bool success, ) = payable(BOOTLOADER_ADDRESS).call{value: requiredETH}(\"\");\n            require(success, \"Failed to transfer funds to the bootloader\");\n        } else {\n            revert(\"Unsupported paymaster flow\");\n        }\n    }\n\n    function postOp(\n        bytes calldata _context,\n        Transaction calldata _transaction,\n        bytes32,\n        bytes32,\n        ExecutionResult _txResult,\n        uint256 _maxRefundedErgs\n    ) external payable override {\n        // Refunds are not supported yet.\n    }\n\n    receive() external payable {}\n}\n"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
      },
      "cache-zk/solpp-generated-contracts/interfaces/IPaymaster.sol": {
        "content": "pragma solidity ^0.8.0;\n\n// SPDX-License-Identifier: MIT OR Apache-2.0\n\n\n\nimport \"../L2ContractHelper.sol\";\n\nenum ExecutionResult {\n    Revert,\n    Success\n}\n\ninterface IPaymaster {\n    function validateAndPayForPaymasterTransaction(\n        bytes32 _txHash,\n        bytes32 _suggestedSignedHash,\n        Transaction calldata _transaction\n    ) external payable returns (bytes memory context);\n\n    /// @dev Called by the bootloader after the execution of the transaction. Please note that\n    /// there is no guarantee that this method will be called at all. Unlike the original EIP4337,\n    /// this method won't be called if the transaction execution results in out-of-gas.\n    /// @param _context, the context of the execution, returned by the \"validateAndPayForPaymasterTransaction\" method.\n    /// @param  _transaction, the users' transaction.\n    /// @param _txResult, the result of the transaction execution (success or failure).\n    /// @param _maxRefundedErgs, the upper bound on the amout of ergs that could be refunded to the paymaster.\n    /// @dev The exact amount refunded depends on the ergs spent by the \"postOp\" itself and so the developers should\n    /// take that into account.\n    function postOp(\n        bytes calldata _context,\n        Transaction calldata _transaction,\n        bytes32 _txHash,\n        bytes32 _suggestedSignedHash,\n        ExecutionResult _txResult,\n        uint256 _maxRefundedErgs\n    ) external payable;\n}\n"
      },
      "cache-zk/solpp-generated-contracts/interfaces/IPaymasterFlow.sol": {
        "content": "pragma solidity ^0.8.0;\n\n// SPDX-License-Identifier: MIT OR Apache-2.0\n\n\n\n/**\n * @author Matter Labs\n * @dev The interface that is used for encoding/decoding of\n * different types of paymaster flows.\n * @notice This is NOT an interface to be implementated\n * by contracts. It is just used for encoding.\n */\ninterface IPaymasterFlow {\n    function general(bytes calldata input) external;\n\n    function approvalBased(\n        address _token,\n        uint256 _minAllowance,\n        bytes calldata _innerInput\n    ) external;\n}\n"
      }
    },
    "settings": {
      "optimizer": {
        "enabled": true
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ],
          "": [
            "ast"
          ]
        }
      }
    }
  },
  "output": {
    "contracts": {
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
        "Initializable": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "uint8",
                  "name": "version",
                  "type": "uint8"
                }
              ],
              "name": "Initialized",
              "type": "event"
            }
          ]
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
        "ERC20Upgradeable": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "uint8",
                  "name": "version",
                  "type": "uint8"
                }
              ],
              "name": "Initialized",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                }
              ],
              "name": "allowance",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "decimals",
              "outputs": [
                {
                  "internalType": "uint8",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "subtractedValue",
                  "type": "uint256"
                }
              ],
              "name": "decreaseAllowance",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "addedValue",
                  "type": "uint256"
                }
              ],
              "name": "increaseAllowance",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "name",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "symbol",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "transfer",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "transferFrom",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "evm": {
            "legacyAssembly": null,
            "bytecode": {
              "object": ""
            }
          },
          "factoryDependencies": {},
          "hash": "010001df1940b1f5ab7c363f0af8a99d96f991fff7754a1f1b3c8d3b6194998e"
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
        "IERC20Upgradeable": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                }
              ],
              "name": "allowance",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "transfer",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "transferFrom",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ]
        }
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
        "IERC20MetadataUpgradeable": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                }
              ],
              "name": "allowance",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "decimals",
              "outputs": [
                {
                  "internalType": "uint8",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "name",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "symbol",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "transfer",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "transferFrom",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ]
        }
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
        "AddressUpgradeable": {
          "abi": [],
          "evm": {
            "legacyAssembly": null,
            "bytecode": {
              "object": "000000010120018f000000000110004c000000040000c13d004c00140000040f004c00050000040f0000008001000039000000400200003900000000001204350000000001000416000000000110004c000000120000c13d0000002001000039000001000200003900000000001204390000012001000039000000000001043900000014010000410000004d0001042e00000000010000190000004e0001043000020000000000020000000001000410000080020210008c0000002f0000613d0000000002000411000080010220008c0000002f0000613d0000001502000041000000000020043900000004020000390000000000120439000000160100004100008002020000390000000003000415000000020330008a00000020033000c9004c00330000040f000000ff01000039000000010110024f000000000110004c000000310000613d000000020100035f000000000101043b000000000110004c0000002f0000c13d00000000010000190000004d0001042e00000000010000190000004e0001043000000000010000190000004e000104300002000000000002000200000003001d0000002003300039000100000003001d00000042002104230000000203000029000000200230011a000000000201035500000018010000410000000102000029000000200220011a00000000021201bd00000000010300190000000200000005000000000001042d0000000203000029000000200230011a000000000201035500000017010000410000000102000029000000200220011a000000000212018d00000000010300190000000200000005000000000001042d0000004c000004320000004d0001042e0000004e00010430000000000000000100000002000000000000000000000000000000400000010000000000000000001806aa1896bbf26568e884a7374b41e002500962caba6a15023a8d90e8508b8302000200000000000000000000000000000000240000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000000000000000000000000000000000000000000000000000000000000000"
            }
          },
          "factoryDependencies": {},
          "hash": "01000019fbbd8491bfdb3d3e4964bdbf44a15474e2c4a8704c135a516a93c592"
        }
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
        "ContextUpgradeable": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "uint8",
                  "name": "version",
                  "type": "uint8"
                }
              ],
              "name": "Initialized",
              "type": "event"
            }
          ]
        }
      },
      "@openzeppelin/contracts/access/Ownable.sol": {
        "Ownable": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "previousOwner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "OwnershipTransferred",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "owner",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "renounceOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "transferOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ]
        }
      },
      "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
        "IERC1822Proxiable": {
          "abi": [
            {
              "inputs": [],
              "name": "proxiableUUID",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ]
        }
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
        "ERC1967Upgrade": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "previousAdmin",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "newAdmin",
                  "type": "address"
                }
              ],
              "name": "AdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "beacon",
                  "type": "address"
                }
              ],
              "name": "BeaconUpgraded",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "implementation",
                  "type": "address"
                }
              ],
              "name": "Upgraded",
              "type": "event"
            }
          ]
        }
      },
      "@openzeppelin/contracts/proxy/Proxy.sol": {
        "Proxy": {
          "abi": [
            {
              "stateMutability": "payable",
              "type": "fallback"
            },
            {
              "stateMutability": "payable",
              "type": "receive"
            }
          ]
        }
      },
      "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol": {
        "BeaconProxy": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "beacon",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "stateMutability": "payable",
              "type": "constructor"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "previousAdmin",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "newAdmin",
                  "type": "address"
                }
              ],
              "name": "AdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "beacon",
                  "type": "address"
                }
              ],
              "name": "BeaconUpgraded",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "implementation",
                  "type": "address"
                }
              ],
              "name": "Upgraded",
              "type": "event"
            },
            {
              "stateMutability": "payable",
              "type": "fallback"
            },
            {
              "stateMutability": "payable",
              "type": "receive"
            }
          ],
          "evm": {
            "legacyAssembly": null,
            "bytecode": {
              "object": ""
            }
          },
          "factoryDependencies": {},
          "hash": "0100014340e955cbf39159da998b3374bee8f3c0b3c75a7a9e3df6b85052379d"
        }
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
        "IBeacon": {
          "abi": [
            {
              "inputs": [],
              "name": "implementation",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ]
        }
      },
      "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol": {
        "UpgradeableBeacon": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "implementation_",
                  "type": "address"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "previousOwner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "OwnershipTransferred",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "implementation",
                  "type": "address"
                }
              ],
              "name": "Upgraded",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "implementation",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "owner",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "renounceOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "transferOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "newImplementation",
                  "type": "address"
                }
              ],
              "name": "upgradeTo",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "evm": {
            "legacyAssembly": null,
            "bytecode": {
              "object": ""
            }
          },
          "factoryDependencies": {},
          "hash": "010000ad04a42939e2775f8d8f9a245076f99f8c4d620a32c3f98ccd66d917d8"
        }
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
        "IERC20": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                }
              ],
              "name": "allowance",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "transfer",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "transferFrom",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ]
        }
      },
      "@openzeppelin/contracts/utils/Address.sol": {
        "Address": {
          "abi": [],
          "evm": {
            "legacyAssembly": null,
            "bytecode": {
              "object": "000000010120018f000000000110004c000000040000c13d004c00140000040f004c00050000040f0000008001000039000000400200003900000000001204350000000001000416000000000110004c000000120000c13d0000002001000039000001000200003900000000001204390000012001000039000000000001043900000014010000410000004d0001042e00000000010000190000004e0001043000020000000000020000000001000410000080020210008c0000002f0000613d0000000002000411000080010220008c0000002f0000613d0000001502000041000000000020043900000004020000390000000000120439000000160100004100008002020000390000000003000415000000020330008a00000020033000c9004c00330000040f000000ff01000039000000010110024f000000000110004c000000310000613d000000020100035f000000000101043b000000000110004c0000002f0000c13d00000000010000190000004d0001042e00000000010000190000004e0001043000000000010000190000004e000104300002000000000002000200000003001d0000002003300039000100000003001d00000042002104230000000203000029000000200230011a000000000201035500000018010000410000000102000029000000200220011a00000000021201bd00000000010300190000000200000005000000000001042d0000000203000029000000200230011a000000000201035500000017010000410000000102000029000000200220011a000000000212018d00000000010300190000000200000005000000000001042d0000004c000004320000004d0001042e0000004e00010430000000000000000100000002000000000000000000000000000000400000010000000000000000001806aa1896bbf26568e884a7374b41e002500962caba6a15023a8d90e8508b8302000200000000000000000000000000000000240000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000000000000000000000000000000000000000000000000000000000000000"
            }
          },
          "factoryDependencies": {},
          "hash": "01000019fbbd8491bfdb3d3e4964bdbf44a15474e2c4a8704c135a516a93c592"
        }
      },
      "@openzeppelin/contracts/utils/Context.sol": {
        "Context": {
          "abi": []
        }
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol": {
        "StorageSlot": {
          "abi": [],
          "evm": {
            "legacyAssembly": null,
            "bytecode": {
              "object": "000000010120018f000000000110004c000000040000c13d004c00140000040f004c00050000040f0000008001000039000000400200003900000000001204350000000001000416000000000110004c000000120000c13d0000002001000039000001000200003900000000001204390000012001000039000000000001043900000014010000410000004d0001042e00000000010000190000004e0001043000020000000000020000000001000410000080020210008c0000002f0000613d0000000002000411000080010220008c0000002f0000613d0000001502000041000000000020043900000004020000390000000000120439000000160100004100008002020000390000000003000415000000020330008a00000020033000c9004c00330000040f000000ff01000039000000010110024f000000000110004c000000310000613d000000020100035f000000000101043b000000000110004c0000002f0000c13d00000000010000190000004d0001042e00000000010000190000004e0001043000000000010000190000004e000104300002000000000002000200000003001d0000002003300039000100000003001d00000042002104230000000203000029000000200230011a000000000201035500000018010000410000000102000029000000200220011a00000000021201bd00000000010300190000000200000005000000000001042d0000000203000029000000200230011a000000000201035500000017010000410000000102000029000000200220011a000000000212018d00000000010300190000000200000005000000000001042d0000004c000004320000004d0001042e0000004e00010430000000000000000100000002000000000000000000000000000000400000010000000000000000001806aa1896bbf26568e884a7374b41e002500962caba6a15023a8d90e8508b8302000200000000000000000000000000000000240000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000000000000000000000000000000000000000000000000000000000000000"
            }
          },
          "factoryDependencies": {},
          "hash": "01000019fbbd8491bfdb3d3e4964bdbf44a15474e2c4a8704c135a516a93c592"
        }
      },
      "cache-zk/solpp-generated-contracts/ExternalDecoder.sol": {
        "ExternalDecoder": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "bytes",
                  "name": "_input",
                  "type": "bytes"
                }
              ],
              "name": "decodeString",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "result",
                  "type": "string"
                }
              ],
              "stateMutability": "pure",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes",
                  "name": "_input",
                  "type": "bytes"
                }
              ],
              "name": "decodeUint8",
              "outputs": [
                {
                  "internalType": "uint8",
                  "name": "result",
                  "type": "uint8"
                }
              ],
              "stateMutability": "pure",
              "type": "function"
            }
          ],
          "evm": {
            "legacyAssembly": null,
            "bytecode": {
              "object": ""
            }
          },
          "factoryDependencies": {},
          "hash": "0100008143a8dad3015065e59a0b155b168150d0fa2adae205c66aabf1f33580"
        }
      },
      "cache-zk/solpp-generated-contracts/L2ContractHelper.sol": {
        "IContractDeployer": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "_salt",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "_bytecodeHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes",
                  "name": "_input",
                  "type": "bytes"
                }
              ],
              "name": "create2",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ]
        },
        "IL2Messenger": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "bytes",
                  "name": "_message",
                  "type": "bytes"
                }
              ],
              "name": "sendToL1",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ]
        },
        "L2ContractHelper": {
          "abi": [],
          "evm": {
            "legacyAssembly": null,
            "bytecode": {
              "object": "000000010120018f000000000110004c000000040000c13d004c00140000040f004c00050000040f0000008001000039000000400200003900000000001204350000000001000416000000000110004c000000120000c13d0000002001000039000001000200003900000000001204390000012001000039000000000001043900000014010000410000004d0001042e00000000010000190000004e0001043000020000000000020000000001000410000080020210008c0000002f0000613d0000000002000411000080010220008c0000002f0000613d0000001502000041000000000020043900000004020000390000000000120439000000160100004100008002020000390000000003000415000000020330008a00000020033000c9004c00330000040f000000ff01000039000000010110024f000000000110004c000000310000613d000000020100035f000000000101043b000000000110004c0000002f0000c13d00000000010000190000004d0001042e00000000010000190000004e0001043000000000010000190000004e000104300002000000000002000200000003001d0000002003300039000100000003001d00000042002104230000000203000029000000200230011a000000000201035500000018010000410000000102000029000000200220011a00000000021201bd00000000010300190000000200000005000000000001042d0000000203000029000000200230011a000000000201035500000017010000410000000102000029000000200220011a000000000212018d00000000010300190000000200000005000000000001042d0000004c000004320000004d0001042e0000004e00010430000000000000000100000002000000000000000000000000000000400000010000000000000000001806aa1896bbf26568e884a7374b41e002500962caba6a15023a8d90e8508b8302000200000000000000000000000000000000240000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000000000000000000000000000000000000000000000000000000000000000"
            }
          },
          "factoryDependencies": {},
          "hash": "01000019fbbd8491bfdb3d3e4964bdbf44a15474e2c4a8704c135a516a93c592"
        }
      },
      "cache-zk/solpp-generated-contracts/TestnetPaymaster.sol": {
        "TestnetPaymaster": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "bytes",
                  "name": "_context",
                  "type": "bytes"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "txType",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "from",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "to",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ergsLimit",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ergsPerPubdataByteLimit",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "maxFeePerErg",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "maxPriorityFeePerErg",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "paymaster",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256[6]",
                      "name": "reserved",
                      "type": "uint256[6]"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "signature",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes32[]",
                      "name": "factoryDeps",
                      "type": "bytes32[]"
                    },
                    {
                      "internalType": "bytes",
                      "name": "paymasterInput",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "reservedDynamic",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct Transaction",
                  "name": "_transaction",
                  "type": "tuple"
                },
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                },
                {
                  "internalType": "enum ExecutionResult",
                  "name": "_txResult",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "_maxRefundedErgs",
                  "type": "uint256"
                }
              ],
              "name": "postOp",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "txType",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "from",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "to",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ergsLimit",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ergsPerPubdataByteLimit",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "maxFeePerErg",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "maxPriorityFeePerErg",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "paymaster",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256[6]",
                      "name": "reserved",
                      "type": "uint256[6]"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "signature",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes32[]",
                      "name": "factoryDeps",
                      "type": "bytes32[]"
                    },
                    {
                      "internalType": "bytes",
                      "name": "paymasterInput",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "reservedDynamic",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct Transaction",
                  "name": "_transaction",
                  "type": "tuple"
                }
              ],
              "name": "validateAndPayForPaymasterTransaction",
              "outputs": [
                {
                  "internalType": "bytes",
                  "name": "context",
                  "type": "bytes"
                }
              ],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "stateMutability": "payable",
              "type": "receive"
            }
          ],
          "evm": {
            "legacyAssembly": null,
            "bytecode": {
              "object": ""
            }
          },
          "factoryDependencies": {},
          "hash": "01000121454160924d2d2547cb1eb843bf7a6dc8a406b2a5dd1b183d5221865c"
        }
      },
      "cache-zk/solpp-generated-contracts/bridge/L2ERC20Bridge.sol": {
        "L2ERC20Bridge": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_l1Bridge",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "_l2TokenProxyBytecodeHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "_governor",
                  "type": "address"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "l1Sender",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "l2Receiver",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "l2Token",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "FinalizeDeposit",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "l2Sender",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "l1Receiver",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "l2Token",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "WithdrawalInitiated",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_l1Sender",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "_l2Receiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "_l1Token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "_amount",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "_data",
                  "type": "bytes"
                }
              ],
              "name": "finalizeDeposit",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "l1Bridge",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "l1TokenAddress",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_l1Token",
                  "type": "address"
                }
              ],
              "name": "l2TokenAddress",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "l2TokenFactory",
              "outputs": [
                {
                  "internalType": "contract UpgradeableBeacon",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_l1Receiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "_l2Token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "_amount",
                  "type": "uint256"
                }
              ],
              "name": "withdraw",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "evm": {
            "legacyAssembly": null,
            "bytecode": {
              "object": ""
            }
          },
          "factoryDependencies": {
            "010000ad04a42939e2775f8d8f9a245076f99f8c4d620a32c3f98ccd66d917d8": "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol:UpgradeableBeacon",
            "0100014340e955cbf39159da998b3374bee8f3c0b3c75a7a9e3df6b85052379d": "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:BeaconProxy",
            "0100041d091171e76c36dc586919e89df47a969579f0ca8133bc486a3265a492": "cache-zk/solpp-generated-contracts/bridge/L2StandardERC20.sol:L2StandardERC20"
          },
          "hash": "0100026586d138b2ff1366067bac034d9a19a1112da973702f1b3f160c68d243"
        }
      },
      "cache-zk/solpp-generated-contracts/bridge/L2ETHBridge.sol": {
        "L2ETHBridge": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_l1Bridge",
                  "type": "address"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "l1Sender",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "l2Receiver",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "l2Token",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "FinalizeDeposit",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "l2Sender",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "l1Receiver",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "l2Token",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "WithdrawalInitiated",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_l1Sender",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "_l2Receiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "_l1Token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "_amount",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "",
                  "type": "bytes"
                }
              ],
              "name": "finalizeDeposit",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "l1Bridge",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "l1TokenAddress",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "pure",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "l2TokenAddress",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "pure",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_l1Receiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "_l2Token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "_amount",
                  "type": "uint256"
                }
              ],
              "name": "withdraw",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "evm": {
            "legacyAssembly": null,
            "bytecode": {
              "object": ""
            }
          },
          "factoryDependencies": {},
          "hash": "0100017d3f462a39981c22d58933379cd43d274a3cf1610362194d8dd78e0019"
        }
      },
      "cache-zk/solpp-generated-contracts/bridge/L2StandardERC20.sol": {
        "L2StandardERC20": {
          "abi": [
            {
              "inputs": [],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "_account",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "_amount",
                  "type": "uint256"
                }
              ],
              "name": "BridgeBurn",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "l1Token",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "indexed": false,
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                },
                {
                  "indexed": false,
                  "internalType": "uint8",
                  "name": "decimals",
                  "type": "uint8"
                }
              ],
              "name": "BridgeInitialization",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "_account",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "_amount",
                  "type": "uint256"
                }
              ],
              "name": "BridgeMint",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "uint8",
                  "name": "version",
                  "type": "uint8"
                }
              ],
              "name": "Initialized",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                }
              ],
              "name": "allowance",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_from",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "_amount",
                  "type": "uint256"
                }
              ],
              "name": "bridgeBurn",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_l1Address",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "_data",
                  "type": "bytes"
                }
              ],
              "name": "bridgeInitialize",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "_amount",
                  "type": "uint256"
                }
              ],
              "name": "bridgeMint",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "decimals",
              "outputs": [
                {
                  "internalType": "uint8",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "subtractedValue",
                  "type": "uint256"
                }
              ],
              "name": "decreaseAllowance",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "addedValue",
                  "type": "uint256"
                }
              ],
              "name": "increaseAllowance",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "l1Address",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "l2Bridge",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "name",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "symbol",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "transfer",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "transferFrom",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "evm": {
            "legacyAssembly": null,
            "bytecode": {
              "object": "000200000000000200010000000103550000006001100270000003c10010019d000000010120018f000000000110004c000000080000c13d0efd00430000040f0efd00090000040f000200000000000200000080010000390000004002000039000200000002001d00000000001204350000000001000416000000000110004c000000410000c13d0efd0c430000040f000000000110004c0000003a0000613d00000000010000190efd0efb0000040f000003c202000041000100000002001d000000000121016f00000100011001bf00000000020000190efd0ef90000040f00000000010000190efd0efb0000040f0000000102000029000000000121016f00000000020000190efd0ef90000040f0000000201000029000000000101043300000001020000390000000000210435000003c302000041000003c403000041000000000023041f000000210200008a000000000221004b0000003a0000213d0000002002100039000000320000013d000000000003041e0000004001100039000000000312004b0000003a0000a13d000000000412004900000000030104330000003f0440008c0000002e0000a13d00000020041000390000000004040433000000000043041e0000002f0000013d00000020010000390000010002000039000000000012043900000120010000390000000000010439000003c50100004100000efe0001042e000000000100001900000eff0001043000310000000000020000000001000411001100000001001d0000000001000410000080020210008c0000005e0000613d0000001102000029000080010220008c0000005e0000613d000003c602000041000000000020043900000004020000390000000000120439000003c70100004100008002020000390000000003000415000000310330008a00000020033000c90efd0ec70000040f000000ff01000039000000300110024f000000000110004c000002d40000613d000000310100035f000000000101043b000000000110004c000002d60000613d0000008005000039000000400800003900000000005804350000000002000031000000030120008c000002d00000a13d0000000101000367000000000301043b000000e003300270000003c80430009c001000000008001d000000c70000213d000003d30430009c0000023d0000213d000003d90430009c000002710000a13d000003da0330009c000002d00000c13d0000000003000416000000000330004c000003380000c13d000000040220008a000003de030000410000005f0420008c00000000040000190000000004032019000003de02200197000000000520004c0000000003008019000003de0220009c00000000020400190000000002036019000000000220004c000003740000613d0000000402100370000000000302043b000003df0230009c000003780000813d0000002402100370000000000202043b000b00000002001d000003df0220009c0000037c0000813d0000004401100370000000000101043b000f00000001001d000e00000003001d000000000030043500000034010000390000002002000039000d00000002001d0000000000120435000003e001000041000080100200003900000000030004150000002f0330008a00000020033000c90efd0ec70000040f0000002f0100035f000000ff02000039000c00000002001d0000002e0220024f000000010220008c000003800000c13d000000000101043b000000110200002900000000002004350000000d020000290000000000120435000003e001000041000080100200003900000000030004150000002d0330008a00000020033000c90efd0ec70000040f0000002d0100035f0000000c020000290000002c0220024f000000000220004c000003a00000613d000000000101043b0efd0efb0000040f000000010200008a000000000221004b0000000f03000029000000bc0000613d000000000231004b0000000002030019000003cc0000413d00000000032100490000000e0100002900000011020000290efd0dc90000040f0000000f030000290000000e010000290000000b020000290efd0cbc0000040f00000010010000290000000001010433000000010200003900000000002104350000004001100210000003e301100197000003e4011001c700000efe0001042e000003c90430009c000002230000213d000003d00430009c0000028c0000c13d0000000003000416000000000330004c0000033a0000c13d000000040320008a000003de040000410000003f0530008c00000000050000190000000005042019000003de03300197000000000630004c0000000004008019000003de0330009c00000000030500190000000003046019000000000330004c000003760000613d0000000403100370000000000903043b000003df0390009c0000037a0000813d0000002403100370000000000303043b000003ea0430009c0000037e0000813d0000002304300039000003de05000041000000000624004b00000000060000190000000006054019000003de02200197000003de04400197000000000724004b000000000500a019000000000224013f000003de0220009c00000000020600190000000002056019000000000220004c0000039e0000613d0000000402300039000000000121034f000000000101043b000003ea0210009c000003be0000813d0000003f02100039000000200a00008a0000000002a2016f000000000b08043300000000022b00190000000004b2004b00000000040000190000000104004039000003eb0520009c000003c50000213d000000010440018f000000000440004c000003c50000c13d000000000028043500000000001b0435000000240230003900000000031200190000000004000031000000000343004b000003dd0000213d0000000103000367000000000323034f0000001f0210018f000000200cb000390000000504100270000000000540004c0000011b0000613d0000000005000019000000050650021000000000076c0019000000000663034f000000000606043b00000000006704350000000105500039000000000645004b000001130000413d000e0000000b001d000c0000000a001d000f00000009001d000000000520004c0000012d0000613d0000000504400210000000000343034f00000000044c00190000000302200210000000000504043300000000052501cf000000000525022f000000000303043b0000010002200089000000000323022f00000000022301cf000000000252019f0000000000240435000d0000000c001d00000000011c001900000000000104350efd0e780000040f000b00000001001d000000000110004c0000013b0000613d00000000010000190efd0efb0000040f000003c202000041000000000121016f00000100011001bf00000000020000190efd0ef90000040f00000067010000390efd0efb0000040f000003e502100197000000000220004c000001540000c13d0000000f03000029000000000230004c000001650000c13d00000010010000290000000001010433000000440210003900000402030000410000000000320435000000240210003900000003030000390000000000320435000003e80200004100000000002104350000000402100039000000200300003900000000003204350000004001100210000003e301100197000003ed011001c700000eff00010430000000100100002900000000010104330000004402100039000003ec030000410000000000320435000000240210003900000003030000390000000000320435000003e80200004100000000002104350000000402100039000000200300003900000000003204350000004001100210000003e301100197000003ed011001c700000eff00010430000003ee01100197000000000131019f00000067020000390efd0ef90000040f0000006601000039000a00000001001d0efd0efb0000040f00000011020000290000000802200210000003ef02200197000003f001100197000000000121019f0000000a020000290efd0ef90000040f0000000e0b00002900000000010b0433000003de020000410000005f0310008c00000000030000190000000003022019000003de04100197000000000540004c0000000002008019000003de0440009c000000000203c019000000000220004c000001820000c13d000000000100001900000eff000104300000000d040000290000000003040433000003ea0230009c000001880000413d000000000100001900000eff0001043000000000021400190000000004b300190000003f01400039000003de03000041000000000521004b00000000050000190000000005034019000003de01100197000003de06200197000000000761004b000000000300a019000000000161013f000003de0110009c00000000010500190000000001036019000000000110004c000001a40000613d00000020014000390000000003010433000003ea0130009c000001a60000413d000003fe010000410000000000100435000000410100003900000004020000390000000000120435000003ff0100004100000eff00010430000000000100001900000eff000104300000003f013000390000000c0a0000290000000005a1016f000000100900002900000000010904330000000005510019000000000615004b00000000060000190000000106004039000003eb0750009c000001bc0000213d000000010660018f000000000660004c000001bc0000c13d0000004004400039000000000059043500000000003104350000000005430019000000000525004b000001c30000a13d000000000100001900000eff00010430000003fe010000410000000000100435000000410100003900000004020000390000000000120435000003ff0100004100000eff000104300000002005100039000000000630004c000001ce0000613d000000000600001900000000075600190000000008460019000000000808043300000000008704350000002006600039000000000736004b000001c70000413d000000000335001900000000000304350000004003b000390000000003030433000003ea0430009c000001d60000413d000000000100001900000eff000104300000000004b300190000003f03400039000003de05000041000000000623004b00000000060000190000000006054019000003de03300197000003de07200197000000000873004b000000000500a019000000000373013f000003de0330009c00000000030600190000000003056019000000000330004c000001f10000613d00000020034000390000000003030433000003ea0530009c000001f30000413d000003fe010000410000000000100435000000410100003900000004020000390000000000120435000003ff0100004100000eff00010430000000000100001900000eff000104300000003f053000390000000005a5016f00000000080904330000000005580019000000000685004b00000000060000190000000106004039000003eb0750009c000002070000213d000000010660018f000000000660004c000002070000c13d0000004004400039000000000059043500000000003804350000000005430019000000000525004b0000020e0000a13d000000000100001900000eff00010430000003fe010000410000000000100435000000410100003900000004020000390000000000120435000003ff0100004100000eff00010430001100000008001d0000002005800039000000000630004c0000021a0000613d000000000600001900000000075600190000000008460019000000000808043300000000008704350000002006600039000000000736004b000002130000413d000000000335001900000000000304350000000e0300002900000060033000390000000003030433000003ea0430009c000002550000413d000000000100001900000eff00010430000003ca0430009c000002a40000a13d000003cb0430009c000002d80000613d000003cc0430009c000002ec0000613d000003cd0330009c000002d00000c13d0000000003000416000000000330004c000003f80000c13d000000040220008a000003de030000410000003f0420008c00000000040000190000000004032019000003de02200197000000000520004c0000000003008019000003de0220009c00000000020400190000000002036019000000000220004c0000041b0000c13d000000000100001900000eff00010430000003d40430009c000002ba0000213d000003d70430009c000003000000613d000003d80330009c000002d00000c13d0000000003000416000000000330004c000003fa0000c13d000000040220008a000003de030000410000003f0420008c00000000040000190000000004032019000003de02200197000000000520004c0000000003008019000003de0220009c00000000020400190000000002036019000000000220004c000004210000c13d000000000100001900000eff000104300000000e0400002900000000044300190000003f03400039000003de05000041000000000623004b00000000060000190000000006054019000003de03300197000003de07200197000000000873004b000000000500a019000000000373013f000003de0330009c00000000030600190000000003056019000000000330004c000002d20000613d00000020034000390000000003030433000003ea0530009c000003df0000413d000003fe010000410000000000100435000000410100003900000004020000390000000000120435000003ff0100004100000eff00010430000f00000005001d000003db0430009c0000033c0000613d000003dc0430009c000003500000613d000003dd0130009c000002d00000c13d0000000001000416000000000110004c0000040a0000c13d000000040120008a000000010200008a000003de03000041000000000221004b00000000020000190000000002032019000003de01100197000003de0410009c0000000003008019000003de01100167000003de0110009c00000000010200190000000001036019000000000110004c000004660000c13d000000000100001900000eff00010430000003d10430009c000003620000613d000003d20130009c000002d00000c13d0000000001000416000000000110004c0000040c0000c13d000000040120008a000000010200008a000003de03000041000000000221004b00000000020000190000000002032019000003de01100197000003de0410009c0000000003008019000003de01100167000003de0110009c00000000010200190000000001036019000000000110004c0000046f0000c13d000000000100001900000eff00010430000003ce0430009c000003140000613d000003cf0330009c000002d00000c13d0000000003000416000000000330004c000003fc0000c13d000000040220008a000003de030000410000003f0420008c00000000040000190000000004032019000003de02200197000000000520004c0000000003008019000003de0220009c00000000020400190000000002036019000000000220004c000004280000c13d000000000100001900000eff00010430000003d50430009c000003260000613d000003d60330009c000002d00000c13d0000000003000416000000000330004c000003fe0000c13d000000040220008a000003de030000410000003f0420008c00000000040000190000000004032019000003de02200197000000000520004c0000000003008019000003de0220009c00000000020400190000000002036019000000000220004c0000042e0000c13d000000000100001900000eff00010430000000000100001900000eff00010430000000000100001900000eff00010430000000000100001900000eff00010430000000000100001900000efe0001042e0000000001000416000000000110004c000004000000c13d000000040120008a000000010200008a000003de03000041000000000221004b00000000020000190000000002032019000003de01100197000003de0410009c0000000003008019000003de01100167000003de0110009c00000000010200190000000001036019000000000110004c000004350000c13d000000000100001900000eff000104300000000001000416000000000110004c000004020000c13d000000040120008a000000010200008a000003de03000041000000000221004b00000000020000190000000002032019000003de01100197000003de0410009c0000000003008019000003de01100167000003de0110009c00000000010200190000000001036019000000000110004c000004400000c13d000000000100001900000eff000104300000000001000416000000000110004c000004040000c13d000000040120008a000000010200008a000003de03000041000000000221004b00000000020000190000000002032019000003de01100197000003de0410009c0000000003008019000003de01100167000003de0110009c00000000010200190000000001036019000000000110004c0000044a0000c13d000000000100001900000eff000104300000000003000416000000000330004c000004060000c13d000000040220008a000003de030000410000003f0420008c00000000040000190000000004032019000003de02200197000000000520004c0000000003008019000003de0220009c00000000020400190000000002036019000000000220004c000004590000c13d000000000100001900000eff000104300000000003000416000000000330004c000004080000c13d000000040220008a000003de030000410000001f0420008c00000000040000190000000004032019000003de02200197000000000520004c0000000003008019000003de0220009c00000000020400190000000002036019000000000220004c000004600000c13d000000000100001900000eff00010430000000000100001900000eff00010430000000000100001900000eff000104300000000001000416000000000110004c0000040e0000c13d000000040120008a000000010200008a000003de03000041000000000221004b00000000020000190000000002032019000003de01100197000003de0410009c0000000003008019000003de01100167000003de0110009c00000000010200190000000001036019000000000110004c000004910000c13d000000000100001900000eff000104300000000003000416000000000330004c000004100000c13d000000040220008a000003de030000410000003f0420008c00000000040000190000000004032019000003de02200197000000000520004c0000000003008019000003de0220009c00000000020400190000000002036019000000000220004c000004b00000c13d000000000100001900000eff000104300000000003000416000000000330004c000004120000c13d000000040220008a000003de030000410000003f0420008c00000000040000190000000004032019000003de02200197000000000520004c0000000003008019000003de0220009c00000000020400190000000002036019000000000220004c000004b60000c13d000000000100001900000eff00010430000000000100001900000eff00010430000000000100001900000eff00010430000000000100001900000eff00010430000000000100001900000eff00010430000000000100001900000eff00010430000000000100001900000eff0001043000000060021002700000001f0220018f0000006503100270000003e103300197000000000430004c0000038e0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000003870000413d000000000420004c0000039c0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f0000000000230435000003e20110019700000eff00010430000000000100001900000eff0001043000000060021002700000001f0220018f0000006503100270000003e103300197000000000430004c000003ae0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000003a70000413d000000000420004c000003bc0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f0000000000230435000003e20110019700000eff00010430000003fe010000410000000000100435000000410100003900000004020000390000000000120435000003ff0100004100000eff00010430000003fe010000410000000000100435000000410100003900000004020000390000000000120435000003ff0100004100000eff000104300000001001000029000000000101043300000044021000390000040e03000041000000000032043500000024021000390000001d030000390000000000320435000003e802000041000000000021043500000004021000390000000d0300002900000000003204350000004001100210000003e301100197000003ed011001c700000eff00010430000000000100001900000eff000104300000003f053000390000000c06000029000000000565016f000000100600002900000000060604330000000005560019000700000006001d000000000665004b00000000060000190000000106004039000003eb0750009c000004140000213d000000010660018f000000000660004c000004140000c13d000000400440003900000010060000290000000000560435000000070500002900000000003504350000000005430019000000000225004b000004bd0000a13d000000000100001900000eff00010430000000000100001900000eff00010430000000000100001900000eff00010430000000000100001900000eff00010430000000000100001900000eff00010430000000000100001900000eff00010430000000000100001900000eff00010430000000000100001900000eff00010430000000000100001900000eff00010430000000000100001900000eff00010430000000000100001900000eff00010430000000000100001900000eff00010430000000000100001900000eff00010430000000000100001900000eff00010430000000000100001900000eff00010430000003fe010000410000000000100435000000410100003900000004020000390000000000120435000003ff0100004100000eff000104300000000402100370000000000202043b000003df0320009c000005430000413d000000000100001900000eff000104300000000401100370000000000101043b000f00000001001d000003df0110009c0000054a0000413d000000000100001900000eff000104300000000402100370000000000202043b000003df0320009c0000057f0000413d000000000100001900000eff000104300000000402100370000000000202043b000f00000002001d000003df0220009c0000058b0000413d000000000100001900000eff0001043000000066010000390efd0efb0000040f000000100200002900000000020204330000000801100270000003e50110019700000000001204350000004001200210000003e301100197000003e4011001c700000efe0001042e00000067010000390efd0efb0000040f00000010020000290000000002020433000003e50110019700000000001204350000004001200210000003e301100197000003e4011001c700000efe0001042e00000065010000390efd0efb0000040f0000040d01100197000000000110004c000005ac0000c13d00000066010000390efd0efb0000040f00000010020000290000000002020433000000ff0110018f00000000001204350000004001200210000003e301100197000003e4011001c700000efe0001042e0000000402100370000000000202043b000f00000002001d000003df0220009c000005ae0000413d000000000100001900000eff000104300000000401100370000000000101043b000003df0210009c000005ec0000413d000000000100001900000eff0001043000000035010000390efd0efb0000040f0000001002000029000000000202043300000000001204350000004001200210000003e301100197000003e4011001c700000efe0001042e00000065010000390efd0efb0000040f0000ff000110018f000000000110004c000006040000c13d00000010010000290000000001010433000c00000001001d0000003701000039001100000001001d0efd0efb0000040f000000010210018f00000001031002700000007f0430018f000000000520004c000000000304601900000000050300190000001f0330008c00000000030000190000000103002039000000010330018f000000000420004c0000000004000019000000010400c039000000010440018f000000000334004b000006390000613d000003fe010000410000000000100435000000220100003900000004020000390000000000120435000003ff0100004100000eff0001043000000065010000390efd0efb0000040f000000ff0110018f000000000110004c000006060000c13d0000003601000039001100000001001d0efd0efb0000040f000000010210018f00000001031002700000007f0430018f000000000520004c000000000304601900000000050300190000001f0330008c00000000030000190000000103002039000000010330018f000000000420004c0000000004000019000000010400c039000000010440018f000000000334004b000006570000613d000003fe010000410000000000100435000000220100003900000004020000390000000000120435000003ff0100004100000eff000104300000000402100370000000000202043b000003df0320009c000006080000413d000000000100001900000eff000104300000000402100370000000000202043b000f00000002001d000003df0220009c000006140000413d000000000100001900000eff0001043000000007020000290000002002200039000000000530004c000004c90000613d000000000500001900000000062500190000000007450019000000000707043300000000007604350000002005500039000000000635004b000004c20000413d0000000002320019000000000002043500000010020000290000000003020433000000610200008a000600000003001d000000000223004b000006320000213d00000006020000290000006002200039000003ea0320009c000006320000813d0000001003000029000000000023043500000006020000290000004004200039000200000004001d000000000004043500000000000204350000002002200039000300000002001d00000000000204350000000005030433000003f102000041000000000025043500000004025000390000002003000039000500000003001d00000000003204350000000003000414000000000201043300000024045000390000000000240435000e00000005001d0000004404500039000000000520004c000004f60000613d000000000500001900000000064500190000002005500039000000000715001900000000070704330000000000760435000000000625004b000004ef0000413d000000000142001900000000000104350000000e010000290000004001100210000003e301100197000000c003300210000003f203300197000000000113019f0000006002200210000003f302200041000003f402200197000003f502200041000003f602200197000000000121019f00000000030004150000001f0330008a00000020033000c900000000020000190efd0ee00000040f0000001f0200035f0000006001200270000003c101100197000000ff03000039000400000003001d0000001e0330024f000000010330008c000006fa0000c13d0000001f0310018f0000000504100270000000000540004c0000000e080000290000051f0000613d000000000500001900000005065002100000000007680019000000000662034f000000000606043b00000000006704350000000105500039000000000645004b000005170000413d000000000530004c0000052f0000613d0000000504400210000000000242034f0000000e0500002900000000044500190000000303300210000000000504043300000000053501cf000000000535022f000000000202043b0000010003300089000000000232022f00000000023201cf000000000252019f00000000002404350000001f02100039000003f7022001970000000e030000290000000003320019000000000223004b00000000020000190000000102004039000a00000003001d000003eb0330009c000008530000213d000000010220018f000000000220004c000008530000c13d00000010020000290000000a0300002900000000003204350000001f0210008c0000086d0000213d000000000100001900000eff000104300000002401100370000000000101043b001100000001001d000003df0110009c000006720000413d000000000100001900000eff000104300000001101000029000000000010043500000034010000390000002002000039000e00000002001d0000000000120435000003e001000041000080100200003900000000030004150000002b0330008a00000020033000c90efd0ec70000040f0000002b0100035f000000ff02000039000d00000002001d0000002a0220024f000000010220008c0000069c0000c13d000000000101043b0000000f0200002900000000002004350000000e020000290000000000120435000003e00100004100008010020000390000000003000415000000290330008a00000020033000c90efd0ec70000040f000000290100035f0000000d02000029000000280220024f000000000220004c000007810000613d000000000101043b0efd0efb0000040f00000001020003670000002402200370000000000202043b0000000003120019000000000123004b00000000010000190000000101004039000000010110018f000000000110004c000008730000613d000003fe010000410000000000100435000000110100003900000004020000390000000000120435000003ff0100004100000eff000104300000002401100370000000000301043b00000011010000290efd0cbc0000040f00000010010000290000000001010433000000010200003900000000002104350000004001100210000003e301100197000003e4011001c700000efe0001042e0000002401100370000000000101043b000e00000001001d00000066010000390efd0efb0000040f0000000801100270000003e5011001970000001102000029000000000112004b000006ba0000c13d0000000f01000029000000000110004c0000079f0000c13d0000001001000029000000000101043300000064021000390000040b03000041000000000032043500000044021000390000040c030000410000000000320435000000240210003900000021030000390000000000320435000003e80200004100000000002104350000000402100039000000200300003900000000003204350000004001100210000003e301100197000003e9011001c700000eff00010430000000000100001900000eff000104300000002401100370000000000101043b000c00000001001d0000001101000029000000000010043500000034010000390000002002000039000e00000002001d0000000000120435000003e00100004100008010020000390000000003000415000000190330008a00000020033000c90efd0ec70000040f000000190100035f000000ff02000039000d00000002001d000000180220024f000000010220008c000006bc0000c13d000000000101043b0000000f0200002900000000002004350000000e020000290000000000120435000003e00100004100008010020000390000000003000415000000170330008a00000020033000c90efd0ec70000040f000000170100035f0000000d02000029000000160220024f000000000220004c000007cd0000613d000000000101043b0efd0efb0000040f0000000c02000029000000000221004b0000087e0000813d000000100100002900000000010104330000006402100039000003e60300004100000000003204350000004402100039000003e7030000410000000000320435000000240210003900000025030000390000000000320435000003e802000041000000000021043500000004021000390000000e0300002900000000003204350000004001100210000003e301100197000003e9011001c700000eff000104300000000000100435000000330100003900000020020000390000000000120435000003e00100004100008010020000390000000003000415000000270330008a00000020033000c90efd0ec70000040f000000270100035f000000ff02000039000000260220024f000000010220008c000006da0000c13d000000000101043b0efd0efb0000040f0000001002000029000000000202043300000000001204350000004001200210000003e301100197000003e4011001c700000efe0001042e000000000100001900000eff00010430000000000100001900000eff000104300000002401100370000000000301043b00000011010000290efd0dc90000040f00000010010000290000000001010433000000010200003900000000002104350000004001100210000003e301100197000003e4011001c700000efe0001042e0000002401100370000000000101043b000e00000001001d00000066010000390efd0efb0000040f0000000801100270000003e5011001970000001102000029000000000112004b000006f80000c13d0000000f01000029000000000110004c000007eb0000c13d0000001001000029000000000101043300000044021000390000040703000041000000000032043500000024021000390000001f030000390000000000320435000003e80200004100000000002104350000000402100039000000200300003900000000003204350000004001100210000003e301100197000003ed011001c700000eff00010430000003fe010000410000000000100435000000410100003900000004020000390000000000120435000003ff0100004100000eff000104300000000c030000290000000000530435000000000220004c000007fd0000613d00000011010000290000000000100435000e00000005001d000000000150004c001100000000001d000008060000613d0000000c010000290000002001100039000d00000001001d000003f902000041001100000000001d000f00000002001d00000000010200190efd0efb0000040f00000011030000290000000d02000029000000000232001900000000001204350000000f0200002900000001022000390000002003300039001100000003001d0000000e01000029000000000113004b000006480000413d000008060000013d0000000f030000290000000000530435000000000220004c0000081a0000613d00000011010000290000000000100435000000a001000039000000000250004c000008210000613d000003f8030000410000000001000019000e00000005001d001100000003001d000f00000001001d00000000010300190efd0efb0000040f0000000f040000290000001103000029000000a0024000390000000000120435000000010330003900000020014000390000000e02000029000000000221004b000006630000413d000000c001400039000008210000013d000000000020043500000034010000390000002002000039000f00000002001d0000000000120435000003e00100004100008010020000390000000003000415000000150330008a00000020033000c90efd0ec70000040f000000150100035f000000ff02000039000e00000002001d000000140220024f000000010220008c000008350000c13d000000000101043b000000110200002900000000002004350000000f020000290000000000120435000003e00100004100008010020000390000000003000415000000130330008a00000020033000c90efd0ec70000040f000000130100035f0000000e02000029000000120220024f000000000220004c0000088b0000613d000000000101043b0efd0efb0000040f0000001002000029000000000202043300000000001204350000004001200210000003e301100197000003e4011001c700000efe0001042e00000060021002700000001f0220018f0000006503100270000003e103300197000000000430004c000006aa0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000006a30000413d000000000420004c000006b80000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f0000000000230435000003e20110019700000eff00010430000000000100001900000eff0001043000000060021002700000001f0220018f0000006503100270000003e103300197000000000430004c000006ca0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000006c30000413d000000000420004c000006d80000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f0000000000230435000003e20110019700000eff0001043000000060021002700000001f0220018f0000006503100270000003e103300197000000000430004c000006e80000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000006e10000413d000000000420004c000006f60000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f0000000000230435000003e20110019700000eff00010430000000000100001900000eff000104300000000101000039000000060200002900000000001204350000006001000039000a00000001001d00000010010000290000000004010433000003f101000041000000000014043500000004014000390000000502000029000000000021043500000000020004140000001107000029000000000107043300000024034000390000000000130435000e00000004001d0000004403400039000000000410004c000007170000613d000000000400001900000000053400190000002004400039000000000674001900000000060604330000000000650435000000000514004b000007100000413d000000000331001900000000000304350000000e030000290000004003300210000003e303300197000000c002200210000003f202200197000000000232019f0000006001100210000003f301100041000003f401100197000003f501100041000003f601100197000000000112019f00000000030004150000001d0330008a00000020033000c900000000020000190efd0ee00000040f0000001d0200035f0000006001200270000003c10110019700000004030000290000001c0330024f000000000330004c000007630000613d0000001f0310018f0000000504100270000000000540004c0000000e080000290000073f0000613d000000000500001900000005065002100000000007680019000000000662034f000000000606043b00000000006704350000000105500039000000000645004b000007370000413d000000000530004c0000074f0000613d0000000504400210000000000242034f0000000e0500002900000000044500190000000303300210000000000504043300000000053501cf000000000535022f000000000202043b0000010003300089000000000232022f00000000023201cf000000000252019f00000000002404350000001f02100039000003f7022001970000000e030000290000000003320019000000000223004b00000000020000190000000102004039000800000003001d000003eb0330009c000008660000213d000000010220018f000000000220004c000008660000c13d0000001002000029000000080300002900000000003204350000001f0210008c000009050000213d000000000100001900000eff000104300000000101000039000000030200002900000000001204350000006001000039000800000001001d00000000010000190efd0efb0000040f0000ff000110018f000000000110004c0000085a0000c13d0000001001000029000000000101043300000064021000390000040003000041000000000032043500000044021000390000040103000041000000000032043500000024021000390000002b030000390000000000320435000003e80200004100000000002104350000000402100039000000200300003900000000003204350000004001100210000003e301100197000003e9011001c700000eff0001043000000060021002700000001f0220018f0000006503100270000003e103300197000000000430004c0000078f0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000007880000413d000000000420004c0000079d0000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f0000000000230435000003e20110019700000eff000104300000000f01000029000000000010043500000033020000390000002001000039001100000001001d000d00000002001d0000000000210435000003e00100004100008010020000390000000003000415000000250330008a00000020033000c90efd0ec70000040f000000250100035f000000ff02000039000c00000002001d000000240220024f000000010220008c000008a90000c13d000000000101043b0efd0efb0000040f00000000020100190000000e01000029000b00000002001d000000000112004b0000090b0000813d0000001001000029000000000101043300000064021000390000040903000041000000000032043500000044021000390000040a030000410000000000320435000000240210003900000022030000390000000000320435000003e80200004100000000002104350000000402100039000000110300002900000000003204350000004001100210000003e301100197000003e9011001c700000eff0001043000000060021002700000001f0220018f0000006503100270000003e103300197000000000430004c000007db0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000007d40000413d000000000420004c000007e90000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f0000000000230435000003e20110019700000eff0001043000000035010000390efd0efb0000040f00000000020100190000000e010000290000000001120019000000000221004b00000000020000190000000102004039000000010220018f000000000220004c000008c70000613d000003fe010000410000000000100435000000110100003900000004020000390000000000120435000003ff0100004100000eff00010430000001000200008a000000000121016f0000000c0200002900000020022000390000000000120435000000000150004c00000020010000390000000001006019001100000001001d000000110100002900000020021000390000000c010000290efd0ca60000040f00000010010000290000000002010433001100000002001d0000002001000039000000000012043500000020022000390000000c010000290efd0c920000040f000000110200002900000000012100490000006001100210000003e2011001970000004002200210000003e302200197000000000121019f00000efe0001042e000001000200008a000000000121016f000000a0020000390000000000120435000000000150004c000000c001000039000000a001006039000000800210008a0000008001000039001100000001001d0efd0ca60000040f00000010010000290000000002010433001000000002001d00000020010000390000000000120435000000200220003900000011010000290efd0c920000040f000000100200002900000000012100490000006001100210000003e2011001970000004002200210000003e302200197000000000121019f00000efe0001042e00000060021002700000001f0220018f0000006503100270000003e103300197000000000430004c000008430000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b0000083c0000413d000000000420004c000008510000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f0000000000230435000003e20110019700000eff00010430000003fe010000410000000000100435000000410100003900000004020000390000000000120435000003ff0100004100000eff000104300000000a010000290000000001010433000100000001001d000003ea0110009c000008ec0000413d000003fe010000410000000000100435000000410100003900000004020000390000000000120435000003ff0100004100000eff00010430000003fe010000410000000000100435000000410100003900000004020000390000000000120435000003ff0100004100000eff000104300000000e020000290000000003020433000003ea0230009c0000092c0000413d000000000100001900000eff0001043000000011010000290000000f020000290efd0dc90000040f00000010010000290000000001010433000000010200003900000000002104350000004001100210000003e301100197000003e4011001c700000efe0001042e0000000c02000029000000000321004900000011010000290000000f020000290efd0dc90000040f00000010010000290000000001010433000000010200003900000000002104350000004001100210000003e301100197000003e4011001c700000efe0001042e00000060021002700000001f0220018f0000006503100270000003e103300197000000000430004c000008990000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000008920000413d000000000420004c000008a70000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f0000000000230435000003e20110019700000eff0001043000000060021002700000001f0220018f0000006503100270000003e103300197000000000430004c000008b70000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b000008b00000413d000000000420004c000008c50000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f0000000000230435000003e20110019700000eff0001043000000035020000390efd0ef90000040f0000000f010000290000000000100435000000330100003900000020020000390000000000120435000003e00100004100008010020000390000000003000415000000210330008a00000020033000c90efd0ec70000040f000000210100035f000000ff02000039000000200220024f000000010220008c000009480000c13d000000000101043b001100000001001d0efd0efb0000040f00000000020100190000000e010000290000000001120019000000000221004b00000000020000190000000102004039000000010220018f000000000220004c000009d30000613d000003fe010000410000000000100435000000110100003900000004020000390000000000120435000003ff0100004100000eff000104300000003601000039000d00000001001d0efd0efb0000040f000000010210018f00000001011002700000007f0310018f000000000420004c00000000010360190000001f0310008c00000000030000190000000103002039000000010330018f000000000220004c0000000002000019000000010200c039000000010220018f000000000232004b000009660000613d000003fe010000410000000000100435000000220100003900000004020000390000000000120435000003ff0100004100000eff000104300000000e020000290000000003020433000003ea0230009c000009b70000413d000000000100001900000eff000104300000000f01000029000000000010043500000011010000290000000d020000290000000000210435000003e00100004100008010020000390000000003000415000000230330008a00000020033000c90efd0ec70000040f000000230200035f0000000c01000029000000220110024f000000010110008c000009ef0000c13d0000000e030000290000000b010000290000000001310049000000000202043b0efd0ef90000040f00000035010000390efd0efb0000040f0000000e02000029000000000221004b00000a540000813d000003fe010000410000000000100435000000110100003900000004020000390000000000120435000003ff0100004100000eff000104300000000e04000029000000000241001900000000034300190000001f01300039000003de04000041000000000521004b00000000050000190000000005044019000003de01100197000003de06200197000000000761004b000000000400a019000000000161013f000003de0110009c00000000010500190000000001046019000000000110004c00000a0d0000613d0000000001030433000003ea0410009c00000a720000413d000003fe010000410000000000100435000000410100003900000004020000390000000000120435000003ff0100004100000eff0001043000000060021002700000001f0220018f0000006503100270000003e103300197000000000430004c000009560000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b0000094f0000413d000000000420004c000009640000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f0000000000230435000003e20110019700000eff00010430000000200210008c000009800000413d00000001040000290000001f024000390000000502200270000003f802200041000003f803000041000000200440008c00000000030280190000000d0200002900000000002004350000001f011000390000000501100270000003f801100041000e00000001001d000000000113004b000009800000813d001100000003001d000000000100001900000000020300190efd0ef90000040f000000110300002900000001033000390000000e01000029000000000113004b000009770000413d00000001010000290000001f0110008c00000a1c0000a13d0000000d0100002900000000001004350000000c010000290000000102000029000000000112016f000003f8030000410000002004000039000900000001001d000000000110004c0000000a01000029000a00000001001d000009a30000613d0000002004000039000003f803000041000e00000000001d000d00000004001d001100000003001d0000000a010000290000000001140019000000000101043300000011020000290efd0ef90000040f0000000d040000290000001103000029000000200440003900000001033000390000000e0200002900000020022000390000000901000029000e00000002001d000000000112004b000009920000413d00000001010000290000000902000029000000000112004b000009b30000813d00000001010000290000000301100210000000f80110018f000000010200008a000000000112022f000000000121013f0000000a0200002900000000022400190000000002020433000000000112016f00000000020300190efd0ef90000040f00000001010000390000000102000029000000010220021000000a2a0000013d0000000e04000029000000000241001900000000034300190000001f01300039000003de04000041000000000521004b00000000050000190000000005044019000003de01100197000003de06200197000000000761004b000000000400a019000000000161013f000003de0110009c00000000010500190000000001046019000000000110004c00000a520000613d0000000001030433000003ea0410009c00000ade0000413d000003fe010000410000000000100435000000410100003900000004020000390000000000120435000003ff0100004100000eff0001043000000011020000290efd0ef90000040f000000100100002900000000010104330000000e02000029000000000021043500000403020000410000040403000041000000000023041f0000000f02000029000000000020041e000000210200008a000000000221004b00000a0f0000213d0000002002100039000009e70000013d000000000003041e0000004001100039000000000312004b00000a0f0000a13d000000000412004900000000030104330000003f0440008c000009e30000a13d00000020041000390000000004040433000000000043041e000009e40000013d00000060012002700000001f0110018f0000006503200270000003e103300197000000000430004c000009fd0000613d00000000040000190000000505400210000000000652034f000000000606043b00000000006504350000000104400039000000000534004b000009f60000413d000000000410004c00000a0b0000613d00000003011002100000000503300210000000000403043300000000041401cf000000000414022f000000000532034f000000000505043b0000010001100089000000000515022f00000000011501cf000000000141019f0000000000130435000003e20120019700000eff00010430000000000100001900000eff00010430000000100300002900000000010304330000000e04000029000000000041043500000405010000410000040602000041000000000012041f0000000f01000029000000000041041e00000000010304330000004001100210000003e30110019700000efe0001042e0000000101000029000000000110004c000000000200001900000a230000613d0000000a0100002900000020011000390000000002010433000000010300002900000001013002100000000303300210000000010400008a000000000334022f000000000343013f000000000232016f000000000112019f00000036020000390efd0ef90000040f00000008010000290000000001010433000100000001001d000003eb0110009c00000a390000a13d000003fe010000410000000000100435000000410100003900000004020000390000000000120435000003ff0100004100000eff000104300000003701000039000d00000001001d0efd0efb0000040f000000010210018f00000001011002700000007f0310018f000000000420004c00000000010360190000001f0310008c00000000030000190000000103002039000000010330018f000000000220004c0000000002000019000000010200c039000000010220018f000000000232004b00000a8d0000613d000003fe010000410000000000100435000000220100003900000004020000390000000000120435000003ff0100004100000eff00010430000000000100001900000eff000104300000000e02000029000000000121004900000035020000390efd0ef90000040f000000100100002900000000010104330000000e02000029000000000021043500000403020000410000040403000041000000000023041f0000000f02000029000000000002041e000000210200008a000000000221004b00000a800000213d000000200210003900000a6a0000013d000000000003041e0000004001100039000000000312004b00000a800000a13d000000000412004900000000030104330000003f0440008c00000a660000a13d00000020041000390000000004040433000000000043041e00000a670000013d0000003f041000390000000c05000029000000000454016f0000000a050000290000000004540019000003ea0540009c00000aec0000413d000003fe010000410000000000100435000000410100003900000004020000390000000000120435000003ff0100004100000eff00010430000000100300002900000000010304330000000e04000029000000000041043500000408010000410000040602000041000000000012041f0000000f01000029000000000041041e00000000010304330000004001100210000003e30110019700000efe0001042e000000200210008c00000aa70000413d00000001040000290000001f024000390000000502200270000003f902200041000003f903000041000000200440008c00000000030280190000000d0200002900000000002004350000001f011000390000000501100270000003f901100041000e00000001001d000000000113004b00000aa70000813d001100000003001d000000000100001900000000020300190efd0ef90000040f000000110300002900000001033000390000000e01000029000000000113004b00000a9e0000413d00000001010000290000001f0110008c00000af60000a13d0000000d0100002900000000001004350000000c010000290000000102000029000000000112016f000003f903000041000900000001001d000000000110004c00000005040000290000000801000029000800000001001d00000aca0000613d0000002004000039000003f903000041000e00000000001d000d00000004001d001100000003001d00000008010000290000000001140019000000000101043300000011020000290efd0ef90000040f0000000d040000290000001103000029000000200440003900000001033000390000000e0200002900000020022000390000000901000029000e00000002001d000000000112004b00000ab90000413d00000001010000290000000902000029000000000112004b00000ada0000813d00000001010000290000000301100210000000f80110018f000000010200008a000000000112022f000000000121013f000000080200002900000000022400190000000002020433000000000112016f00000000020300190efd0ef90000040f00000001010000390000000102000029000000010220021000000b040000013d0000003f041000390000000c05000029000000000454016f00000008050000290000000004540019000003ea0540009c00000bc40000413d000003fe010000410000000000100435000000410100003900000004020000390000000000120435000003ff0100004100000eff000104300000002003300039000000100500002900000000004504350000000a0400002900000000001404350000000004310019000000000224004b00000bce0000a13d000000000100001900000eff000104300000000101000029000000000110004c000000000200001900000afd0000613d000000080100002900000020011000390000000002010433000000010300002900000001013002100000000303300210000000010400008a000000000334022f000000000343013f000000000232016f000000000112019f00000037020000390efd0ef90000040f00000010010000290000000004010433000003fa01000041000000000014043500000004014000390000000502000029000000000021043500000000020004140000000707000029000000000107043300000024034000390000000000130435001100000004001d0000004403400039000000000410004c00000b1f0000613d000000000400001900000000053400190000002004400039000000000674001900000000060604330000000000650435000000000514004b00000b180000413d0000000003310019000000000003043500000011030000290000004003300210000003e303300197000000c002200210000003f202200197000000000232019f0000006001100210000003f301100041000003f401100197000003f501100041000003f601100197000000000112019f00000000030004150000001b0330008a00000020033000c900000000020000190efd0ee00000040f000000110600002900000004010000290000001a0110024f0000001b0200035f000000000300001900000005043002100000000005460019000000000442034f000000000404043b00000000004504350000000104300039000000000334004b00000000030000190000000103004039000000010330018f000000000330004c000000000304001900000b370000c13d0000006002200270000003c102200197000000000110004c00000b670000613d000000200120008c000000200100003900000000010240190000001f02100039000000600320018f00000011020000290000000002230019000000000332004b00000000030000190000000103004039000003eb0420009c00000c0f0000213d000000010330018f000000000330004c00000c0f0000c13d00000010030000290000000000230435000003de020000410000001f0310008c00000000030000190000000003022019000003de01100197000000000410004c0000000002008019000003de0110009c00000000010300190000000001026019000000000110004c00000c270000c13d000000000100001900000eff0001043000000001010000390000000202000029000000000012043500000006010000290000000001010433000e00000001001d0000006501000039001100000001001d0efd0efb0000040f00000002020000290000000002020433000003fb03000041000000000220004c000000000203001900000000020060190000000e03000029000000000330004c0000000003000019000000010300c039000003fc01100197000000000131019f00000003030000290000000003030433000000000330004c00000100030000390000000003006019000000000131019f000000000121019f00000011020000290efd0ef90000040f00000066010000390efd0efb0000040f00000010020000290000000002020433000000600300003900000000003204350000000a080000290000000004080433000000600320003900000000004304350000008005200039000000000340004c00000b9a0000613d000000000300001900000000065300190000002003300039000000000783001900000000070704330000000000760435000000000643004b00000b930000413d000000ff0310018f000000000154001900000000000104350000001f014000390000000c04000029000000000141016f00000000055100190000000004250049000000200120003900000000004104350000000809000029000000000409043300000000004504350000002005500039000000000640004c00000bb20000613d000000000600001900000000075600190000002006600039000000000896001900000000080804330000000000870435000000000746004b00000bab0000413d00000000065400190000000000060435000000400620003900000000003604350000001f034000390000000c04000029000000000343016f00000000035300190000000f04000029000003e5044001970000000005230049000000000650004c00000bd40000c13d000003fd010000410000000202000039000000000012041f000000000004041e00000be90000013d000000200330003900000010050000290000000000450435000000080400002900000000001404350000000004310019000000000224004b00000c160000a13d000000000100001900000eff000104300000000a020000290000002002200039000000000410004c00000c1c0000c13d0000000000020435000006ff0000013d0000000002020433000000200550021000000002055001bf000003fd06000041000000000065041f000000000024041e000000000213004b00000be90000a13d00000be10000013d000000000002041e0000004001100039000000000213004b00000be90000a13d000000000413004900000000020104330000003f0440008c00000bdd0000a13d00000020041000390000000004040433000000000042041e00000bde0000013d0000000b01000029000000000110004c00000c0a0000613d00000000010000190efd0efb0000040f000003c202000041000000000121016f00000000020000190efd0ef90000040f0000001001000029000000000101043300000001020000390000000000210435000003c302000041000003c403000041000000000023041f000000210200008a000000000221004b00000c0a0000213d000000200210003900000c020000013d000000000003041e0000004001100039000000000312004b00000c0a0000a13d000000000412004900000000030104330000003f0440008c00000bfe0000a13d00000020041000390000000004040433000000000043041e00000bff0000013d000000100100002900000000010104330000004001100210000003e30110019700000efe0001042e000003fe010000410000000000100435000000410100003900000004020000390000000000120435000003ff0100004100000eff0001043000000008020000290000002002200039000000000410004c00000c2e0000c13d0000000000020435000007680000013d000000000400001900000000052400190000000006340019000000000606043300000000006504350000002004400039000000000514004b00000c1d0000413d00000000012100190000000000010435000006ff0000013d00000011010000290000000001010433001100000001001d000001000110008c00000c390000413d000000000100001900000eff00010430000000000400001900000000052400190000000006340019000000000606043300000000006504350000002004400039000000000514004b00000c2f0000413d00000000012100190000000000010435000007680000013d0000006601000039000e00000001001d0efd0efb0000040f000001000200008a000000000121016f0000001102000029000000000121019f0000000e020000290efd0ef90000040f00000b6a0000013d000200000000000200000000010000190efd0efb0000040f0000ff000210018f000000000220004c00000c710000613d000003c6010000410000000000100439000000000100041000000004020000390000000000120439000003c70100004100008002020000390000000003000415000000020330008a00000020033000c90efd0ec70000040f000000ff01000039000000010110024f000000010110008c00000c7c0000c13d000000020100035f000000000101043b000000000110004c000000000100001900000c7a0000613d0000004001000039000000000101043300000064021000390000040f03000041000000000032043500000044021000390000041003000041000000000032043500000024021000390000002e030000390000000000320435000003e80200004100000000002104350000000402100039000000200300003900000000003204350000004001100210000003e301100197000003e9011001c700000eff00010430000000ff0210018f000000000220004c00000c7e0000c13d000001000200008a000000000121016f00000001011001bf00000000020000190efd0ef90000040f00000001010000390000000200000005000000000001042d000000000100001900000eff000104300000004001000039000000000101043300000064021000390000040f03000041000000000032043500000044021000390000041003000041000000000032043500000024021000390000002e030000390000000000320435000003e80200004100000000002104350000000402100039000000200300003900000000003204350000004001100210000003e301100197000003e9011001c700000eff00010430000000000301043300000000003204350000002002200039000000000430004c00000c9f0000613d000000000400001900000000052400190000002004400039000000000614001900000000060604330000000000650435000000000534004b00000c980000413d000000000123001900000000000104350000001f01300039000000200300008a000000000131016f0000000001120019000000000001042d0000001f02200039000000200300008a000000000232016f0000000001120019000000000221004b00000000020000190000000102004039000003eb0310009c00000cb50000213d000000010220018f000000000220004c00000cb50000c13d00000040020000390000000000120435000000000001042d000003fe010000410000000000100435000000410100003900000004020000390000000000120435000003ff0100004100000eff00010430000d000000000002000003e504100197000000000140004c00000d2c0000613d000700000003001d000003e501200197000400000001001d000000000110004c00000d400000613d000500000004001d000000000040043500000033020000390000002001000039000300000001001d000200000002001d0000000000210435000003e001000041000080100200003900000000030004150000000d0330008a00000020033000c90efd0ec70000040f0000000d0100035f000000ff02000039000600000002001d0000000c0220024f000000010220008c00000d540000c13d000000000101043b0efd0efb0000040f00000000020100190000000701000029000100000002001d000000000112004b00000d720000413d00000005010000290000000000100435000000030100002900000002020000290000000000210435000003e001000041000080100200003900000000030004150000000b0330008a00000020033000c90efd0ec70000040f0000000b0200035f00000006010000290000000a0110024f000000010110008c00000d860000c13d000000070100002900000001030000290000000001130049000000000202043b0efd0ef90000040f00000004010000290000000000100435000003e00100004100008010020000390000000003000415000000090330008a00000020033000c90efd0ec70000040f000000090100035f0000000602000029000000080220024f000000000220004c00000da40000613d000000000101043b000600000001001d0efd0efb0000040f000000000201001900000007010000290000000001120019000000000221004b00000000020000190000000102004039000000010220018f000000000220004c00000dc20000c13d00000006020000290efd0ef90000040f000000400100003900000000010104330000000702000029000000000021043500000403020000410000040403000041000000000023041f00000005020000290000000403000029000000000032041e000000210200008a000000000221004b00000d2a0000213d000000200210003900000d220000013d000000000003041e0000004001100039000000000312004b00000d2a0000a13d000000000412004900000000030104330000003f0440008c00000d1e0000a13d00000020041000390000000004040433000000000043041e00000d1f0000013d0000000d00000005000000000001042d00000040010000390000000001010433000000640210003900000415030000410000000000320435000000440210003900000416030000410000000000320435000000240210003900000025030000390000000000320435000003e80200004100000000002104350000000402100039000000200300003900000000003204350000004001100210000003e301100197000003e9011001c700000eff0001043000000040010000390000000001010433000000640210003900000413030000410000000000320435000000440210003900000414030000410000000000320435000000240210003900000023030000390000000000320435000003e80200004100000000002104350000000402100039000000200300003900000000003204350000004001100210000003e301100197000003e9011001c700000eff0001043000000060021002700000001f0220018f0000006503100270000003e103300197000000000430004c00000d620000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00000d5b0000413d000000000420004c00000d700000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f0000000000230435000003e20110019700000eff0001043000000040010000390000000001010433000000640210003900000411030000410000000000320435000000440210003900000412030000410000000000320435000000240210003900000026030000390000000000320435000003e80200004100000000002104350000000402100039000000030300002900000000003204350000004001100210000003e301100197000003e9011001c700000eff0001043000000060012002700000001f0110018f0000006503200270000003e103300197000000000430004c00000d940000613d00000000040000190000000505400210000000000652034f000000000606043b00000000006504350000000104400039000000000534004b00000d8d0000413d000000000410004c00000da20000613d00000003011002100000000503300210000000000403043300000000041401cf000000000414022f000000000532034f000000000505043b0000010001100089000000000515022f00000000011501cf000000000141019f0000000000130435000003e20120019700000eff0001043000000060021002700000001f0220018f0000006503100270000003e103300197000000000430004c00000db20000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00000dab0000413d000000000420004c00000dc00000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f0000000000230435000003e20110019700000eff00010430000003fe010000410000000000100435000000110100003900000004020000390000000000120435000003ff0100004100000eff000104300009000000000002000500000003001d000003e503100197000000000130004c00000e140000613d000003e501200197000400000001001d000000000110004c00000e280000613d000100000003001d000000000030043500000034010000390000002002000039000300000002001d0000000000120435000003e00100004100008010020000390000000003000415000000090330008a00000020033000c90efd0ec70000040f000000090100035f000000ff02000039000200000002001d000000080220024f000000010220008c00000e3c0000c13d000000000101043b0000000402000029000000000020043500000003020000290000000000120435000003e00100004100008010020000390000000003000415000000070330008a00000020033000c90efd0ec70000040f000000070100035f0000000202000029000000060220024f000000000220004c00000e5a0000613d000000000201043b00000005010000290efd0ef90000040f000000400100003900000000010104330000000502000029000000000021043500000417020000410000040403000041000000000023041f00000001020000290000000403000029000000000032041e000000210200008a000000000221004b00000e120000213d000000200210003900000e0a0000013d000000000003041e0000004001100039000000000312004b00000e120000a13d000000000412004900000000030104330000003f0440008c00000e060000a13d00000020041000390000000004040433000000000043041e00000e070000013d0000000900000005000000000001042d0000004001000039000000000101043300000064021000390000041a03000041000000000032043500000044021000390000041b030000410000000000320435000000240210003900000024030000390000000000320435000003e80200004100000000002104350000000402100039000000200300003900000000003204350000004001100210000003e301100197000003e9011001c700000eff0001043000000040010000390000000001010433000000640210003900000418030000410000000000320435000000440210003900000419030000410000000000320435000000240210003900000022030000390000000000320435000003e80200004100000000002104350000000402100039000000200300003900000000003204350000004001100210000003e301100197000003e9011001c700000eff0001043000000060021002700000001f0220018f0000006503100270000003e103300197000000000430004c00000e4a0000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00000e430000413d000000000420004c00000e580000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f0000000000230435000003e20110019700000eff0001043000000060021002700000001f0220018f0000006503100270000003e103300197000000000430004c00000e680000613d00000000040000190000000505400210000000000651034f000000000606043b00000000006504350000000104400039000000000534004b00000e610000413d000000000420004c00000e760000613d00000003022002100000000503300210000000000403043300000000042401cf000000000424022f000000000531034f000000000505043b0000010002200089000000000525022f00000000022501cf000000000242019f0000000000230435000003e20110019700000eff00010430000200000000000200000000010000190efd0efb0000040f0000ff000210018f000000000220004c00000ea60000613d000003c6010000410000000000100439000000000100041000000004020000390000000000120439000003c70100004100008002020000390000000003000415000000020330008a00000020033000c90efd0ec70000040f000000ff01000039000000010110024f000000010110008c00000eb10000c13d000000020100035f000000000101043b000000000110004c000000000100001900000eaf0000613d0000004001000039000000000101043300000064021000390000040f03000041000000000032043500000044021000390000041003000041000000000032043500000024021000390000002e030000390000000000320435000003e80200004100000000002104350000000402100039000000200300003900000000003204350000004001100210000003e301100197000003e9011001c700000eff00010430000000ff0210018f000000000220004c00000eb30000c13d000001000200008a000000000121016f00000001011001bf00000000020000190efd0ef90000040f00000001010000390000000200000005000000000001042d000000000100001900000eff000104300000004001000039000000000101043300000064021000390000040f03000041000000000032043500000044021000390000041003000041000000000032043500000024021000390000002e030000390000000000320435000003e80200004100000000002104350000000402100039000000200300003900000000003204350000004001100210000003e301100197000003e9011001c700000eff000104300002000000000002000200000003001d0000002003300039000100000003001d00000ed6002104230000000203000029000000200230011a0000000002010355000003de010000410000000102000029000000200220011a00000000021201bd00000000010300190000000200000005000000000001042d0000000203000029000000200230011a00000000020103550000041c010000410000000102000029000000200220011a000000000212018d00000000010300190000000200000005000000000001042d0002000000000002000200000003001d0000002003300039000100000003001d00000eef002104250000000203000029000000200230011a0000000002010355000003de010000410000000102000029000000200220011a00000000021201bd00000000010300190000000200000005000000000001042d0000000203000029000000200230011a00000000020103550000041c010000410000000102000029000000200220011a000000000212018d00000000010300190000000200000005000000000001042d000000000012041b000000000001042d000000000101041a000000000001042d00000efd0000043200000efe0001042e00000eff00010430000000000000000100000000000000010000000000000001000000000000000100000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498000000000000000000000000000000000000000000000000000000200000000100000002000000000000000000000000000000400000010000000000000000001806aa1896bbf26568e884a7374b41e002500962caba6a15023a8d90e8508b830200020000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000000000000000000000008c2a993d00000000000000000000000000000000000000000000000000000000a457c2d600000000000000000000000000000000000000000000000000000000ae1f6aae00000000000000000000000000000000000000000000000000000000ae1f6aaf00000000000000000000000000000000000000000000000000000000c2eeeebd00000000000000000000000000000000000000000000000000000000dd62ed3e00000000000000000000000000000000000000000000000000000000a457c2d700000000000000000000000000000000000000000000000000000000a9059cbb0000000000000000000000000000000000000000000000000000000095f11a40000000000000000000000000000000000000000000000000000000008c2a993e0000000000000000000000000000000000000000000000000000000095d89b4100000000000000000000000000000000000000000000000000000000313ce5660000000000000000000000000000000000000000000000000000000070a082300000000000000000000000000000000000000000000000000000000070a082310000000000000000000000000000000000000000000000000000000074f4f54700000000000000000000000000000000000000000000000000000000313ce56700000000000000000000000000000000000000000000000000000000395093510000000000000000000000000000000000000000000000000000000023b872dc0000000000000000000000000000000000000000000000000000000023b872dd0000000000000000000000000000000000000000000000000000000006fdde0300000000000000000000000000000000000000000000000000000000095ea7b30000000000000000000000000000000000000000000000000000000018160ddd80000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000020000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000007ffffffffffffff00000000000000000000000000000000ffffffff0000000000000000000000000000000000000000000000000000000000000000ffffffff00000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffff207a65726f00000000000000000000000000000000000000000000000000000045524332303a2064656372656173656420616c6c6f77616e63652062656c6f7708c379a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000840000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000ffffffffffffffff696e3500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064000000000000000000000000ffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffff0000000000000000000000000000000000000000ff95ce3e930000000000000000000000000000000000000000000000000000000000000000ffffffff000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f00000000000000000000000000000000000000000000000000000000ffffffe0000000000000000000000000000000000000000000000000000000000000004400000000000000000000000000000000000000000000000000000000ffffffe400000000000000000000000000000000000000000000000000000000000000000000000000000001ffffffe04a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b842a7b7dd785cd69714a189dffb3fd7d7174edc9ece837694ce50f7078f7c31ae7ba8be34000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000e6b2ac4004ee4493db8844da5db69722d2128345671818c3c41928655a83fb2c4e487b710000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000240000000000000000000000006e697469616c697a696e67000000000000000000000000000000000000000000496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069696e360000000000000000000000000000000000000000000000000000000000ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef0000000000000000000000000000000000000000000000000000002000000003397b33b307fc137878ebfc75b295289ec0ee25a31bb5bf034f33256fe8ea2aa6000000000000000000000000000000000000000000000000000000200000000245524332303a206d696e7420746f20746865207a65726f2061646472657373009b5b9a05e4726d8bb959f1440e05c6b8109443f2083bc4e386237d7654526553636500000000000000000000000000000000000000000000000000000000000045524332303a206275726e20616d6f756e7420657863656564732062616c616e730000000000000000000000000000000000000000000000000000000000000045524332303a206275726e2066726f6d20746865207a65726f206164647265730000000000000000000000000000000000000000000000000000000000ff000045524332303a20696e73756666696369656e7420616c6c6f77616e6365000000647920696e697469616c697a6564000000000000000000000000000000000000496e697469616c697a61626c653a20636f6e747261637420697320616c726561616c616e6365000000000000000000000000000000000000000000000000000045524332303a207472616e7366657220616d6f756e7420657863656564732062657373000000000000000000000000000000000000000000000000000000000045524332303a207472616e7366657220746f20746865207a65726f2061646472647265737300000000000000000000000000000000000000000000000000000045524332303a207472616e736665722066726f6d20746865207a65726f2061648c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925737300000000000000000000000000000000000000000000000000000000000045524332303a20617070726f766520746f20746865207a65726f206164647265726573730000000000000000000000000000000000000000000000000000000045524332303a20617070726f76652066726f6d20746865207a65726f206164647fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
            }
          },
          "factoryDependencies": {},
          "hash": "0100041d091171e76c36dc586919e89df47a969579f0ca8133bc486a3265a492"
        }
      },
      "cache-zk/solpp-generated-contracts/bridge/interfaces/IL1Bridge.sol": {
        "IL1Bridge": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_l2BlockNumber",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "_l2MessageIndex",
                  "type": "uint256"
                },
                {
                  "internalType": "uint16",
                  "name": "_l2TxNumberInBlock",
                  "type": "uint16"
                },
                {
                  "internalType": "bytes",
                  "name": "_message",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes32[]",
                  "name": "_merkleProof",
                  "type": "bytes32[]"
                }
              ],
              "name": "finalizeWithdrawal",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ]
        }
      },
      "cache-zk/solpp-generated-contracts/bridge/interfaces/IL2Bridge.sol": {
        "IL2Bridge": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "l1Sender",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "l2Receiver",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "l2Token",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "FinalizeDeposit",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "l2Sender",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "l1Receiver",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "l2Token",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "WithdrawalInitiated",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_l1Sender",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "_l2Receiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "_l1Token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "_amount",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "_data",
                  "type": "bytes"
                }
              ],
              "name": "finalizeDeposit",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "l1Bridge",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_l2Token",
                  "type": "address"
                }
              ],
              "name": "l1TokenAddress",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_l1Token",
                  "type": "address"
                }
              ],
              "name": "l2TokenAddress",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_l1Receiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "_l2Token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "_amount",
                  "type": "uint256"
                }
              ],
              "name": "withdraw",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ]
        }
      },
      "cache-zk/solpp-generated-contracts/bridge/interfaces/IL2EthInitializable.sol": {
        "IL2EthInitializable": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_l2Bridge",
                  "type": "address"
                }
              ],
              "name": "initialization",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ]
        }
      },
      "cache-zk/solpp-generated-contracts/bridge/interfaces/IL2StandardToken.sol": {
        "IL2StandardToken": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "_account",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "_amount",
                  "type": "uint256"
                }
              ],
              "name": "BridgeBurn",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "_account",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "_amount",
                  "type": "uint256"
                }
              ],
              "name": "BridgeMint",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_account",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "_amount",
                  "type": "uint256"
                }
              ],
              "name": "bridgeBurn",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_account",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "_amount",
                  "type": "uint256"
                }
              ],
              "name": "bridgeMint",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "l1Address",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "l2Bridge",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ]
        }
      },
      "cache-zk/solpp-generated-contracts/interfaces/IPaymaster.sol": {
        "IPaymaster": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "bytes",
                  "name": "_context",
                  "type": "bytes"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "txType",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "from",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "to",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ergsLimit",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ergsPerPubdataByteLimit",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "maxFeePerErg",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "maxPriorityFeePerErg",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "paymaster",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256[6]",
                      "name": "reserved",
                      "type": "uint256[6]"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "signature",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes32[]",
                      "name": "factoryDeps",
                      "type": "bytes32[]"
                    },
                    {
                      "internalType": "bytes",
                      "name": "paymasterInput",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "reservedDynamic",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct Transaction",
                  "name": "_transaction",
                  "type": "tuple"
                },
                {
                  "internalType": "bytes32",
                  "name": "_txHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "_suggestedSignedHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "enum ExecutionResult",
                  "name": "_txResult",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "_maxRefundedErgs",
                  "type": "uint256"
                }
              ],
              "name": "postOp",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "_txHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "_suggestedSignedHash",
                  "type": "bytes32"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "txType",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "from",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "to",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ergsLimit",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "ergsPerPubdataByteLimit",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "maxFeePerErg",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "maxPriorityFeePerErg",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "paymaster",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256[6]",
                      "name": "reserved",
                      "type": "uint256[6]"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "signature",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes32[]",
                      "name": "factoryDeps",
                      "type": "bytes32[]"
                    },
                    {
                      "internalType": "bytes",
                      "name": "paymasterInput",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "reservedDynamic",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct Transaction",
                  "name": "_transaction",
                  "type": "tuple"
                }
              ],
              "name": "validateAndPayForPaymasterTransaction",
              "outputs": [
                {
                  "internalType": "bytes",
                  "name": "context",
                  "type": "bytes"
                }
              ],
              "stateMutability": "payable",
              "type": "function"
            }
          ]
        }
      },
      "cache-zk/solpp-generated-contracts/interfaces/IPaymasterFlow.sol": {
        "IPaymasterFlow": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "_minAllowance",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "_innerInput",
                  "type": "bytes"
                }
              ],
              "name": "approvalBased",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes",
                  "name": "input",
                  "type": "bytes"
                }
              ],
              "name": "general",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ]
        }
      }
    },
    "errors": [
      {
        "component": "general",
        "errorCode": "5667",
        "formattedMessage": "Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> cache-zk/solpp-generated-contracts/TestnetPaymaster.sol:20:33:\n   |\n20 |     ) external payable returns (bytes memory context) {\n   |                                 ^^^^^^^^^^^^^^^^^^^^\n\n",
        "message": "Unused function parameter. Remove or comment out the variable name to silence this warning.",
        "severity": "warning",
        "sourceLocation": {
          "file": "cache-zk/solpp-generated-contracts/TestnetPaymaster.sol",
          "start": 609,
          "end": 629
        },
        "type": "Warning"
      }
    ],
    "version": "0.8.16",
    "long_version": "0.8.16+commit.07a7930e.Linux.g++",
    "zk_version": "1.2.0"
  }
}
