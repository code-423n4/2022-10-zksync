/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IZkSyncInterface extends ethers.utils.Interface {
  functions: {
    "acceptGovernor()": FunctionFragment;
    "approveEmergencyDiamondCutAsSecurityCouncilMember(bytes32)": FunctionFragment;
    "cancelDiamondCutProposal()": FunctionFragment;
    "commitBlocks(tuple,tuple[])": FunctionFragment;
    "emergencyFreezeDiamond()": FunctionFragment;
    "executeBlocks(tuple[])": FunctionFragment;
    "executeDiamondCutProposal(tuple)": FunctionFragment;
    "facetAddress(bytes4)": FunctionFragment;
    "facetAddresses()": FunctionFragment;
    "facetFunctionSelectors(address)": FunctionFragment;
    "facets()": FunctionFragment;
    "getCurrentProposalId()": FunctionFragment;
    "getFirstUnprocessedPriorityTx()": FunctionFragment;
    "getGovernor()": FunctionFragment;
    "getLastDiamondFreezeTimestamp()": FunctionFragment;
    "getPendingGovernor()": FunctionFragment;
    "getPriorityQueueSize()": FunctionFragment;
    "getProposedDiamondCutHash()": FunctionFragment;
    "getProposedDiamondCutTimestamp()": FunctionFragment;
    "getSecurityCouncilEmergencyApprovals()": FunctionFragment;
    "getSecurityCouncilMemberLastApprovedProposalId(address)": FunctionFragment;
    "getTotalBlocksCommitted()": FunctionFragment;
    "getTotalBlocksExecuted()": FunctionFragment;
    "getTotalBlocksVerified()": FunctionFragment;
    "getTotalPriorityTxs()": FunctionFragment;
    "getVerifier()": FunctionFragment;
    "isDiamondStorageFrozen()": FunctionFragment;
    "isFunctionFreezable(bytes4)": FunctionFragment;
    "isSecurityCouncilMember(address)": FunctionFragment;
    "isValidator(address)": FunctionFragment;
    "l2LogsRootHash(uint256)": FunctionFragment;
    "l2TransactionBaseCost(uint256,uint256,uint32)": FunctionFragment;
    "priorityQueueFrontOperation()": FunctionFragment;
    "proposeDiamondCut(tuple[],address)": FunctionFragment;
    "proveBlocks(tuple,tuple[],tuple)": FunctionFragment;
    "proveL2LogInclusion(uint256,uint256,tuple,bytes32[])": FunctionFragment;
    "proveL2MessageInclusion(uint256,uint256,tuple,bytes32[])": FunctionFragment;
    "requestL2Transaction(address,uint256,bytes,uint256,bytes[])": FunctionFragment;
    "revertBlocks(uint256)": FunctionFragment;
    "serializeL2Transaction(uint256,uint256,address,address,bytes,uint256,bytes[])": FunctionFragment;
    "setL2BootloaderBytecodeHash(bytes32)": FunctionFragment;
    "setL2DefaultAccountBytecodeHash(bytes32)": FunctionFragment;
    "setPendingGovernor(address)": FunctionFragment;
    "setPorterAvailability(bool)": FunctionFragment;
    "setValidator(address,bool)": FunctionFragment;
    "setVerifier(address)": FunctionFragment;
    "setVerifierParams(tuple)": FunctionFragment;
    "storedBlockHash(uint256)": FunctionFragment;
    "unfreezeDiamond()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approveEmergencyDiamondCutAsSecurityCouncilMember",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelDiamondCutProposal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "commitBlocks",
    values: [
      {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      {
        blockNumber: BigNumberish;
        timestamp: BigNumberish;
        indexRepeatedStorageChanges: BigNumberish;
        newStateRoot: BytesLike;
        numberOfLayer1Txs: BigNumberish;
        l2LogsTreeRoot: BytesLike;
        priorityOperationsHash: BytesLike;
        initialStorageChanges: BytesLike;
        repeatedStorageChanges: BytesLike;
        l2Logs: BytesLike;
        l2ArbitraryLengthMessages: BytesLike[];
        factoryDeps: BytesLike[];
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyFreezeDiamond",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeBlocks",
    values: [
      {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeDiamondCutProposal",
    values: [
      {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "facetFunctionSelectors",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "facets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCurrentProposalId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFirstUnprocessedPriorityTx",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastDiamondFreezeTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriorityQueueSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProposedDiamondCutHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProposedDiamondCutTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSecurityCouncilEmergencyApprovals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSecurityCouncilMemberLastApprovedProposalId",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBlocksCommitted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBlocksExecuted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBlocksVerified",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPriorityTxs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isDiamondStorageFrozen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isFunctionFreezable",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isSecurityCouncilMember",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isValidator", values: [string]): string;
  encodeFunctionData(
    functionFragment: "l2LogsRootHash",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "l2TransactionBaseCost",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "priorityQueueFrontOperation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposeDiamondCut",
    values: [
      {
        facet: string;
        action: BigNumberish;
        isFreezable: boolean;
        selectors: BytesLike[];
      }[],
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "proveBlocks",
    values: [
      {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      {
        recurisiveAggregationInput: BigNumberish[];
        serializedProof: BigNumberish[];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "proveL2LogInclusion",
    values: [
      BigNumberish,
      BigNumberish,
      {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBlock: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "proveL2MessageInclusion",
    values: [
      BigNumberish,
      BigNumberish,
      { txNumberInBlock: BigNumberish; sender: string; data: BytesLike },
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "requestL2Transaction",
    values: [string, BigNumberish, BytesLike, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "revertBlocks",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "serializeL2Transaction",
    values: [
      BigNumberish,
      BigNumberish,
      string,
      string,
      BytesLike,
      BigNumberish,
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setL2BootloaderBytecodeHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setL2DefaultAccountBytecodeHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingGovernor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPorterAvailability",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setValidator",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setVerifier", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setVerifierParams",
    values: [
      {
        recursionNodeLevelVkHash: BytesLike;
        recursionLeafLevelVkHash: BytesLike;
        recursionCircuitsSetVksHash: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "storedBlockHash",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unfreezeDiamond",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveEmergencyDiamondCutAsSecurityCouncilMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelDiamondCutProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyFreezeDiamond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeDiamondCutProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetFunctionSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "facets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentProposalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFirstUnprocessedPriorityTx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastDiamondFreezeTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriorityQueueSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposedDiamondCutHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposedDiamondCutTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSecurityCouncilEmergencyApprovals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSecurityCouncilMemberLastApprovedProposalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBlocksCommitted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBlocksExecuted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBlocksVerified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPriorityTxs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDiamondStorageFrozen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFunctionFreezable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSecurityCouncilMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l2LogsRootHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l2TransactionBaseCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priorityQueueFrontOperation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeDiamondCut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proveBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proveL2LogInclusion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proveL2MessageInclusion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestL2Transaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revertBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "serializeL2Transaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setL2BootloaderBytecodeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setL2DefaultAccountBytecodeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPendingGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPorterAvailability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVerifierParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storedBlockHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unfreezeDiamond",
    data: BytesLike
  ): Result;

  events: {
    "BlockCommit(uint256,bytes32,bytes32)": EventFragment;
    "BlockExecution(uint256,bytes32,bytes32)": EventFragment;
    "BlocksRevert(uint256,uint256,uint256)": EventFragment;
    "BlocksVerification(uint256,uint256)": EventFragment;
    "DiamondCutProposal(tuple[],address)": EventFragment;
    "DiamondCutProposalCancelation(uint256,bytes32)": EventFragment;
    "DiamondCutProposalExecution(tuple)": EventFragment;
    "EmergencyDiamondCutApproved(address,uint256,uint256,bytes32)": EventFragment;
    "EmergencyFreeze()": EventFragment;
    "IsPorterAvailableStatusUpdate(bool)": EventFragment;
    "NewGovernor(address,address)": EventFragment;
    "NewL2BootloaderBytecodeHash(bytes32,bytes32)": EventFragment;
    "NewL2DefaultAccountBytecodeHash(bytes32,bytes32)": EventFragment;
    "NewPendingGovernor(address,address)": EventFragment;
    "NewPriorityRequest(uint256,bytes32,uint64,tuple,bytes[])": EventFragment;
    "NewVerifier(address,address)": EventFragment;
    "NewVerifierParams(tuple,tuple)": EventFragment;
    "Unfreeze(uint256)": EventFragment;
    "ValidatorStatusUpdate(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BlockCommit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BlockExecution"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BlocksRevert"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BlocksVerification"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DiamondCutProposal"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DiamondCutProposalCancelation"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DiamondCutProposalExecution"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "EmergencyDiamondCutApproved"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyFreeze"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "IsPorterAvailableStatusUpdate"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewGovernor"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "NewL2BootloaderBytecodeHash"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "NewL2DefaultAccountBytecodeHash"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPendingGovernor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPriorityRequest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewVerifier"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewVerifierParams"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unfreeze"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorStatusUpdate"): EventFragment;
}

export class IZkSync extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IZkSyncInterface;

  functions: {
    acceptGovernor(overrides?: Overrides): Promise<ContractTransaction>;

    "acceptGovernor()"(overrides?: Overrides): Promise<ContractTransaction>;

    approveEmergencyDiamondCutAsSecurityCouncilMember(
      _diamondCutHash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approveEmergencyDiamondCutAsSecurityCouncilMember(bytes32)"(
      _diamondCutHash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    cancelDiamondCutProposal(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancelDiamondCutProposal()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    commitBlocks(
      _lastCommittedBlockData: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      _newBlocksData: {
        blockNumber: BigNumberish;
        timestamp: BigNumberish;
        indexRepeatedStorageChanges: BigNumberish;
        newStateRoot: BytesLike;
        numberOfLayer1Txs: BigNumberish;
        l2LogsTreeRoot: BytesLike;
        priorityOperationsHash: BytesLike;
        initialStorageChanges: BytesLike;
        repeatedStorageChanges: BytesLike;
        l2Logs: BytesLike;
        l2ArbitraryLengthMessages: BytesLike[];
        factoryDeps: BytesLike[];
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "commitBlocks((uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32),tuple[])"(
      _lastCommittedBlockData: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      _newBlocksData: {
        blockNumber: BigNumberish;
        timestamp: BigNumberish;
        indexRepeatedStorageChanges: BigNumberish;
        newStateRoot: BytesLike;
        numberOfLayer1Txs: BigNumberish;
        l2LogsTreeRoot: BytesLike;
        priorityOperationsHash: BytesLike;
        initialStorageChanges: BytesLike;
        repeatedStorageChanges: BytesLike;
        l2Logs: BytesLike;
        l2ArbitraryLengthMessages: BytesLike[];
        factoryDeps: BytesLike[];
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    emergencyFreezeDiamond(overrides?: Overrides): Promise<ContractTransaction>;

    "emergencyFreezeDiamond()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    executeBlocks(
      _blocksData: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "executeBlocks(tuple[])"(
      _blocksData: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    executeDiamondCutProposal(
      _diamondCut: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "executeDiamondCutProposal((tuple[],address,bytes))"(
      _diamondCut: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    facetAddress(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      facet: string;
      0: string;
    }>;

    "facetAddress(bytes4)"(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      facet: string;
      0: string;
    }>;

    facetAddresses(overrides?: CallOverrides): Promise<{
      facets: string[];
      0: string[];
    }>;

    "facetAddresses()"(overrides?: CallOverrides): Promise<{
      facets: string[];
      0: string[];
    }>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    "facetFunctionSelectors(address)"(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    facets(overrides?: CallOverrides): Promise<{
      0: { addr: string; selectors: string[]; 0: string; 1: string[] }[];
    }>;

    "facets()"(overrides?: CallOverrides): Promise<{
      0: { addr: string; selectors: string[]; 0: string; 1: string[] }[];
    }>;

    getCurrentProposalId(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getCurrentProposalId()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getFirstUnprocessedPriorityTx(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getFirstUnprocessedPriorityTx()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getGovernor(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getGovernor()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getLastDiamondFreezeTimestamp(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getLastDiamondFreezeTimestamp()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getPendingGovernor(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getPendingGovernor()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getPriorityQueueSize(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getPriorityQueueSize()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getProposedDiamondCutHash(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getProposedDiamondCutHash()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getProposedDiamondCutTimestamp(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getProposedDiamondCutTimestamp()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getSecurityCouncilEmergencyApprovals(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getSecurityCouncilEmergencyApprovals()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getSecurityCouncilMemberLastApprovedProposalId(
      _address: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getSecurityCouncilMemberLastApprovedProposalId(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getTotalBlocksCommitted(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getTotalBlocksCommitted()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getTotalBlocksExecuted(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getTotalBlocksExecuted()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getTotalBlocksVerified(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getTotalBlocksVerified()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getTotalPriorityTxs(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getTotalPriorityTxs()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getVerifier(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getVerifier()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    isDiamondStorageFrozen(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "isDiamondStorageFrozen()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    isFunctionFreezable(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isFunctionFreezable(bytes4)"(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isSecurityCouncilMember(
      _address: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isSecurityCouncilMember(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isValidator(
      _address: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isValidator(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    l2LogsRootHash(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      hash: string;
      0: string;
    }>;

    "l2LogsRootHash(uint256)"(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      hash: string;
      0: string;
    }>;

    l2TransactionBaseCost(
      _gasPrice: BigNumberish,
      _ergsLimit: BigNumberish,
      _calldataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "l2TransactionBaseCost(uint256,uint256,uint32)"(
      _gasPrice: BigNumberish,
      _ergsLimit: BigNumberish,
      _calldataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    priorityQueueFrontOperation(overrides?: CallOverrides): Promise<{
      0: {
        canonicalTxHash: string;
        expirationBlock: BigNumber;
        layer2Tip: BigNumber;
        0: string;
        1: BigNumber;
        2: BigNumber;
      };
    }>;

    "priorityQueueFrontOperation()"(overrides?: CallOverrides): Promise<{
      0: {
        canonicalTxHash: string;
        expirationBlock: BigNumber;
        layer2Tip: BigNumber;
        0: string;
        1: BigNumber;
        2: BigNumber;
      };
    }>;

    proposeDiamondCut(
      _facetCuts: {
        facet: string;
        action: BigNumberish;
        isFreezable: boolean;
        selectors: BytesLike[];
      }[],
      _initAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "proposeDiamondCut(tuple[],address)"(
      _facetCuts: {
        facet: string;
        action: BigNumberish;
        isFreezable: boolean;
        selectors: BytesLike[];
      }[],
      _initAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    proveBlocks(
      _prevBlock: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      _committedBlocks: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      _proof: {
        recurisiveAggregationInput: BigNumberish[];
        serializedProof: BigNumberish[];
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "proveBlocks((uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32),tuple[],(uint256[],uint256[]))"(
      _prevBlock: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      _committedBlocks: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      _proof: {
        recurisiveAggregationInput: BigNumberish[];
        serializedProof: BigNumberish[];
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    proveL2LogInclusion(
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _log: {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBlock: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "proveL2LogInclusion(uint256,uint256,(uint8,bool,uint16,address,bytes32,bytes32),bytes32[])"(
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _log: {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBlock: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    proveL2MessageInclusion(
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _message: {
        txNumberInBlock: BigNumberish;
        sender: string;
        data: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "proveL2MessageInclusion(uint256,uint256,(uint16,address,bytes),bytes32[])"(
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _message: {
        txNumberInBlock: BigNumberish;
        sender: string;
        data: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    requestL2Transaction(
      _contractL2: string,
      _l2Value: BigNumberish,
      _calldata: BytesLike,
      _ergsLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "requestL2Transaction(address,uint256,bytes,uint256,bytes[])"(
      _contractL2: string,
      _l2Value: BigNumberish,
      _calldata: BytesLike,
      _ergsLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    revertBlocks(
      _newLastBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revertBlocks(uint256)"(
      _newLastBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    serializeL2Transaction(
      _txId: BigNumberish,
      _l2Value: BigNumberish,
      _sender: string,
      _contractAddressL2: string,
      _calldata: BytesLike,
      _ergsLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: {
        txType: BigNumber;
        from: BigNumber;
        to: BigNumber;
        ergsLimit: BigNumber;
        ergsPerPubdataByteLimit: BigNumber;
        maxFeePerErg: BigNumber;
        maxPriorityFeePerErg: BigNumber;
        paymaster: BigNumber;
        reserved: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ];
        data: string;
        signature: string;
        factoryDeps: BigNumber[];
        paymasterInput: string;
        reservedDynamic: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: BigNumber;
        6: BigNumber;
        7: BigNumber;
        8: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
        9: string;
        10: string;
        11: BigNumber[];
        12: string;
        13: string;
      };
    }>;

    "serializeL2Transaction(uint256,uint256,address,address,bytes,uint256,bytes[])"(
      _txId: BigNumberish,
      _l2Value: BigNumberish,
      _sender: string,
      _contractAddressL2: string,
      _calldata: BytesLike,
      _ergsLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: {
        txType: BigNumber;
        from: BigNumber;
        to: BigNumber;
        ergsLimit: BigNumber;
        ergsPerPubdataByteLimit: BigNumber;
        maxFeePerErg: BigNumber;
        maxPriorityFeePerErg: BigNumber;
        paymaster: BigNumber;
        reserved: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ];
        data: string;
        signature: string;
        factoryDeps: BigNumber[];
        paymasterInput: string;
        reservedDynamic: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: BigNumber;
        6: BigNumber;
        7: BigNumber;
        8: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
        9: string;
        10: string;
        11: BigNumber[];
        12: string;
        13: string;
      };
    }>;

    setL2BootloaderBytecodeHash(
      _l2BootloaderBytecodeHash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setL2BootloaderBytecodeHash(bytes32)"(
      _l2BootloaderBytecodeHash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setL2DefaultAccountBytecodeHash(
      _l2DefaultAccountBytecodeHash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setL2DefaultAccountBytecodeHash(bytes32)"(
      _l2DefaultAccountBytecodeHash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPendingGovernor(
      _newPendingGovernor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPendingGovernor(address)"(
      _newPendingGovernor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPorterAvailability(
      _isPorterAvailable: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPorterAvailability(bool)"(
      _isPorterAvailable: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setValidator(
      _validator: string,
      _active: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setValidator(address,bool)"(
      _validator: string,
      _active: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setVerifier(
      _newVerifier: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setVerifier(address)"(
      _newVerifier: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setVerifierParams(
      _newVerifierParams: {
        recursionNodeLevelVkHash: BytesLike;
        recursionLeafLevelVkHash: BytesLike;
        recursionCircuitsSetVksHash: BytesLike;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setVerifierParams((bytes32,bytes32,bytes32))"(
      _newVerifierParams: {
        recursionNodeLevelVkHash: BytesLike;
        recursionLeafLevelVkHash: BytesLike;
        recursionCircuitsSetVksHash: BytesLike;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    storedBlockHash(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "storedBlockHash(uint256)"(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    unfreezeDiamond(overrides?: Overrides): Promise<ContractTransaction>;

    "unfreezeDiamond()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  acceptGovernor(overrides?: Overrides): Promise<ContractTransaction>;

  "acceptGovernor()"(overrides?: Overrides): Promise<ContractTransaction>;

  approveEmergencyDiamondCutAsSecurityCouncilMember(
    _diamondCutHash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approveEmergencyDiamondCutAsSecurityCouncilMember(bytes32)"(
    _diamondCutHash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  cancelDiamondCutProposal(overrides?: Overrides): Promise<ContractTransaction>;

  "cancelDiamondCutProposal()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  commitBlocks(
    _lastCommittedBlockData: {
      blockNumber: BigNumberish;
      blockHash: BytesLike;
      indexRepeatedStorageChanges: BigNumberish;
      numberOfLayer1Txs: BigNumberish;
      priorityOperationsHash: BytesLike;
      l2LogsTreeRoot: BytesLike;
      timestamp: BigNumberish;
      commitment: BytesLike;
    },
    _newBlocksData: {
      blockNumber: BigNumberish;
      timestamp: BigNumberish;
      indexRepeatedStorageChanges: BigNumberish;
      newStateRoot: BytesLike;
      numberOfLayer1Txs: BigNumberish;
      l2LogsTreeRoot: BytesLike;
      priorityOperationsHash: BytesLike;
      initialStorageChanges: BytesLike;
      repeatedStorageChanges: BytesLike;
      l2Logs: BytesLike;
      l2ArbitraryLengthMessages: BytesLike[];
      factoryDeps: BytesLike[];
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "commitBlocks((uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32),tuple[])"(
    _lastCommittedBlockData: {
      blockNumber: BigNumberish;
      blockHash: BytesLike;
      indexRepeatedStorageChanges: BigNumberish;
      numberOfLayer1Txs: BigNumberish;
      priorityOperationsHash: BytesLike;
      l2LogsTreeRoot: BytesLike;
      timestamp: BigNumberish;
      commitment: BytesLike;
    },
    _newBlocksData: {
      blockNumber: BigNumberish;
      timestamp: BigNumberish;
      indexRepeatedStorageChanges: BigNumberish;
      newStateRoot: BytesLike;
      numberOfLayer1Txs: BigNumberish;
      l2LogsTreeRoot: BytesLike;
      priorityOperationsHash: BytesLike;
      initialStorageChanges: BytesLike;
      repeatedStorageChanges: BytesLike;
      l2Logs: BytesLike;
      l2ArbitraryLengthMessages: BytesLike[];
      factoryDeps: BytesLike[];
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  emergencyFreezeDiamond(overrides?: Overrides): Promise<ContractTransaction>;

  "emergencyFreezeDiamond()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  executeBlocks(
    _blocksData: {
      blockNumber: BigNumberish;
      blockHash: BytesLike;
      indexRepeatedStorageChanges: BigNumberish;
      numberOfLayer1Txs: BigNumberish;
      priorityOperationsHash: BytesLike;
      l2LogsTreeRoot: BytesLike;
      timestamp: BigNumberish;
      commitment: BytesLike;
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "executeBlocks(tuple[])"(
    _blocksData: {
      blockNumber: BigNumberish;
      blockHash: BytesLike;
      indexRepeatedStorageChanges: BigNumberish;
      numberOfLayer1Txs: BigNumberish;
      priorityOperationsHash: BytesLike;
      l2LogsTreeRoot: BytesLike;
      timestamp: BigNumberish;
      commitment: BytesLike;
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  executeDiamondCutProposal(
    _diamondCut: {
      facetCuts: {
        facet: string;
        action: BigNumberish;
        isFreezable: boolean;
        selectors: BytesLike[];
      }[];
      initAddress: string;
      initCalldata: BytesLike;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "executeDiamondCutProposal((tuple[],address,bytes))"(
    _diamondCut: {
      facetCuts: {
        facet: string;
        action: BigNumberish;
        isFreezable: boolean;
        selectors: BytesLike[];
      }[];
      initAddress: string;
      initCalldata: BytesLike;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  facetAddress(
    _selector: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "facetAddress(bytes4)"(
    _selector: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  facetAddresses(overrides?: CallOverrides): Promise<string[]>;

  "facetAddresses()"(overrides?: CallOverrides): Promise<string[]>;

  facetFunctionSelectors(
    _facet: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "facetFunctionSelectors(address)"(
    _facet: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  facets(
    overrides?: CallOverrides
  ): Promise<{ addr: string; selectors: string[]; 0: string; 1: string[] }[]>;

  "facets()"(
    overrides?: CallOverrides
  ): Promise<{ addr: string; selectors: string[]; 0: string; 1: string[] }[]>;

  getCurrentProposalId(overrides?: CallOverrides): Promise<BigNumber>;

  "getCurrentProposalId()"(overrides?: CallOverrides): Promise<BigNumber>;

  getFirstUnprocessedPriorityTx(overrides?: CallOverrides): Promise<BigNumber>;

  "getFirstUnprocessedPriorityTx()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getGovernor(overrides?: CallOverrides): Promise<string>;

  "getGovernor()"(overrides?: CallOverrides): Promise<string>;

  getLastDiamondFreezeTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  "getLastDiamondFreezeTimestamp()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPendingGovernor(overrides?: CallOverrides): Promise<string>;

  "getPendingGovernor()"(overrides?: CallOverrides): Promise<string>;

  getPriorityQueueSize(overrides?: CallOverrides): Promise<BigNumber>;

  "getPriorityQueueSize()"(overrides?: CallOverrides): Promise<BigNumber>;

  getProposedDiamondCutHash(overrides?: CallOverrides): Promise<string>;

  "getProposedDiamondCutHash()"(overrides?: CallOverrides): Promise<string>;

  getProposedDiamondCutTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  "getProposedDiamondCutTimestamp()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSecurityCouncilEmergencyApprovals(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getSecurityCouncilEmergencyApprovals()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSecurityCouncilMemberLastApprovedProposalId(
    _address: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getSecurityCouncilMemberLastApprovedProposalId(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalBlocksCommitted(overrides?: CallOverrides): Promise<BigNumber>;

  "getTotalBlocksCommitted()"(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalBlocksExecuted(overrides?: CallOverrides): Promise<BigNumber>;

  "getTotalBlocksExecuted()"(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalBlocksVerified(overrides?: CallOverrides): Promise<BigNumber>;

  "getTotalBlocksVerified()"(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalPriorityTxs(overrides?: CallOverrides): Promise<BigNumber>;

  "getTotalPriorityTxs()"(overrides?: CallOverrides): Promise<BigNumber>;

  getVerifier(overrides?: CallOverrides): Promise<string>;

  "getVerifier()"(overrides?: CallOverrides): Promise<string>;

  isDiamondStorageFrozen(overrides?: CallOverrides): Promise<boolean>;

  "isDiamondStorageFrozen()"(overrides?: CallOverrides): Promise<boolean>;

  isFunctionFreezable(
    _selector: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isFunctionFreezable(bytes4)"(
    _selector: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isSecurityCouncilMember(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isSecurityCouncilMember(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidator(_address: string, overrides?: CallOverrides): Promise<boolean>;

  "isValidator(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  l2LogsRootHash(
    _blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "l2LogsRootHash(uint256)"(
    _blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  l2TransactionBaseCost(
    _gasPrice: BigNumberish,
    _ergsLimit: BigNumberish,
    _calldataLength: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "l2TransactionBaseCost(uint256,uint256,uint32)"(
    _gasPrice: BigNumberish,
    _ergsLimit: BigNumberish,
    _calldataLength: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  priorityQueueFrontOperation(
    overrides?: CallOverrides
  ): Promise<{
    canonicalTxHash: string;
    expirationBlock: BigNumber;
    layer2Tip: BigNumber;
    0: string;
    1: BigNumber;
    2: BigNumber;
  }>;

  "priorityQueueFrontOperation()"(
    overrides?: CallOverrides
  ): Promise<{
    canonicalTxHash: string;
    expirationBlock: BigNumber;
    layer2Tip: BigNumber;
    0: string;
    1: BigNumber;
    2: BigNumber;
  }>;

  proposeDiamondCut(
    _facetCuts: {
      facet: string;
      action: BigNumberish;
      isFreezable: boolean;
      selectors: BytesLike[];
    }[],
    _initAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "proposeDiamondCut(tuple[],address)"(
    _facetCuts: {
      facet: string;
      action: BigNumberish;
      isFreezable: boolean;
      selectors: BytesLike[];
    }[],
    _initAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  proveBlocks(
    _prevBlock: {
      blockNumber: BigNumberish;
      blockHash: BytesLike;
      indexRepeatedStorageChanges: BigNumberish;
      numberOfLayer1Txs: BigNumberish;
      priorityOperationsHash: BytesLike;
      l2LogsTreeRoot: BytesLike;
      timestamp: BigNumberish;
      commitment: BytesLike;
    },
    _committedBlocks: {
      blockNumber: BigNumberish;
      blockHash: BytesLike;
      indexRepeatedStorageChanges: BigNumberish;
      numberOfLayer1Txs: BigNumberish;
      priorityOperationsHash: BytesLike;
      l2LogsTreeRoot: BytesLike;
      timestamp: BigNumberish;
      commitment: BytesLike;
    }[],
    _proof: {
      recurisiveAggregationInput: BigNumberish[];
      serializedProof: BigNumberish[];
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "proveBlocks((uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32),tuple[],(uint256[],uint256[]))"(
    _prevBlock: {
      blockNumber: BigNumberish;
      blockHash: BytesLike;
      indexRepeatedStorageChanges: BigNumberish;
      numberOfLayer1Txs: BigNumberish;
      priorityOperationsHash: BytesLike;
      l2LogsTreeRoot: BytesLike;
      timestamp: BigNumberish;
      commitment: BytesLike;
    },
    _committedBlocks: {
      blockNumber: BigNumberish;
      blockHash: BytesLike;
      indexRepeatedStorageChanges: BigNumberish;
      numberOfLayer1Txs: BigNumberish;
      priorityOperationsHash: BytesLike;
      l2LogsTreeRoot: BytesLike;
      timestamp: BigNumberish;
      commitment: BytesLike;
    }[],
    _proof: {
      recurisiveAggregationInput: BigNumberish[];
      serializedProof: BigNumberish[];
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  proveL2LogInclusion(
    _blockNumber: BigNumberish,
    _index: BigNumberish,
    _log: {
      l2ShardId: BigNumberish;
      isService: boolean;
      txNumberInBlock: BigNumberish;
      sender: string;
      key: BytesLike;
      value: BytesLike;
    },
    _proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  "proveL2LogInclusion(uint256,uint256,(uint8,bool,uint16,address,bytes32,bytes32),bytes32[])"(
    _blockNumber: BigNumberish,
    _index: BigNumberish,
    _log: {
      l2ShardId: BigNumberish;
      isService: boolean;
      txNumberInBlock: BigNumberish;
      sender: string;
      key: BytesLike;
      value: BytesLike;
    },
    _proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  proveL2MessageInclusion(
    _blockNumber: BigNumberish,
    _index: BigNumberish,
    _message: {
      txNumberInBlock: BigNumberish;
      sender: string;
      data: BytesLike;
    },
    _proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  "proveL2MessageInclusion(uint256,uint256,(uint16,address,bytes),bytes32[])"(
    _blockNumber: BigNumberish,
    _index: BigNumberish,
    _message: {
      txNumberInBlock: BigNumberish;
      sender: string;
      data: BytesLike;
    },
    _proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  requestL2Transaction(
    _contractL2: string,
    _l2Value: BigNumberish,
    _calldata: BytesLike,
    _ergsLimit: BigNumberish,
    _factoryDeps: BytesLike[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "requestL2Transaction(address,uint256,bytes,uint256,bytes[])"(
    _contractL2: string,
    _l2Value: BigNumberish,
    _calldata: BytesLike,
    _ergsLimit: BigNumberish,
    _factoryDeps: BytesLike[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  revertBlocks(
    _newLastBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revertBlocks(uint256)"(
    _newLastBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  serializeL2Transaction(
    _txId: BigNumberish,
    _l2Value: BigNumberish,
    _sender: string,
    _contractAddressL2: string,
    _calldata: BytesLike,
    _ergsLimit: BigNumberish,
    _factoryDeps: BytesLike[],
    overrides?: CallOverrides
  ): Promise<{
    txType: BigNumber;
    from: BigNumber;
    to: BigNumber;
    ergsLimit: BigNumber;
    ergsPerPubdataByteLimit: BigNumber;
    maxFeePerErg: BigNumber;
    maxPriorityFeePerErg: BigNumber;
    paymaster: BigNumber;
    reserved: [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ];
    data: string;
    signature: string;
    factoryDeps: BigNumber[];
    paymasterInput: string;
    reservedDynamic: string;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: BigNumber;
    8: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
    9: string;
    10: string;
    11: BigNumber[];
    12: string;
    13: string;
  }>;

  "serializeL2Transaction(uint256,uint256,address,address,bytes,uint256,bytes[])"(
    _txId: BigNumberish,
    _l2Value: BigNumberish,
    _sender: string,
    _contractAddressL2: string,
    _calldata: BytesLike,
    _ergsLimit: BigNumberish,
    _factoryDeps: BytesLike[],
    overrides?: CallOverrides
  ): Promise<{
    txType: BigNumber;
    from: BigNumber;
    to: BigNumber;
    ergsLimit: BigNumber;
    ergsPerPubdataByteLimit: BigNumber;
    maxFeePerErg: BigNumber;
    maxPriorityFeePerErg: BigNumber;
    paymaster: BigNumber;
    reserved: [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ];
    data: string;
    signature: string;
    factoryDeps: BigNumber[];
    paymasterInput: string;
    reservedDynamic: string;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: BigNumber;
    8: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
    9: string;
    10: string;
    11: BigNumber[];
    12: string;
    13: string;
  }>;

  setL2BootloaderBytecodeHash(
    _l2BootloaderBytecodeHash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setL2BootloaderBytecodeHash(bytes32)"(
    _l2BootloaderBytecodeHash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setL2DefaultAccountBytecodeHash(
    _l2DefaultAccountBytecodeHash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setL2DefaultAccountBytecodeHash(bytes32)"(
    _l2DefaultAccountBytecodeHash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPendingGovernor(
    _newPendingGovernor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPendingGovernor(address)"(
    _newPendingGovernor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPorterAvailability(
    _isPorterAvailable: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPorterAvailability(bool)"(
    _isPorterAvailable: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setValidator(
    _validator: string,
    _active: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setValidator(address,bool)"(
    _validator: string,
    _active: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setVerifier(
    _newVerifier: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setVerifier(address)"(
    _newVerifier: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setVerifierParams(
    _newVerifierParams: {
      recursionNodeLevelVkHash: BytesLike;
      recursionLeafLevelVkHash: BytesLike;
      recursionCircuitsSetVksHash: BytesLike;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setVerifierParams((bytes32,bytes32,bytes32))"(
    _newVerifierParams: {
      recursionNodeLevelVkHash: BytesLike;
      recursionLeafLevelVkHash: BytesLike;
      recursionCircuitsSetVksHash: BytesLike;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  storedBlockHash(
    _blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "storedBlockHash(uint256)"(
    _blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  unfreezeDiamond(overrides?: Overrides): Promise<ContractTransaction>;

  "unfreezeDiamond()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    acceptGovernor(overrides?: CallOverrides): Promise<void>;

    "acceptGovernor()"(overrides?: CallOverrides): Promise<void>;

    approveEmergencyDiamondCutAsSecurityCouncilMember(
      _diamondCutHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "approveEmergencyDiamondCutAsSecurityCouncilMember(bytes32)"(
      _diamondCutHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelDiamondCutProposal(overrides?: CallOverrides): Promise<void>;

    "cancelDiamondCutProposal()"(overrides?: CallOverrides): Promise<void>;

    commitBlocks(
      _lastCommittedBlockData: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      _newBlocksData: {
        blockNumber: BigNumberish;
        timestamp: BigNumberish;
        indexRepeatedStorageChanges: BigNumberish;
        newStateRoot: BytesLike;
        numberOfLayer1Txs: BigNumberish;
        l2LogsTreeRoot: BytesLike;
        priorityOperationsHash: BytesLike;
        initialStorageChanges: BytesLike;
        repeatedStorageChanges: BytesLike;
        l2Logs: BytesLike;
        l2ArbitraryLengthMessages: BytesLike[];
        factoryDeps: BytesLike[];
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    "commitBlocks((uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32),tuple[])"(
      _lastCommittedBlockData: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      _newBlocksData: {
        blockNumber: BigNumberish;
        timestamp: BigNumberish;
        indexRepeatedStorageChanges: BigNumberish;
        newStateRoot: BytesLike;
        numberOfLayer1Txs: BigNumberish;
        l2LogsTreeRoot: BytesLike;
        priorityOperationsHash: BytesLike;
        initialStorageChanges: BytesLike;
        repeatedStorageChanges: BytesLike;
        l2Logs: BytesLike;
        l2ArbitraryLengthMessages: BytesLike[];
        factoryDeps: BytesLike[];
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyFreezeDiamond(overrides?: CallOverrides): Promise<void>;

    "emergencyFreezeDiamond()"(overrides?: CallOverrides): Promise<void>;

    executeBlocks(
      _blocksData: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    "executeBlocks(tuple[])"(
      _blocksData: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    executeDiamondCutProposal(
      _diamondCut: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "executeDiamondCutProposal((tuple[],address,bytes))"(
      _diamondCut: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    facetAddress(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "facetAddress(bytes4)"(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    facetAddresses(overrides?: CallOverrides): Promise<string[]>;

    "facetAddresses()"(overrides?: CallOverrides): Promise<string[]>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "facetFunctionSelectors(address)"(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    facets(
      overrides?: CallOverrides
    ): Promise<{ addr: string; selectors: string[]; 0: string; 1: string[] }[]>;

    "facets()"(
      overrides?: CallOverrides
    ): Promise<{ addr: string; selectors: string[]; 0: string; 1: string[] }[]>;

    getCurrentProposalId(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentProposalId()"(overrides?: CallOverrides): Promise<BigNumber>;

    getFirstUnprocessedPriorityTx(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getFirstUnprocessedPriorityTx()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGovernor(overrides?: CallOverrides): Promise<string>;

    "getGovernor()"(overrides?: CallOverrides): Promise<string>;

    getLastDiamondFreezeTimestamp(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLastDiamondFreezeTimestamp()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingGovernor(overrides?: CallOverrides): Promise<string>;

    "getPendingGovernor()"(overrides?: CallOverrides): Promise<string>;

    getPriorityQueueSize(overrides?: CallOverrides): Promise<BigNumber>;

    "getPriorityQueueSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    getProposedDiamondCutHash(overrides?: CallOverrides): Promise<string>;

    "getProposedDiamondCutHash()"(overrides?: CallOverrides): Promise<string>;

    getProposedDiamondCutTimestamp(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getProposedDiamondCutTimestamp()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSecurityCouncilEmergencyApprovals(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSecurityCouncilEmergencyApprovals()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSecurityCouncilMemberLastApprovedProposalId(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSecurityCouncilMemberLastApprovedProposalId(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalBlocksCommitted(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalBlocksCommitted()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalBlocksExecuted(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalBlocksExecuted()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalBlocksVerified(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalBlocksVerified()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalPriorityTxs(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalPriorityTxs()"(overrides?: CallOverrides): Promise<BigNumber>;

    getVerifier(overrides?: CallOverrides): Promise<string>;

    "getVerifier()"(overrides?: CallOverrides): Promise<string>;

    isDiamondStorageFrozen(overrides?: CallOverrides): Promise<boolean>;

    "isDiamondStorageFrozen()"(overrides?: CallOverrides): Promise<boolean>;

    isFunctionFreezable(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isFunctionFreezable(bytes4)"(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isSecurityCouncilMember(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isSecurityCouncilMember(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidator(_address: string, overrides?: CallOverrides): Promise<boolean>;

    "isValidator(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    l2LogsRootHash(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "l2LogsRootHash(uint256)"(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    l2TransactionBaseCost(
      _gasPrice: BigNumberish,
      _ergsLimit: BigNumberish,
      _calldataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "l2TransactionBaseCost(uint256,uint256,uint32)"(
      _gasPrice: BigNumberish,
      _ergsLimit: BigNumberish,
      _calldataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priorityQueueFrontOperation(
      overrides?: CallOverrides
    ): Promise<{
      canonicalTxHash: string;
      expirationBlock: BigNumber;
      layer2Tip: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
    }>;

    "priorityQueueFrontOperation()"(
      overrides?: CallOverrides
    ): Promise<{
      canonicalTxHash: string;
      expirationBlock: BigNumber;
      layer2Tip: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
    }>;

    proposeDiamondCut(
      _facetCuts: {
        facet: string;
        action: BigNumberish;
        isFreezable: boolean;
        selectors: BytesLike[];
      }[],
      _initAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "proposeDiamondCut(tuple[],address)"(
      _facetCuts: {
        facet: string;
        action: BigNumberish;
        isFreezable: boolean;
        selectors: BytesLike[];
      }[],
      _initAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    proveBlocks(
      _prevBlock: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      _committedBlocks: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      _proof: {
        recurisiveAggregationInput: BigNumberish[];
        serializedProof: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "proveBlocks((uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32),tuple[],(uint256[],uint256[]))"(
      _prevBlock: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      _committedBlocks: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      _proof: {
        recurisiveAggregationInput: BigNumberish[];
        serializedProof: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<void>;

    proveL2LogInclusion(
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _log: {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBlock: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "proveL2LogInclusion(uint256,uint256,(uint8,bool,uint16,address,bytes32,bytes32),bytes32[])"(
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _log: {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBlock: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    proveL2MessageInclusion(
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _message: {
        txNumberInBlock: BigNumberish;
        sender: string;
        data: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "proveL2MessageInclusion(uint256,uint256,(uint16,address,bytes),bytes32[])"(
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _message: {
        txNumberInBlock: BigNumberish;
        sender: string;
        data: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    requestL2Transaction(
      _contractL2: string,
      _l2Value: BigNumberish,
      _calldata: BytesLike,
      _ergsLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string>;

    "requestL2Transaction(address,uint256,bytes,uint256,bytes[])"(
      _contractL2: string,
      _l2Value: BigNumberish,
      _calldata: BytesLike,
      _ergsLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string>;

    revertBlocks(
      _newLastBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "revertBlocks(uint256)"(
      _newLastBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    serializeL2Transaction(
      _txId: BigNumberish,
      _l2Value: BigNumberish,
      _sender: string,
      _contractAddressL2: string,
      _calldata: BytesLike,
      _ergsLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      txType: BigNumber;
      from: BigNumber;
      to: BigNumber;
      ergsLimit: BigNumber;
      ergsPerPubdataByteLimit: BigNumber;
      maxFeePerErg: BigNumber;
      maxPriorityFeePerErg: BigNumber;
      paymaster: BigNumber;
      reserved: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      data: string;
      signature: string;
      factoryDeps: BigNumber[];
      paymasterInput: string;
      reservedDynamic: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
      9: string;
      10: string;
      11: BigNumber[];
      12: string;
      13: string;
    }>;

    "serializeL2Transaction(uint256,uint256,address,address,bytes,uint256,bytes[])"(
      _txId: BigNumberish,
      _l2Value: BigNumberish,
      _sender: string,
      _contractAddressL2: string,
      _calldata: BytesLike,
      _ergsLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      txType: BigNumber;
      from: BigNumber;
      to: BigNumber;
      ergsLimit: BigNumber;
      ergsPerPubdataByteLimit: BigNumber;
      maxFeePerErg: BigNumber;
      maxPriorityFeePerErg: BigNumber;
      paymaster: BigNumber;
      reserved: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      data: string;
      signature: string;
      factoryDeps: BigNumber[];
      paymasterInput: string;
      reservedDynamic: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
      9: string;
      10: string;
      11: BigNumber[];
      12: string;
      13: string;
    }>;

    setL2BootloaderBytecodeHash(
      _l2BootloaderBytecodeHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "setL2BootloaderBytecodeHash(bytes32)"(
      _l2BootloaderBytecodeHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setL2DefaultAccountBytecodeHash(
      _l2DefaultAccountBytecodeHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "setL2DefaultAccountBytecodeHash(bytes32)"(
      _l2DefaultAccountBytecodeHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setPendingGovernor(
      _newPendingGovernor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPendingGovernor(address)"(
      _newPendingGovernor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPorterAvailability(
      _isPorterAvailable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPorterAvailability(bool)"(
      _isPorterAvailable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setValidator(
      _validator: string,
      _active: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setValidator(address,bool)"(
      _validator: string,
      _active: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setVerifier(_newVerifier: string, overrides?: CallOverrides): Promise<void>;

    "setVerifier(address)"(
      _newVerifier: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setVerifierParams(
      _newVerifierParams: {
        recursionNodeLevelVkHash: BytesLike;
        recursionLeafLevelVkHash: BytesLike;
        recursionCircuitsSetVksHash: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "setVerifierParams((bytes32,bytes32,bytes32))"(
      _newVerifierParams: {
        recursionNodeLevelVkHash: BytesLike;
        recursionLeafLevelVkHash: BytesLike;
        recursionCircuitsSetVksHash: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    storedBlockHash(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "storedBlockHash(uint256)"(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    unfreezeDiamond(overrides?: CallOverrides): Promise<void>;

    "unfreezeDiamond()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    BlockCommit(
      blockNumber: BigNumberish | null,
      blockHash: BytesLike | null,
      commitment: BytesLike | null
    ): EventFilter;

    BlockExecution(
      blockNumber: BigNumberish | null,
      blockHash: BytesLike | null,
      commitment: BytesLike | null
    ): EventFilter;

    BlocksRevert(
      totalBlocksCommitted: null,
      totalBlocksVerified: null,
      totalBlocksExecuted: null
    ): EventFilter;

    BlocksVerification(
      previousLastVerifiedBlock: BigNumberish | null,
      currentLastVerifiedBlock: BigNumberish | null
    ): EventFilter;

    DiamondCutProposal(_facetCuts: null, _initAddress: null): EventFilter;

    DiamondCutProposalCancelation(
      currentProposalId: null,
      proposedDiamondCutHash: BytesLike | null
    ): EventFilter;

    DiamondCutProposalExecution(_diamondCut: null): EventFilter;

    EmergencyDiamondCutApproved(
      _address: string | null,
      currentProposalId: null,
      securityCouncilEmergencyApprovals: null,
      proposedDiamondCutHash: BytesLike | null
    ): EventFilter;

    EmergencyFreeze(): EventFilter;

    IsPorterAvailableStatusUpdate(isPorterAvailable: null): EventFilter;

    NewGovernor(
      oldGovernor: string | null,
      newGovernor: string | null
    ): EventFilter;

    NewL2BootloaderBytecodeHash(
      previousBytecodeHash: BytesLike | null,
      newBytecodeHash: BytesLike | null
    ): EventFilter;

    NewL2DefaultAccountBytecodeHash(
      previousBytecodeHash: BytesLike | null,
      newBytecodeHash: BytesLike | null
    ): EventFilter;

    NewPendingGovernor(
      oldPendingGovernor: string | null,
      newPendingGovernor: string | null
    ): EventFilter;

    NewPriorityRequest(
      txId: null,
      txHash: null,
      expirationBlock: null,
      transaction: null,
      factoryDeps: null
    ): EventFilter;

    NewVerifier(
      oldVerifier: string | null,
      newVerifier: string | null
    ): EventFilter;

    NewVerifierParams(
      oldVerifierParams: null,
      newVerifierParams: null
    ): EventFilter;

    Unfreeze(lastDiamondFreezeTimestamp: null): EventFilter;

    ValidatorStatusUpdate(
      validatorAddress: string | null,
      isActive: null
    ): EventFilter;
  };

  estimateGas: {
    acceptGovernor(overrides?: Overrides): Promise<BigNumber>;

    "acceptGovernor()"(overrides?: Overrides): Promise<BigNumber>;

    approveEmergencyDiamondCutAsSecurityCouncilMember(
      _diamondCutHash: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approveEmergencyDiamondCutAsSecurityCouncilMember(bytes32)"(
      _diamondCutHash: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    cancelDiamondCutProposal(overrides?: Overrides): Promise<BigNumber>;

    "cancelDiamondCutProposal()"(overrides?: Overrides): Promise<BigNumber>;

    commitBlocks(
      _lastCommittedBlockData: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      _newBlocksData: {
        blockNumber: BigNumberish;
        timestamp: BigNumberish;
        indexRepeatedStorageChanges: BigNumberish;
        newStateRoot: BytesLike;
        numberOfLayer1Txs: BigNumberish;
        l2LogsTreeRoot: BytesLike;
        priorityOperationsHash: BytesLike;
        initialStorageChanges: BytesLike;
        repeatedStorageChanges: BytesLike;
        l2Logs: BytesLike;
        l2ArbitraryLengthMessages: BytesLike[];
        factoryDeps: BytesLike[];
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "commitBlocks((uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32),tuple[])"(
      _lastCommittedBlockData: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      _newBlocksData: {
        blockNumber: BigNumberish;
        timestamp: BigNumberish;
        indexRepeatedStorageChanges: BigNumberish;
        newStateRoot: BytesLike;
        numberOfLayer1Txs: BigNumberish;
        l2LogsTreeRoot: BytesLike;
        priorityOperationsHash: BytesLike;
        initialStorageChanges: BytesLike;
        repeatedStorageChanges: BytesLike;
        l2Logs: BytesLike;
        l2ArbitraryLengthMessages: BytesLike[];
        factoryDeps: BytesLike[];
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    emergencyFreezeDiamond(overrides?: Overrides): Promise<BigNumber>;

    "emergencyFreezeDiamond()"(overrides?: Overrides): Promise<BigNumber>;

    executeBlocks(
      _blocksData: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "executeBlocks(tuple[])"(
      _blocksData: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    executeDiamondCutProposal(
      _diamondCut: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "executeDiamondCutProposal((tuple[],address,bytes))"(
      _diamondCut: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    facetAddress(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "facetAddress(bytes4)"(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facetAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    "facetAddresses()"(overrides?: CallOverrides): Promise<BigNumber>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "facetFunctionSelectors(address)"(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facets(overrides?: CallOverrides): Promise<BigNumber>;

    "facets()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentProposalId(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentProposalId()"(overrides?: CallOverrides): Promise<BigNumber>;

    getFirstUnprocessedPriorityTx(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getFirstUnprocessedPriorityTx()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGovernor(overrides?: CallOverrides): Promise<BigNumber>;

    "getGovernor()"(overrides?: CallOverrides): Promise<BigNumber>;

    getLastDiamondFreezeTimestamp(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLastDiamondFreezeTimestamp()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingGovernor(overrides?: CallOverrides): Promise<BigNumber>;

    "getPendingGovernor()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPriorityQueueSize(overrides?: CallOverrides): Promise<BigNumber>;

    "getPriorityQueueSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    getProposedDiamondCutHash(overrides?: CallOverrides): Promise<BigNumber>;

    "getProposedDiamondCutHash()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposedDiamondCutTimestamp(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getProposedDiamondCutTimestamp()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSecurityCouncilEmergencyApprovals(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSecurityCouncilEmergencyApprovals()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSecurityCouncilMemberLastApprovedProposalId(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSecurityCouncilMemberLastApprovedProposalId(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalBlocksCommitted(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalBlocksCommitted()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalBlocksExecuted(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalBlocksExecuted()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalBlocksVerified(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalBlocksVerified()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalPriorityTxs(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalPriorityTxs()"(overrides?: CallOverrides): Promise<BigNumber>;

    getVerifier(overrides?: CallOverrides): Promise<BigNumber>;

    "getVerifier()"(overrides?: CallOverrides): Promise<BigNumber>;

    isDiamondStorageFrozen(overrides?: CallOverrides): Promise<BigNumber>;

    "isDiamondStorageFrozen()"(overrides?: CallOverrides): Promise<BigNumber>;

    isFunctionFreezable(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isFunctionFreezable(bytes4)"(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSecurityCouncilMember(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isSecurityCouncilMember(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidator(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isValidator(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    l2LogsRootHash(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "l2LogsRootHash(uint256)"(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    l2TransactionBaseCost(
      _gasPrice: BigNumberish,
      _ergsLimit: BigNumberish,
      _calldataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "l2TransactionBaseCost(uint256,uint256,uint32)"(
      _gasPrice: BigNumberish,
      _ergsLimit: BigNumberish,
      _calldataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priorityQueueFrontOperation(overrides?: CallOverrides): Promise<BigNumber>;

    "priorityQueueFrontOperation()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposeDiamondCut(
      _facetCuts: {
        facet: string;
        action: BigNumberish;
        isFreezable: boolean;
        selectors: BytesLike[];
      }[],
      _initAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "proposeDiamondCut(tuple[],address)"(
      _facetCuts: {
        facet: string;
        action: BigNumberish;
        isFreezable: boolean;
        selectors: BytesLike[];
      }[],
      _initAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    proveBlocks(
      _prevBlock: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      _committedBlocks: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      _proof: {
        recurisiveAggregationInput: BigNumberish[];
        serializedProof: BigNumberish[];
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "proveBlocks((uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32),tuple[],(uint256[],uint256[]))"(
      _prevBlock: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      _committedBlocks: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      _proof: {
        recurisiveAggregationInput: BigNumberish[];
        serializedProof: BigNumberish[];
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    proveL2LogInclusion(
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _log: {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBlock: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "proveL2LogInclusion(uint256,uint256,(uint8,bool,uint16,address,bytes32,bytes32),bytes32[])"(
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _log: {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBlock: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proveL2MessageInclusion(
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _message: {
        txNumberInBlock: BigNumberish;
        sender: string;
        data: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "proveL2MessageInclusion(uint256,uint256,(uint16,address,bytes),bytes32[])"(
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _message: {
        txNumberInBlock: BigNumberish;
        sender: string;
        data: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestL2Transaction(
      _contractL2: string,
      _l2Value: BigNumberish,
      _calldata: BytesLike,
      _ergsLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "requestL2Transaction(address,uint256,bytes,uint256,bytes[])"(
      _contractL2: string,
      _l2Value: BigNumberish,
      _calldata: BytesLike,
      _ergsLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    revertBlocks(
      _newLastBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revertBlocks(uint256)"(
      _newLastBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    serializeL2Transaction(
      _txId: BigNumberish,
      _l2Value: BigNumberish,
      _sender: string,
      _contractAddressL2: string,
      _calldata: BytesLike,
      _ergsLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "serializeL2Transaction(uint256,uint256,address,address,bytes,uint256,bytes[])"(
      _txId: BigNumberish,
      _l2Value: BigNumberish,
      _sender: string,
      _contractAddressL2: string,
      _calldata: BytesLike,
      _ergsLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setL2BootloaderBytecodeHash(
      _l2BootloaderBytecodeHash: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setL2BootloaderBytecodeHash(bytes32)"(
      _l2BootloaderBytecodeHash: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setL2DefaultAccountBytecodeHash(
      _l2DefaultAccountBytecodeHash: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setL2DefaultAccountBytecodeHash(bytes32)"(
      _l2DefaultAccountBytecodeHash: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPendingGovernor(
      _newPendingGovernor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPendingGovernor(address)"(
      _newPendingGovernor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPorterAvailability(
      _isPorterAvailable: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPorterAvailability(bool)"(
      _isPorterAvailable: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setValidator(
      _validator: string,
      _active: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setValidator(address,bool)"(
      _validator: string,
      _active: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setVerifier(
      _newVerifier: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setVerifier(address)"(
      _newVerifier: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setVerifierParams(
      _newVerifierParams: {
        recursionNodeLevelVkHash: BytesLike;
        recursionLeafLevelVkHash: BytesLike;
        recursionCircuitsSetVksHash: BytesLike;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setVerifierParams((bytes32,bytes32,bytes32))"(
      _newVerifierParams: {
        recursionNodeLevelVkHash: BytesLike;
        recursionLeafLevelVkHash: BytesLike;
        recursionCircuitsSetVksHash: BytesLike;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    storedBlockHash(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "storedBlockHash(uint256)"(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unfreezeDiamond(overrides?: Overrides): Promise<BigNumber>;

    "unfreezeDiamond()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptGovernor(overrides?: Overrides): Promise<PopulatedTransaction>;

    "acceptGovernor()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    approveEmergencyDiamondCutAsSecurityCouncilMember(
      _diamondCutHash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approveEmergencyDiamondCutAsSecurityCouncilMember(bytes32)"(
      _diamondCutHash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    cancelDiamondCutProposal(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancelDiamondCutProposal()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    commitBlocks(
      _lastCommittedBlockData: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      _newBlocksData: {
        blockNumber: BigNumberish;
        timestamp: BigNumberish;
        indexRepeatedStorageChanges: BigNumberish;
        newStateRoot: BytesLike;
        numberOfLayer1Txs: BigNumberish;
        l2LogsTreeRoot: BytesLike;
        priorityOperationsHash: BytesLike;
        initialStorageChanges: BytesLike;
        repeatedStorageChanges: BytesLike;
        l2Logs: BytesLike;
        l2ArbitraryLengthMessages: BytesLike[];
        factoryDeps: BytesLike[];
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "commitBlocks((uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32),tuple[])"(
      _lastCommittedBlockData: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      _newBlocksData: {
        blockNumber: BigNumberish;
        timestamp: BigNumberish;
        indexRepeatedStorageChanges: BigNumberish;
        newStateRoot: BytesLike;
        numberOfLayer1Txs: BigNumberish;
        l2LogsTreeRoot: BytesLike;
        priorityOperationsHash: BytesLike;
        initialStorageChanges: BytesLike;
        repeatedStorageChanges: BytesLike;
        l2Logs: BytesLike;
        l2ArbitraryLengthMessages: BytesLike[];
        factoryDeps: BytesLike[];
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    emergencyFreezeDiamond(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "emergencyFreezeDiamond()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    executeBlocks(
      _blocksData: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "executeBlocks(tuple[])"(
      _blocksData: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    executeDiamondCutProposal(
      _diamondCut: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "executeDiamondCutProposal((tuple[],address,bytes))"(
      _diamondCut: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    facetAddress(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "facetAddress(bytes4)"(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facetAddresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "facetAddresses()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "facetFunctionSelectors(address)"(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "facets()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentProposalId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCurrentProposalId()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFirstUnprocessedPriorityTx(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getFirstUnprocessedPriorityTx()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGovernor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getGovernor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLastDiamondFreezeTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLastDiamondFreezeTimestamp()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingGovernor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPendingGovernor()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriorityQueueSize(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPriorityQueueSize()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposedDiamondCutHash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getProposedDiamondCutHash()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposedDiamondCutTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getProposedDiamondCutTimestamp()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSecurityCouncilEmergencyApprovals(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSecurityCouncilEmergencyApprovals()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSecurityCouncilMemberLastApprovedProposalId(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSecurityCouncilMemberLastApprovedProposalId(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalBlocksCommitted(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalBlocksCommitted()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalBlocksExecuted(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalBlocksExecuted()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalBlocksVerified(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalBlocksVerified()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalPriorityTxs(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalPriorityTxs()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVerifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getVerifier()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isDiamondStorageFrozen(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isDiamondStorageFrozen()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFunctionFreezable(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isFunctionFreezable(bytes4)"(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSecurityCouncilMember(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isSecurityCouncilMember(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidator(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isValidator(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l2LogsRootHash(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "l2LogsRootHash(uint256)"(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l2TransactionBaseCost(
      _gasPrice: BigNumberish,
      _ergsLimit: BigNumberish,
      _calldataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "l2TransactionBaseCost(uint256,uint256,uint32)"(
      _gasPrice: BigNumberish,
      _ergsLimit: BigNumberish,
      _calldataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priorityQueueFrontOperation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "priorityQueueFrontOperation()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposeDiamondCut(
      _facetCuts: {
        facet: string;
        action: BigNumberish;
        isFreezable: boolean;
        selectors: BytesLike[];
      }[],
      _initAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "proposeDiamondCut(tuple[],address)"(
      _facetCuts: {
        facet: string;
        action: BigNumberish;
        isFreezable: boolean;
        selectors: BytesLike[];
      }[],
      _initAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    proveBlocks(
      _prevBlock: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      _committedBlocks: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      _proof: {
        recurisiveAggregationInput: BigNumberish[];
        serializedProof: BigNumberish[];
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "proveBlocks((uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32),tuple[],(uint256[],uint256[]))"(
      _prevBlock: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      _committedBlocks: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      _proof: {
        recurisiveAggregationInput: BigNumberish[];
        serializedProof: BigNumberish[];
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    proveL2LogInclusion(
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _log: {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBlock: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proveL2LogInclusion(uint256,uint256,(uint8,bool,uint16,address,bytes32,bytes32),bytes32[])"(
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _log: {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBlock: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proveL2MessageInclusion(
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _message: {
        txNumberInBlock: BigNumberish;
        sender: string;
        data: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proveL2MessageInclusion(uint256,uint256,(uint16,address,bytes),bytes32[])"(
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _message: {
        txNumberInBlock: BigNumberish;
        sender: string;
        data: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requestL2Transaction(
      _contractL2: string,
      _l2Value: BigNumberish,
      _calldata: BytesLike,
      _ergsLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "requestL2Transaction(address,uint256,bytes,uint256,bytes[])"(
      _contractL2: string,
      _l2Value: BigNumberish,
      _calldata: BytesLike,
      _ergsLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    revertBlocks(
      _newLastBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revertBlocks(uint256)"(
      _newLastBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    serializeL2Transaction(
      _txId: BigNumberish,
      _l2Value: BigNumberish,
      _sender: string,
      _contractAddressL2: string,
      _calldata: BytesLike,
      _ergsLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "serializeL2Transaction(uint256,uint256,address,address,bytes,uint256,bytes[])"(
      _txId: BigNumberish,
      _l2Value: BigNumberish,
      _sender: string,
      _contractAddressL2: string,
      _calldata: BytesLike,
      _ergsLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setL2BootloaderBytecodeHash(
      _l2BootloaderBytecodeHash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setL2BootloaderBytecodeHash(bytes32)"(
      _l2BootloaderBytecodeHash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setL2DefaultAccountBytecodeHash(
      _l2DefaultAccountBytecodeHash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setL2DefaultAccountBytecodeHash(bytes32)"(
      _l2DefaultAccountBytecodeHash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPendingGovernor(
      _newPendingGovernor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPendingGovernor(address)"(
      _newPendingGovernor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPorterAvailability(
      _isPorterAvailable: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPorterAvailability(bool)"(
      _isPorterAvailable: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setValidator(
      _validator: string,
      _active: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setValidator(address,bool)"(
      _validator: string,
      _active: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setVerifier(
      _newVerifier: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setVerifier(address)"(
      _newVerifier: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setVerifierParams(
      _newVerifierParams: {
        recursionNodeLevelVkHash: BytesLike;
        recursionLeafLevelVkHash: BytesLike;
        recursionCircuitsSetVksHash: BytesLike;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setVerifierParams((bytes32,bytes32,bytes32))"(
      _newVerifierParams: {
        recursionNodeLevelVkHash: BytesLike;
        recursionLeafLevelVkHash: BytesLike;
        recursionCircuitsSetVksHash: BytesLike;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    storedBlockHash(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "storedBlockHash(uint256)"(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unfreezeDiamond(overrides?: Overrides): Promise<PopulatedTransaction>;

    "unfreezeDiamond()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
