/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface DiamondCutTestInterface extends ethers.utils.Interface {
  functions: {
    "diamondCut(tuple)": FunctionFragment;
    "facetAddress(bytes4)": FunctionFragment;
    "facetAddresses()": FunctionFragment;
    "facetFunctionSelectors(address)": FunctionFragment;
    "facets()": FunctionFragment;
    "getCurrentProposalId()": FunctionFragment;
    "getFirstUnprocessedPriorityTx()": FunctionFragment;
    "getGovernor()": FunctionFragment;
    "getLastDiamondFreezeTimestamp()": FunctionFragment;
    "getPendingGovernor()": FunctionFragment;
    "getPriorityQueueSize()": FunctionFragment;
    "getProposedDiamondCutHash()": FunctionFragment;
    "getProposedDiamondCutTimestamp()": FunctionFragment;
    "getSecurityCouncilEmergencyApprovals()": FunctionFragment;
    "getSecurityCouncilMemberLastApprovedProposalId(address)": FunctionFragment;
    "getTotalBlocksCommitted()": FunctionFragment;
    "getTotalBlocksExecuted()": FunctionFragment;
    "getTotalBlocksVerified()": FunctionFragment;
    "getTotalPriorityTxs()": FunctionFragment;
    "getVerifier()": FunctionFragment;
    "isDiamondStorageFrozen()": FunctionFragment;
    "isFacetFreezable(address)": FunctionFragment;
    "isFunctionFreezable(bytes4)": FunctionFragment;
    "isSecurityCouncilMember(address)": FunctionFragment;
    "isValidator(address)": FunctionFragment;
    "l2LogsRootHash(uint256)": FunctionFragment;
    "priorityQueueFrontOperation()": FunctionFragment;
    "storedBlockHash(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "diamondCut",
    values: [
      {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "facetFunctionSelectors",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "facets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCurrentProposalId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFirstUnprocessedPriorityTx",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastDiamondFreezeTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriorityQueueSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProposedDiamondCutHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProposedDiamondCutTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSecurityCouncilEmergencyApprovals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSecurityCouncilMemberLastApprovedProposalId",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBlocksCommitted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBlocksExecuted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBlocksVerified",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPriorityTxs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isDiamondStorageFrozen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isFacetFreezable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isFunctionFreezable",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isSecurityCouncilMember",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isValidator", values: [string]): string;
  encodeFunctionData(
    functionFragment: "l2LogsRootHash",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "priorityQueueFrontOperation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "storedBlockHash",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "diamondCut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "facetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetFunctionSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "facets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentProposalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFirstUnprocessedPriorityTx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastDiamondFreezeTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriorityQueueSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposedDiamondCutHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposedDiamondCutTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSecurityCouncilEmergencyApprovals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSecurityCouncilMemberLastApprovedProposalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBlocksCommitted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBlocksExecuted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBlocksVerified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPriorityTxs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDiamondStorageFrozen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFacetFreezable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFunctionFreezable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSecurityCouncilMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l2LogsRootHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priorityQueueFrontOperation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storedBlockHash",
    data: BytesLike
  ): Result;

  events: {};
}

export class DiamondCutTest extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: DiamondCutTestInterface;

  functions: {
    diamondCut(
      _diamondCut: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "diamondCut((tuple[],address,bytes))"(
      _diamondCut: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    facetAddress(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "facetAddress(bytes4)"(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    facetAddresses(overrides?: CallOverrides): Promise<{
      0: string[];
    }>;

    "facetAddresses()"(overrides?: CallOverrides): Promise<{
      0: string[];
    }>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    "facetFunctionSelectors(address)"(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    facets(overrides?: CallOverrides): Promise<{
      result: { addr: string; selectors: string[]; 0: string; 1: string[] }[];
      0: { addr: string; selectors: string[]; 0: string; 1: string[] }[];
    }>;

    "facets()"(overrides?: CallOverrides): Promise<{
      result: { addr: string; selectors: string[]; 0: string; 1: string[] }[];
      0: { addr: string; selectors: string[]; 0: string; 1: string[] }[];
    }>;

    getCurrentProposalId(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getCurrentProposalId()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getFirstUnprocessedPriorityTx(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getFirstUnprocessedPriorityTx()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getGovernor(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getGovernor()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getLastDiamondFreezeTimestamp(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getLastDiamondFreezeTimestamp()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getPendingGovernor(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getPendingGovernor()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getPriorityQueueSize(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getPriorityQueueSize()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getProposedDiamondCutHash(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getProposedDiamondCutHash()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getProposedDiamondCutTimestamp(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getProposedDiamondCutTimestamp()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getSecurityCouncilEmergencyApprovals(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getSecurityCouncilEmergencyApprovals()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getSecurityCouncilMemberLastApprovedProposalId(
      _address: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getSecurityCouncilMemberLastApprovedProposalId(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getTotalBlocksCommitted(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getTotalBlocksCommitted()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getTotalBlocksExecuted(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getTotalBlocksExecuted()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getTotalBlocksVerified(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getTotalBlocksVerified()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getTotalPriorityTxs(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getTotalPriorityTxs()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getVerifier(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getVerifier()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    isDiamondStorageFrozen(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "isDiamondStorageFrozen()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    isFacetFreezable(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<{
      isFreezable: boolean;
      0: boolean;
    }>;

    "isFacetFreezable(address)"(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<{
      isFreezable: boolean;
      0: boolean;
    }>;

    isFunctionFreezable(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isFunctionFreezable(bytes4)"(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isSecurityCouncilMember(
      _address: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isSecurityCouncilMember(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isValidator(
      _address: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isValidator(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    l2LogsRootHash(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "l2LogsRootHash(uint256)"(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    priorityQueueFrontOperation(overrides?: CallOverrides): Promise<{
      0: {
        canonicalTxHash: string;
        expirationBlock: BigNumber;
        layer2Tip: BigNumber;
        0: string;
        1: BigNumber;
        2: BigNumber;
      };
    }>;

    "priorityQueueFrontOperation()"(overrides?: CallOverrides): Promise<{
      0: {
        canonicalTxHash: string;
        expirationBlock: BigNumber;
        layer2Tip: BigNumber;
        0: string;
        1: BigNumber;
        2: BigNumber;
      };
    }>;

    storedBlockHash(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "storedBlockHash(uint256)"(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  diamondCut(
    _diamondCut: {
      facetCuts: {
        facet: string;
        action: BigNumberish;
        isFreezable: boolean;
        selectors: BytesLike[];
      }[];
      initAddress: string;
      initCalldata: BytesLike;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "diamondCut((tuple[],address,bytes))"(
    _diamondCut: {
      facetCuts: {
        facet: string;
        action: BigNumberish;
        isFreezable: boolean;
        selectors: BytesLike[];
      }[];
      initAddress: string;
      initCalldata: BytesLike;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  facetAddress(
    _selector: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "facetAddress(bytes4)"(
    _selector: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  facetAddresses(overrides?: CallOverrides): Promise<string[]>;

  "facetAddresses()"(overrides?: CallOverrides): Promise<string[]>;

  facetFunctionSelectors(
    _facet: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "facetFunctionSelectors(address)"(
    _facet: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  facets(
    overrides?: CallOverrides
  ): Promise<{ addr: string; selectors: string[]; 0: string; 1: string[] }[]>;

  "facets()"(
    overrides?: CallOverrides
  ): Promise<{ addr: string; selectors: string[]; 0: string; 1: string[] }[]>;

  getCurrentProposalId(overrides?: CallOverrides): Promise<BigNumber>;

  "getCurrentProposalId()"(overrides?: CallOverrides): Promise<BigNumber>;

  getFirstUnprocessedPriorityTx(overrides?: CallOverrides): Promise<BigNumber>;

  "getFirstUnprocessedPriorityTx()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getGovernor(overrides?: CallOverrides): Promise<string>;

  "getGovernor()"(overrides?: CallOverrides): Promise<string>;

  getLastDiamondFreezeTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  "getLastDiamondFreezeTimestamp()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPendingGovernor(overrides?: CallOverrides): Promise<string>;

  "getPendingGovernor()"(overrides?: CallOverrides): Promise<string>;

  getPriorityQueueSize(overrides?: CallOverrides): Promise<BigNumber>;

  "getPriorityQueueSize()"(overrides?: CallOverrides): Promise<BigNumber>;

  getProposedDiamondCutHash(overrides?: CallOverrides): Promise<string>;

  "getProposedDiamondCutHash()"(overrides?: CallOverrides): Promise<string>;

  getProposedDiamondCutTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  "getProposedDiamondCutTimestamp()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSecurityCouncilEmergencyApprovals(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getSecurityCouncilEmergencyApprovals()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSecurityCouncilMemberLastApprovedProposalId(
    _address: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getSecurityCouncilMemberLastApprovedProposalId(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalBlocksCommitted(overrides?: CallOverrides): Promise<BigNumber>;

  "getTotalBlocksCommitted()"(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalBlocksExecuted(overrides?: CallOverrides): Promise<BigNumber>;

  "getTotalBlocksExecuted()"(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalBlocksVerified(overrides?: CallOverrides): Promise<BigNumber>;

  "getTotalBlocksVerified()"(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalPriorityTxs(overrides?: CallOverrides): Promise<BigNumber>;

  "getTotalPriorityTxs()"(overrides?: CallOverrides): Promise<BigNumber>;

  getVerifier(overrides?: CallOverrides): Promise<string>;

  "getVerifier()"(overrides?: CallOverrides): Promise<string>;

  isDiamondStorageFrozen(overrides?: CallOverrides): Promise<boolean>;

  "isDiamondStorageFrozen()"(overrides?: CallOverrides): Promise<boolean>;

  isFacetFreezable(_facet: string, overrides?: CallOverrides): Promise<boolean>;

  "isFacetFreezable(address)"(
    _facet: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isFunctionFreezable(
    _selector: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isFunctionFreezable(bytes4)"(
    _selector: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isSecurityCouncilMember(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isSecurityCouncilMember(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidator(_address: string, overrides?: CallOverrides): Promise<boolean>;

  "isValidator(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  l2LogsRootHash(
    _blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "l2LogsRootHash(uint256)"(
    _blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  priorityQueueFrontOperation(
    overrides?: CallOverrides
  ): Promise<{
    canonicalTxHash: string;
    expirationBlock: BigNumber;
    layer2Tip: BigNumber;
    0: string;
    1: BigNumber;
    2: BigNumber;
  }>;

  "priorityQueueFrontOperation()"(
    overrides?: CallOverrides
  ): Promise<{
    canonicalTxHash: string;
    expirationBlock: BigNumber;
    layer2Tip: BigNumber;
    0: string;
    1: BigNumber;
    2: BigNumber;
  }>;

  storedBlockHash(
    _blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "storedBlockHash(uint256)"(
    _blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    diamondCut(
      _diamondCut: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "diamondCut((tuple[],address,bytes))"(
      _diamondCut: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    facetAddress(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "facetAddress(bytes4)"(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    facetAddresses(overrides?: CallOverrides): Promise<string[]>;

    "facetAddresses()"(overrides?: CallOverrides): Promise<string[]>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "facetFunctionSelectors(address)"(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    facets(
      overrides?: CallOverrides
    ): Promise<{ addr: string; selectors: string[]; 0: string; 1: string[] }[]>;

    "facets()"(
      overrides?: CallOverrides
    ): Promise<{ addr: string; selectors: string[]; 0: string; 1: string[] }[]>;

    getCurrentProposalId(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentProposalId()"(overrides?: CallOverrides): Promise<BigNumber>;

    getFirstUnprocessedPriorityTx(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getFirstUnprocessedPriorityTx()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGovernor(overrides?: CallOverrides): Promise<string>;

    "getGovernor()"(overrides?: CallOverrides): Promise<string>;

    getLastDiamondFreezeTimestamp(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLastDiamondFreezeTimestamp()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingGovernor(overrides?: CallOverrides): Promise<string>;

    "getPendingGovernor()"(overrides?: CallOverrides): Promise<string>;

    getPriorityQueueSize(overrides?: CallOverrides): Promise<BigNumber>;

    "getPriorityQueueSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    getProposedDiamondCutHash(overrides?: CallOverrides): Promise<string>;

    "getProposedDiamondCutHash()"(overrides?: CallOverrides): Promise<string>;

    getProposedDiamondCutTimestamp(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getProposedDiamondCutTimestamp()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSecurityCouncilEmergencyApprovals(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSecurityCouncilEmergencyApprovals()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSecurityCouncilMemberLastApprovedProposalId(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSecurityCouncilMemberLastApprovedProposalId(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalBlocksCommitted(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalBlocksCommitted()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalBlocksExecuted(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalBlocksExecuted()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalBlocksVerified(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalBlocksVerified()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalPriorityTxs(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalPriorityTxs()"(overrides?: CallOverrides): Promise<BigNumber>;

    getVerifier(overrides?: CallOverrides): Promise<string>;

    "getVerifier()"(overrides?: CallOverrides): Promise<string>;

    isDiamondStorageFrozen(overrides?: CallOverrides): Promise<boolean>;

    "isDiamondStorageFrozen()"(overrides?: CallOverrides): Promise<boolean>;

    isFacetFreezable(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isFacetFreezable(address)"(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isFunctionFreezable(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isFunctionFreezable(bytes4)"(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isSecurityCouncilMember(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isSecurityCouncilMember(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidator(_address: string, overrides?: CallOverrides): Promise<boolean>;

    "isValidator(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    l2LogsRootHash(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "l2LogsRootHash(uint256)"(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    priorityQueueFrontOperation(
      overrides?: CallOverrides
    ): Promise<{
      canonicalTxHash: string;
      expirationBlock: BigNumber;
      layer2Tip: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
    }>;

    "priorityQueueFrontOperation()"(
      overrides?: CallOverrides
    ): Promise<{
      canonicalTxHash: string;
      expirationBlock: BigNumber;
      layer2Tip: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
    }>;

    storedBlockHash(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "storedBlockHash(uint256)"(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    diamondCut(
      _diamondCut: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "diamondCut((tuple[],address,bytes))"(
      _diamondCut: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    facetAddress(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "facetAddress(bytes4)"(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facetAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    "facetAddresses()"(overrides?: CallOverrides): Promise<BigNumber>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "facetFunctionSelectors(address)"(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facets(overrides?: CallOverrides): Promise<BigNumber>;

    "facets()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentProposalId(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentProposalId()"(overrides?: CallOverrides): Promise<BigNumber>;

    getFirstUnprocessedPriorityTx(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getFirstUnprocessedPriorityTx()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGovernor(overrides?: CallOverrides): Promise<BigNumber>;

    "getGovernor()"(overrides?: CallOverrides): Promise<BigNumber>;

    getLastDiamondFreezeTimestamp(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLastDiamondFreezeTimestamp()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingGovernor(overrides?: CallOverrides): Promise<BigNumber>;

    "getPendingGovernor()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPriorityQueueSize(overrides?: CallOverrides): Promise<BigNumber>;

    "getPriorityQueueSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    getProposedDiamondCutHash(overrides?: CallOverrides): Promise<BigNumber>;

    "getProposedDiamondCutHash()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposedDiamondCutTimestamp(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getProposedDiamondCutTimestamp()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSecurityCouncilEmergencyApprovals(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSecurityCouncilEmergencyApprovals()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSecurityCouncilMemberLastApprovedProposalId(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSecurityCouncilMemberLastApprovedProposalId(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalBlocksCommitted(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalBlocksCommitted()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalBlocksExecuted(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalBlocksExecuted()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalBlocksVerified(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalBlocksVerified()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalPriorityTxs(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalPriorityTxs()"(overrides?: CallOverrides): Promise<BigNumber>;

    getVerifier(overrides?: CallOverrides): Promise<BigNumber>;

    "getVerifier()"(overrides?: CallOverrides): Promise<BigNumber>;

    isDiamondStorageFrozen(overrides?: CallOverrides): Promise<BigNumber>;

    "isDiamondStorageFrozen()"(overrides?: CallOverrides): Promise<BigNumber>;

    isFacetFreezable(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isFacetFreezable(address)"(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isFunctionFreezable(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isFunctionFreezable(bytes4)"(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSecurityCouncilMember(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isSecurityCouncilMember(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidator(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isValidator(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    l2LogsRootHash(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "l2LogsRootHash(uint256)"(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priorityQueueFrontOperation(overrides?: CallOverrides): Promise<BigNumber>;

    "priorityQueueFrontOperation()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    storedBlockHash(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "storedBlockHash(uint256)"(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    diamondCut(
      _diamondCut: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "diamondCut((tuple[],address,bytes))"(
      _diamondCut: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    facetAddress(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "facetAddress(bytes4)"(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facetAddresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "facetAddresses()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "facetFunctionSelectors(address)"(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "facets()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentProposalId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCurrentProposalId()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFirstUnprocessedPriorityTx(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getFirstUnprocessedPriorityTx()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGovernor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getGovernor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLastDiamondFreezeTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLastDiamondFreezeTimestamp()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingGovernor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPendingGovernor()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriorityQueueSize(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPriorityQueueSize()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposedDiamondCutHash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getProposedDiamondCutHash()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposedDiamondCutTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getProposedDiamondCutTimestamp()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSecurityCouncilEmergencyApprovals(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSecurityCouncilEmergencyApprovals()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSecurityCouncilMemberLastApprovedProposalId(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSecurityCouncilMemberLastApprovedProposalId(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalBlocksCommitted(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalBlocksCommitted()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalBlocksExecuted(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalBlocksExecuted()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalBlocksVerified(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalBlocksVerified()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalPriorityTxs(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalPriorityTxs()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVerifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getVerifier()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isDiamondStorageFrozen(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isDiamondStorageFrozen()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFacetFreezable(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isFacetFreezable(address)"(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFunctionFreezable(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isFunctionFreezable(bytes4)"(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSecurityCouncilMember(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isSecurityCouncilMember(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidator(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isValidator(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l2LogsRootHash(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "l2LogsRootHash(uint256)"(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priorityQueueFrontOperation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "priorityQueueFrontOperation()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    storedBlockHash(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "storedBlockHash(uint256)"(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
