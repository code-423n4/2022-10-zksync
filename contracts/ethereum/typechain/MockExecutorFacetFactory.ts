/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { MockExecutorFacet } from "./MockExecutorFacet";

export class MockExecutorFacetFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<MockExecutorFacet> {
    return super.deploy(overrides || {}) as Promise<MockExecutorFacet>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockExecutorFacet {
    return super.attach(address) as MockExecutorFacet;
  }
  connect(signer: Signer): MockExecutorFacetFactory {
    return super.connect(signer) as MockExecutorFacetFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockExecutorFacet {
    return new Contract(address, _abi, signerOrProvider) as MockExecutorFacet;
  }
}

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint64",
            name: "blockNumber",
            type: "uint64",
          },
          {
            internalType: "bytes32",
            name: "blockHash",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "indexRepeatedStorageChanges",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "numberOfLayer1Txs",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "priorityOperationsHash",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "l2LogsTreeRoot",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "commitment",
            type: "bytes32",
          },
        ],
        internalType: "struct IExecutor.StoredBlockInfo",
        name: "_prevBlock",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint64",
            name: "blockNumber",
            type: "uint64",
          },
          {
            internalType: "bytes32",
            name: "blockHash",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "indexRepeatedStorageChanges",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "numberOfLayer1Txs",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "priorityOperationsHash",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "l2LogsTreeRoot",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "commitment",
            type: "bytes32",
          },
        ],
        internalType: "struct IExecutor.StoredBlockInfo[]",
        name: "_committedBlocks",
        type: "tuple[]",
      },
      {
        components: [
          {
            internalType: "uint256[]",
            name: "recurisiveAggregationInput",
            type: "uint256[]",
          },
          {
            internalType: "uint256[]",
            name: "serializedProof",
            type: "uint256[]",
          },
        ],
        internalType: "struct IExecutor.ProofInput",
        name: "_proof",
        type: "tuple",
      },
    ],
    name: "fakeProveBlocks",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b504660010361002157610021610026565b61003c565b634e487b7160e01b600052600160045260246000fd5b6102b28061004b6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80631714f1e314610030575b600080fd5b61004361003e36600461019f565b610045565b005b7f8e94fed44239eb2314ab7a406345e6c5a8f0ccedf3b600de3d004e672c33abf454600181146100a15760405162461bcd60e51b8152602060048201526002602482015261723160f01b60448201526064015b60405180910390fd5b60027f8e94fed44239eb2314ab7a406345e6c5a8f0ccedf3b600de3d004e672c33abf4553360009081526009602052604090205460ff166101095760405162461bcd60e51b8152602060048201526002602482015261062d60f31b6044820152606401610098565b600c805484919060009061011e908490610255565b9091555050600c54600d54101561015c5760405162461bcd60e51b815260206004820152600260248201526136bd60f11b6044820152606401610098565b60017f8e94fed44239eb2314ab7a406345e6c5a8f0ccedf3b600de3d004e672c33abf4555050505050565b60006040828403121561019957600080fd5b50919050565b6000806000808486036101408112156101b757600080fd5b610100808212156101c757600080fd5b869550850135905067ffffffffffffffff808211156101e557600080fd5b818701915087601f8301126101f957600080fd5b81358181111561020857600080fd5b8860208260081b850101111561021d57600080fd5b6020830195508094505061012087013591508082111561023c57600080fd5b5061024987828801610187565b91505092959194509250565b8082018082111561027657634e487b7160e01b600052601160045260246000fd5b9291505056fea26469706673582212205f2e984fb0fca955bbd9a8c1737690e04e5cac246b8b16912bd2ed738e2b254b64736f6c63430008110033";
