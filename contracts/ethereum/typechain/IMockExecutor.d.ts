/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IMockExecutorInterface extends ethers.utils.Interface {
  functions: {
    "fakeProveBlocks(tuple,tuple[],tuple)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "fakeProveBlocks",
    values: [
      {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      {
        recurisiveAggregationInput: BigNumberish[];
        serializedProof: BigNumberish[];
      }
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "fakeProveBlocks",
    data: BytesLike
  ): Result;

  events: {};
}

export class IMockExecutor extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IMockExecutorInterface;

  functions: {
    fakeProveBlocks(
      _prevBlock: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      _committedBlocks: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      _proof: {
        recurisiveAggregationInput: BigNumberish[];
        serializedProof: BigNumberish[];
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "fakeProveBlocks((uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32),tuple[],(uint256[],uint256[]))"(
      _prevBlock: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      _committedBlocks: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      _proof: {
        recurisiveAggregationInput: BigNumberish[];
        serializedProof: BigNumberish[];
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  fakeProveBlocks(
    _prevBlock: {
      blockNumber: BigNumberish;
      blockHash: BytesLike;
      indexRepeatedStorageChanges: BigNumberish;
      numberOfLayer1Txs: BigNumberish;
      priorityOperationsHash: BytesLike;
      l2LogsTreeRoot: BytesLike;
      timestamp: BigNumberish;
      commitment: BytesLike;
    },
    _committedBlocks: {
      blockNumber: BigNumberish;
      blockHash: BytesLike;
      indexRepeatedStorageChanges: BigNumberish;
      numberOfLayer1Txs: BigNumberish;
      priorityOperationsHash: BytesLike;
      l2LogsTreeRoot: BytesLike;
      timestamp: BigNumberish;
      commitment: BytesLike;
    }[],
    _proof: {
      recurisiveAggregationInput: BigNumberish[];
      serializedProof: BigNumberish[];
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "fakeProveBlocks((uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32),tuple[],(uint256[],uint256[]))"(
    _prevBlock: {
      blockNumber: BigNumberish;
      blockHash: BytesLike;
      indexRepeatedStorageChanges: BigNumberish;
      numberOfLayer1Txs: BigNumberish;
      priorityOperationsHash: BytesLike;
      l2LogsTreeRoot: BytesLike;
      timestamp: BigNumberish;
      commitment: BytesLike;
    },
    _committedBlocks: {
      blockNumber: BigNumberish;
      blockHash: BytesLike;
      indexRepeatedStorageChanges: BigNumberish;
      numberOfLayer1Txs: BigNumberish;
      priorityOperationsHash: BytesLike;
      l2LogsTreeRoot: BytesLike;
      timestamp: BigNumberish;
      commitment: BytesLike;
    }[],
    _proof: {
      recurisiveAggregationInput: BigNumberish[];
      serializedProof: BigNumberish[];
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    fakeProveBlocks(
      _prevBlock: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      _committedBlocks: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      _proof: {
        recurisiveAggregationInput: BigNumberish[];
        serializedProof: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "fakeProveBlocks((uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32),tuple[],(uint256[],uint256[]))"(
      _prevBlock: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      _committedBlocks: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      _proof: {
        recurisiveAggregationInput: BigNumberish[];
        serializedProof: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    fakeProveBlocks(
      _prevBlock: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      _committedBlocks: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      _proof: {
        recurisiveAggregationInput: BigNumberish[];
        serializedProof: BigNumberish[];
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "fakeProveBlocks((uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32),tuple[],(uint256[],uint256[]))"(
      _prevBlock: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      _committedBlocks: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      _proof: {
        recurisiveAggregationInput: BigNumberish[];
        serializedProof: BigNumberish[];
      },
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    fakeProveBlocks(
      _prevBlock: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      _committedBlocks: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      _proof: {
        recurisiveAggregationInput: BigNumberish[];
        serializedProof: BigNumberish[];
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "fakeProveBlocks((uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32),tuple[],(uint256[],uint256[]))"(
      _prevBlock: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      _committedBlocks: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      _proof: {
        recurisiveAggregationInput: BigNumberish[];
        serializedProof: BigNumberish[];
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
