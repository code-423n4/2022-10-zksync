/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IGovernanceInterface extends ethers.utils.Interface {
  functions: {
    "acceptGovernor()": FunctionFragment;
    "setL2BootloaderBytecodeHash(bytes32)": FunctionFragment;
    "setL2DefaultAccountBytecodeHash(bytes32)": FunctionFragment;
    "setPendingGovernor(address)": FunctionFragment;
    "setPorterAvailability(bool)": FunctionFragment;
    "setValidator(address,bool)": FunctionFragment;
    "setVerifier(address)": FunctionFragment;
    "setVerifierParams(tuple)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setL2BootloaderBytecodeHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setL2DefaultAccountBytecodeHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingGovernor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPorterAvailability",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setValidator",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setVerifier", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setVerifierParams",
    values: [
      {
        recursionNodeLevelVkHash: BytesLike;
        recursionLeafLevelVkHash: BytesLike;
        recursionCircuitsSetVksHash: BytesLike;
      }
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setL2BootloaderBytecodeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setL2DefaultAccountBytecodeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPendingGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPorterAvailability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVerifierParams",
    data: BytesLike
  ): Result;

  events: {
    "IsPorterAvailableStatusUpdate(bool)": EventFragment;
    "NewGovernor(address,address)": EventFragment;
    "NewL2BootloaderBytecodeHash(bytes32,bytes32)": EventFragment;
    "NewL2DefaultAccountBytecodeHash(bytes32,bytes32)": EventFragment;
    "NewPendingGovernor(address,address)": EventFragment;
    "NewVerifier(address,address)": EventFragment;
    "NewVerifierParams(tuple,tuple)": EventFragment;
    "ValidatorStatusUpdate(address,bool)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "IsPorterAvailableStatusUpdate"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewGovernor"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "NewL2BootloaderBytecodeHash"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "NewL2DefaultAccountBytecodeHash"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPendingGovernor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewVerifier"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewVerifierParams"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorStatusUpdate"): EventFragment;
}

export class IGovernance extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IGovernanceInterface;

  functions: {
    acceptGovernor(overrides?: Overrides): Promise<ContractTransaction>;

    "acceptGovernor()"(overrides?: Overrides): Promise<ContractTransaction>;

    setL2BootloaderBytecodeHash(
      _l2BootloaderBytecodeHash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setL2BootloaderBytecodeHash(bytes32)"(
      _l2BootloaderBytecodeHash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setL2DefaultAccountBytecodeHash(
      _l2DefaultAccountBytecodeHash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setL2DefaultAccountBytecodeHash(bytes32)"(
      _l2DefaultAccountBytecodeHash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPendingGovernor(
      _newPendingGovernor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPendingGovernor(address)"(
      _newPendingGovernor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPorterAvailability(
      _isPorterAvailable: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPorterAvailability(bool)"(
      _isPorterAvailable: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setValidator(
      _validator: string,
      _active: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setValidator(address,bool)"(
      _validator: string,
      _active: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setVerifier(
      _newVerifier: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setVerifier(address)"(
      _newVerifier: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setVerifierParams(
      _newVerifierParams: {
        recursionNodeLevelVkHash: BytesLike;
        recursionLeafLevelVkHash: BytesLike;
        recursionCircuitsSetVksHash: BytesLike;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setVerifierParams((bytes32,bytes32,bytes32))"(
      _newVerifierParams: {
        recursionNodeLevelVkHash: BytesLike;
        recursionLeafLevelVkHash: BytesLike;
        recursionCircuitsSetVksHash: BytesLike;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  acceptGovernor(overrides?: Overrides): Promise<ContractTransaction>;

  "acceptGovernor()"(overrides?: Overrides): Promise<ContractTransaction>;

  setL2BootloaderBytecodeHash(
    _l2BootloaderBytecodeHash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setL2BootloaderBytecodeHash(bytes32)"(
    _l2BootloaderBytecodeHash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setL2DefaultAccountBytecodeHash(
    _l2DefaultAccountBytecodeHash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setL2DefaultAccountBytecodeHash(bytes32)"(
    _l2DefaultAccountBytecodeHash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPendingGovernor(
    _newPendingGovernor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPendingGovernor(address)"(
    _newPendingGovernor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPorterAvailability(
    _isPorterAvailable: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPorterAvailability(bool)"(
    _isPorterAvailable: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setValidator(
    _validator: string,
    _active: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setValidator(address,bool)"(
    _validator: string,
    _active: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setVerifier(
    _newVerifier: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setVerifier(address)"(
    _newVerifier: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setVerifierParams(
    _newVerifierParams: {
      recursionNodeLevelVkHash: BytesLike;
      recursionLeafLevelVkHash: BytesLike;
      recursionCircuitsSetVksHash: BytesLike;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setVerifierParams((bytes32,bytes32,bytes32))"(
    _newVerifierParams: {
      recursionNodeLevelVkHash: BytesLike;
      recursionLeafLevelVkHash: BytesLike;
      recursionCircuitsSetVksHash: BytesLike;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptGovernor(overrides?: CallOverrides): Promise<void>;

    "acceptGovernor()"(overrides?: CallOverrides): Promise<void>;

    setL2BootloaderBytecodeHash(
      _l2BootloaderBytecodeHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "setL2BootloaderBytecodeHash(bytes32)"(
      _l2BootloaderBytecodeHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setL2DefaultAccountBytecodeHash(
      _l2DefaultAccountBytecodeHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "setL2DefaultAccountBytecodeHash(bytes32)"(
      _l2DefaultAccountBytecodeHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setPendingGovernor(
      _newPendingGovernor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPendingGovernor(address)"(
      _newPendingGovernor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPorterAvailability(
      _isPorterAvailable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPorterAvailability(bool)"(
      _isPorterAvailable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setValidator(
      _validator: string,
      _active: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setValidator(address,bool)"(
      _validator: string,
      _active: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setVerifier(_newVerifier: string, overrides?: CallOverrides): Promise<void>;

    "setVerifier(address)"(
      _newVerifier: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setVerifierParams(
      _newVerifierParams: {
        recursionNodeLevelVkHash: BytesLike;
        recursionLeafLevelVkHash: BytesLike;
        recursionCircuitsSetVksHash: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "setVerifierParams((bytes32,bytes32,bytes32))"(
      _newVerifierParams: {
        recursionNodeLevelVkHash: BytesLike;
        recursionLeafLevelVkHash: BytesLike;
        recursionCircuitsSetVksHash: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    IsPorterAvailableStatusUpdate(isPorterAvailable: null): EventFilter;

    NewGovernor(
      oldGovernor: string | null,
      newGovernor: string | null
    ): EventFilter;

    NewL2BootloaderBytecodeHash(
      previousBytecodeHash: BytesLike | null,
      newBytecodeHash: BytesLike | null
    ): EventFilter;

    NewL2DefaultAccountBytecodeHash(
      previousBytecodeHash: BytesLike | null,
      newBytecodeHash: BytesLike | null
    ): EventFilter;

    NewPendingGovernor(
      oldPendingGovernor: string | null,
      newPendingGovernor: string | null
    ): EventFilter;

    NewVerifier(
      oldVerifier: string | null,
      newVerifier: string | null
    ): EventFilter;

    NewVerifierParams(
      oldVerifierParams: null,
      newVerifierParams: null
    ): EventFilter;

    ValidatorStatusUpdate(
      validatorAddress: string | null,
      isActive: null
    ): EventFilter;
  };

  estimateGas: {
    acceptGovernor(overrides?: Overrides): Promise<BigNumber>;

    "acceptGovernor()"(overrides?: Overrides): Promise<BigNumber>;

    setL2BootloaderBytecodeHash(
      _l2BootloaderBytecodeHash: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setL2BootloaderBytecodeHash(bytes32)"(
      _l2BootloaderBytecodeHash: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setL2DefaultAccountBytecodeHash(
      _l2DefaultAccountBytecodeHash: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setL2DefaultAccountBytecodeHash(bytes32)"(
      _l2DefaultAccountBytecodeHash: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPendingGovernor(
      _newPendingGovernor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPendingGovernor(address)"(
      _newPendingGovernor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPorterAvailability(
      _isPorterAvailable: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPorterAvailability(bool)"(
      _isPorterAvailable: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setValidator(
      _validator: string,
      _active: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setValidator(address,bool)"(
      _validator: string,
      _active: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setVerifier(
      _newVerifier: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setVerifier(address)"(
      _newVerifier: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setVerifierParams(
      _newVerifierParams: {
        recursionNodeLevelVkHash: BytesLike;
        recursionLeafLevelVkHash: BytesLike;
        recursionCircuitsSetVksHash: BytesLike;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setVerifierParams((bytes32,bytes32,bytes32))"(
      _newVerifierParams: {
        recursionNodeLevelVkHash: BytesLike;
        recursionLeafLevelVkHash: BytesLike;
        recursionCircuitsSetVksHash: BytesLike;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptGovernor(overrides?: Overrides): Promise<PopulatedTransaction>;

    "acceptGovernor()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setL2BootloaderBytecodeHash(
      _l2BootloaderBytecodeHash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setL2BootloaderBytecodeHash(bytes32)"(
      _l2BootloaderBytecodeHash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setL2DefaultAccountBytecodeHash(
      _l2DefaultAccountBytecodeHash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setL2DefaultAccountBytecodeHash(bytes32)"(
      _l2DefaultAccountBytecodeHash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPendingGovernor(
      _newPendingGovernor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPendingGovernor(address)"(
      _newPendingGovernor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPorterAvailability(
      _isPorterAvailable: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPorterAvailability(bool)"(
      _isPorterAvailable: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setValidator(
      _validator: string,
      _active: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setValidator(address,bool)"(
      _validator: string,
      _active: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setVerifier(
      _newVerifier: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setVerifier(address)"(
      _newVerifier: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setVerifierParams(
      _newVerifierParams: {
        recursionNodeLevelVkHash: BytesLike;
        recursionLeafLevelVkHash: BytesLike;
        recursionCircuitsSetVksHash: BytesLike;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setVerifierParams((bytes32,bytes32,bytes32))"(
      _newVerifierParams: {
        recursionNodeLevelVkHash: BytesLike;
        recursionLeafLevelVkHash: BytesLike;
        recursionCircuitsSetVksHash: BytesLike;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
