/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IMailboxInterface extends ethers.utils.Interface {
  functions: {
    "l2TransactionBaseCost(uint256,uint256,uint32)": FunctionFragment;
    "proveL2LogInclusion(uint256,uint256,tuple,bytes32[])": FunctionFragment;
    "proveL2MessageInclusion(uint256,uint256,tuple,bytes32[])": FunctionFragment;
    "requestL2Transaction(address,uint256,bytes,uint256,bytes[])": FunctionFragment;
    "serializeL2Transaction(uint256,uint256,address,address,bytes,uint256,bytes[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "l2TransactionBaseCost",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proveL2LogInclusion",
    values: [
      BigNumberish,
      BigNumberish,
      {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBlock: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "proveL2MessageInclusion",
    values: [
      BigNumberish,
      BigNumberish,
      { txNumberInBlock: BigNumberish; sender: string; data: BytesLike },
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "requestL2Transaction",
    values: [string, BigNumberish, BytesLike, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "serializeL2Transaction",
    values: [
      BigNumberish,
      BigNumberish,
      string,
      string,
      BytesLike,
      BigNumberish,
      BytesLike[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "l2TransactionBaseCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proveL2LogInclusion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proveL2MessageInclusion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestL2Transaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "serializeL2Transaction",
    data: BytesLike
  ): Result;

  events: {
    "NewPriorityRequest(uint256,bytes32,uint64,tuple,bytes[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewPriorityRequest"): EventFragment;
}

export class IMailbox extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IMailboxInterface;

  functions: {
    l2TransactionBaseCost(
      _gasPrice: BigNumberish,
      _ergsLimit: BigNumberish,
      _calldataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "l2TransactionBaseCost(uint256,uint256,uint32)"(
      _gasPrice: BigNumberish,
      _ergsLimit: BigNumberish,
      _calldataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    proveL2LogInclusion(
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _log: {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBlock: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "proveL2LogInclusion(uint256,uint256,(uint8,bool,uint16,address,bytes32,bytes32),bytes32[])"(
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _log: {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBlock: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    proveL2MessageInclusion(
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _message: {
        txNumberInBlock: BigNumberish;
        sender: string;
        data: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "proveL2MessageInclusion(uint256,uint256,(uint16,address,bytes),bytes32[])"(
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _message: {
        txNumberInBlock: BigNumberish;
        sender: string;
        data: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    requestL2Transaction(
      _contractL2: string,
      _l2Value: BigNumberish,
      _calldata: BytesLike,
      _ergsLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "requestL2Transaction(address,uint256,bytes,uint256,bytes[])"(
      _contractL2: string,
      _l2Value: BigNumberish,
      _calldata: BytesLike,
      _ergsLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    serializeL2Transaction(
      _txId: BigNumberish,
      _l2Value: BigNumberish,
      _sender: string,
      _contractAddressL2: string,
      _calldata: BytesLike,
      _ergsLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: {
        txType: BigNumber;
        from: BigNumber;
        to: BigNumber;
        ergsLimit: BigNumber;
        ergsPerPubdataByteLimit: BigNumber;
        maxFeePerErg: BigNumber;
        maxPriorityFeePerErg: BigNumber;
        paymaster: BigNumber;
        reserved: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ];
        data: string;
        signature: string;
        factoryDeps: BigNumber[];
        paymasterInput: string;
        reservedDynamic: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: BigNumber;
        6: BigNumber;
        7: BigNumber;
        8: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
        9: string;
        10: string;
        11: BigNumber[];
        12: string;
        13: string;
      };
    }>;

    "serializeL2Transaction(uint256,uint256,address,address,bytes,uint256,bytes[])"(
      _txId: BigNumberish,
      _l2Value: BigNumberish,
      _sender: string,
      _contractAddressL2: string,
      _calldata: BytesLike,
      _ergsLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: {
        txType: BigNumber;
        from: BigNumber;
        to: BigNumber;
        ergsLimit: BigNumber;
        ergsPerPubdataByteLimit: BigNumber;
        maxFeePerErg: BigNumber;
        maxPriorityFeePerErg: BigNumber;
        paymaster: BigNumber;
        reserved: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ];
        data: string;
        signature: string;
        factoryDeps: BigNumber[];
        paymasterInput: string;
        reservedDynamic: string;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: BigNumber;
        6: BigNumber;
        7: BigNumber;
        8: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
        9: string;
        10: string;
        11: BigNumber[];
        12: string;
        13: string;
      };
    }>;
  };

  l2TransactionBaseCost(
    _gasPrice: BigNumberish,
    _ergsLimit: BigNumberish,
    _calldataLength: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "l2TransactionBaseCost(uint256,uint256,uint32)"(
    _gasPrice: BigNumberish,
    _ergsLimit: BigNumberish,
    _calldataLength: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  proveL2LogInclusion(
    _blockNumber: BigNumberish,
    _index: BigNumberish,
    _log: {
      l2ShardId: BigNumberish;
      isService: boolean;
      txNumberInBlock: BigNumberish;
      sender: string;
      key: BytesLike;
      value: BytesLike;
    },
    _proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  "proveL2LogInclusion(uint256,uint256,(uint8,bool,uint16,address,bytes32,bytes32),bytes32[])"(
    _blockNumber: BigNumberish,
    _index: BigNumberish,
    _log: {
      l2ShardId: BigNumberish;
      isService: boolean;
      txNumberInBlock: BigNumberish;
      sender: string;
      key: BytesLike;
      value: BytesLike;
    },
    _proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  proveL2MessageInclusion(
    _blockNumber: BigNumberish,
    _index: BigNumberish,
    _message: {
      txNumberInBlock: BigNumberish;
      sender: string;
      data: BytesLike;
    },
    _proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  "proveL2MessageInclusion(uint256,uint256,(uint16,address,bytes),bytes32[])"(
    _blockNumber: BigNumberish,
    _index: BigNumberish,
    _message: {
      txNumberInBlock: BigNumberish;
      sender: string;
      data: BytesLike;
    },
    _proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  requestL2Transaction(
    _contractL2: string,
    _l2Value: BigNumberish,
    _calldata: BytesLike,
    _ergsLimit: BigNumberish,
    _factoryDeps: BytesLike[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "requestL2Transaction(address,uint256,bytes,uint256,bytes[])"(
    _contractL2: string,
    _l2Value: BigNumberish,
    _calldata: BytesLike,
    _ergsLimit: BigNumberish,
    _factoryDeps: BytesLike[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  serializeL2Transaction(
    _txId: BigNumberish,
    _l2Value: BigNumberish,
    _sender: string,
    _contractAddressL2: string,
    _calldata: BytesLike,
    _ergsLimit: BigNumberish,
    _factoryDeps: BytesLike[],
    overrides?: CallOverrides
  ): Promise<{
    txType: BigNumber;
    from: BigNumber;
    to: BigNumber;
    ergsLimit: BigNumber;
    ergsPerPubdataByteLimit: BigNumber;
    maxFeePerErg: BigNumber;
    maxPriorityFeePerErg: BigNumber;
    paymaster: BigNumber;
    reserved: [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ];
    data: string;
    signature: string;
    factoryDeps: BigNumber[];
    paymasterInput: string;
    reservedDynamic: string;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: BigNumber;
    8: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
    9: string;
    10: string;
    11: BigNumber[];
    12: string;
    13: string;
  }>;

  "serializeL2Transaction(uint256,uint256,address,address,bytes,uint256,bytes[])"(
    _txId: BigNumberish,
    _l2Value: BigNumberish,
    _sender: string,
    _contractAddressL2: string,
    _calldata: BytesLike,
    _ergsLimit: BigNumberish,
    _factoryDeps: BytesLike[],
    overrides?: CallOverrides
  ): Promise<{
    txType: BigNumber;
    from: BigNumber;
    to: BigNumber;
    ergsLimit: BigNumber;
    ergsPerPubdataByteLimit: BigNumber;
    maxFeePerErg: BigNumber;
    maxPriorityFeePerErg: BigNumber;
    paymaster: BigNumber;
    reserved: [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ];
    data: string;
    signature: string;
    factoryDeps: BigNumber[];
    paymasterInput: string;
    reservedDynamic: string;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: BigNumber;
    8: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
    9: string;
    10: string;
    11: BigNumber[];
    12: string;
    13: string;
  }>;

  callStatic: {
    l2TransactionBaseCost(
      _gasPrice: BigNumberish,
      _ergsLimit: BigNumberish,
      _calldataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "l2TransactionBaseCost(uint256,uint256,uint32)"(
      _gasPrice: BigNumberish,
      _ergsLimit: BigNumberish,
      _calldataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proveL2LogInclusion(
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _log: {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBlock: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "proveL2LogInclusion(uint256,uint256,(uint8,bool,uint16,address,bytes32,bytes32),bytes32[])"(
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _log: {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBlock: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    proveL2MessageInclusion(
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _message: {
        txNumberInBlock: BigNumberish;
        sender: string;
        data: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "proveL2MessageInclusion(uint256,uint256,(uint16,address,bytes),bytes32[])"(
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _message: {
        txNumberInBlock: BigNumberish;
        sender: string;
        data: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    requestL2Transaction(
      _contractL2: string,
      _l2Value: BigNumberish,
      _calldata: BytesLike,
      _ergsLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string>;

    "requestL2Transaction(address,uint256,bytes,uint256,bytes[])"(
      _contractL2: string,
      _l2Value: BigNumberish,
      _calldata: BytesLike,
      _ergsLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string>;

    serializeL2Transaction(
      _txId: BigNumberish,
      _l2Value: BigNumberish,
      _sender: string,
      _contractAddressL2: string,
      _calldata: BytesLike,
      _ergsLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      txType: BigNumber;
      from: BigNumber;
      to: BigNumber;
      ergsLimit: BigNumber;
      ergsPerPubdataByteLimit: BigNumber;
      maxFeePerErg: BigNumber;
      maxPriorityFeePerErg: BigNumber;
      paymaster: BigNumber;
      reserved: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      data: string;
      signature: string;
      factoryDeps: BigNumber[];
      paymasterInput: string;
      reservedDynamic: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
      9: string;
      10: string;
      11: BigNumber[];
      12: string;
      13: string;
    }>;

    "serializeL2Transaction(uint256,uint256,address,address,bytes,uint256,bytes[])"(
      _txId: BigNumberish,
      _l2Value: BigNumberish,
      _sender: string,
      _contractAddressL2: string,
      _calldata: BytesLike,
      _ergsLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      txType: BigNumber;
      from: BigNumber;
      to: BigNumber;
      ergsLimit: BigNumber;
      ergsPerPubdataByteLimit: BigNumber;
      maxFeePerErg: BigNumber;
      maxPriorityFeePerErg: BigNumber;
      paymaster: BigNumber;
      reserved: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      data: string;
      signature: string;
      factoryDeps: BigNumber[];
      paymasterInput: string;
      reservedDynamic: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
      9: string;
      10: string;
      11: BigNumber[];
      12: string;
      13: string;
    }>;
  };

  filters: {
    NewPriorityRequest(
      txId: null,
      txHash: null,
      expirationBlock: null,
      transaction: null,
      factoryDeps: null
    ): EventFilter;
  };

  estimateGas: {
    l2TransactionBaseCost(
      _gasPrice: BigNumberish,
      _ergsLimit: BigNumberish,
      _calldataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "l2TransactionBaseCost(uint256,uint256,uint32)"(
      _gasPrice: BigNumberish,
      _ergsLimit: BigNumberish,
      _calldataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proveL2LogInclusion(
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _log: {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBlock: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "proveL2LogInclusion(uint256,uint256,(uint8,bool,uint16,address,bytes32,bytes32),bytes32[])"(
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _log: {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBlock: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proveL2MessageInclusion(
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _message: {
        txNumberInBlock: BigNumberish;
        sender: string;
        data: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "proveL2MessageInclusion(uint256,uint256,(uint16,address,bytes),bytes32[])"(
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _message: {
        txNumberInBlock: BigNumberish;
        sender: string;
        data: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestL2Transaction(
      _contractL2: string,
      _l2Value: BigNumberish,
      _calldata: BytesLike,
      _ergsLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "requestL2Transaction(address,uint256,bytes,uint256,bytes[])"(
      _contractL2: string,
      _l2Value: BigNumberish,
      _calldata: BytesLike,
      _ergsLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    serializeL2Transaction(
      _txId: BigNumberish,
      _l2Value: BigNumberish,
      _sender: string,
      _contractAddressL2: string,
      _calldata: BytesLike,
      _ergsLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "serializeL2Transaction(uint256,uint256,address,address,bytes,uint256,bytes[])"(
      _txId: BigNumberish,
      _l2Value: BigNumberish,
      _sender: string,
      _contractAddressL2: string,
      _calldata: BytesLike,
      _ergsLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    l2TransactionBaseCost(
      _gasPrice: BigNumberish,
      _ergsLimit: BigNumberish,
      _calldataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "l2TransactionBaseCost(uint256,uint256,uint32)"(
      _gasPrice: BigNumberish,
      _ergsLimit: BigNumberish,
      _calldataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proveL2LogInclusion(
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _log: {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBlock: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proveL2LogInclusion(uint256,uint256,(uint8,bool,uint16,address,bytes32,bytes32),bytes32[])"(
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _log: {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBlock: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proveL2MessageInclusion(
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _message: {
        txNumberInBlock: BigNumberish;
        sender: string;
        data: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proveL2MessageInclusion(uint256,uint256,(uint16,address,bytes),bytes32[])"(
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _message: {
        txNumberInBlock: BigNumberish;
        sender: string;
        data: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requestL2Transaction(
      _contractL2: string,
      _l2Value: BigNumberish,
      _calldata: BytesLike,
      _ergsLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "requestL2Transaction(address,uint256,bytes,uint256,bytes[])"(
      _contractL2: string,
      _l2Value: BigNumberish,
      _calldata: BytesLike,
      _ergsLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    serializeL2Transaction(
      _txId: BigNumberish,
      _l2Value: BigNumberish,
      _sender: string,
      _contractAddressL2: string,
      _calldata: BytesLike,
      _ergsLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "serializeL2Transaction(uint256,uint256,address,address,bytes,uint256,bytes[])"(
      _txId: BigNumberish,
      _l2Value: BigNumberish,
      _sender: string,
      _contractAddressL2: string,
      _calldata: BytesLike,
      _ergsLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
