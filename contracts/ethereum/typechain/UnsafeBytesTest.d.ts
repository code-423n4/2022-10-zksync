/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface UnsafeBytesTestInterface extends ethers.utils.Interface {
  functions: {
    "readAddress(bytes,uint256)": FunctionFragment;
    "readBytes32(bytes,uint256)": FunctionFragment;
    "readUint256(bytes,uint256)": FunctionFragment;
    "readUint32(bytes,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "readAddress",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "readBytes32",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "readUint256",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "readUint32",
    values: [BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "readAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readBytes32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readUint256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "readUint32", data: BytesLike): Result;

  events: {};
}

export class UnsafeBytesTest extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: UnsafeBytesTestInterface;

  functions: {
    readAddress(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      readValue: string;
      offset: BigNumber;
      0: string;
      1: BigNumber;
    }>;

    "readAddress(bytes,uint256)"(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      readValue: string;
      offset: BigNumber;
      0: string;
      1: BigNumber;
    }>;

    readBytes32(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      readValue: string;
      offset: BigNumber;
      0: string;
      1: BigNumber;
    }>;

    "readBytes32(bytes,uint256)"(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      readValue: string;
      offset: BigNumber;
      0: string;
      1: BigNumber;
    }>;

    readUint256(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      readValue: BigNumber;
      offset: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "readUint256(bytes,uint256)"(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      readValue: BigNumber;
      offset: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    readUint32(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      readValue: number;
      offset: BigNumber;
      0: number;
      1: BigNumber;
    }>;

    "readUint32(bytes,uint256)"(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      readValue: number;
      offset: BigNumber;
      0: number;
      1: BigNumber;
    }>;
  };

  readAddress(
    _bytes: BytesLike,
    _start: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    readValue: string;
    offset: BigNumber;
    0: string;
    1: BigNumber;
  }>;

  "readAddress(bytes,uint256)"(
    _bytes: BytesLike,
    _start: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    readValue: string;
    offset: BigNumber;
    0: string;
    1: BigNumber;
  }>;

  readBytes32(
    _bytes: BytesLike,
    _start: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    readValue: string;
    offset: BigNumber;
    0: string;
    1: BigNumber;
  }>;

  "readBytes32(bytes,uint256)"(
    _bytes: BytesLike,
    _start: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    readValue: string;
    offset: BigNumber;
    0: string;
    1: BigNumber;
  }>;

  readUint256(
    _bytes: BytesLike,
    _start: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    readValue: BigNumber;
    offset: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "readUint256(bytes,uint256)"(
    _bytes: BytesLike,
    _start: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    readValue: BigNumber;
    offset: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  readUint32(
    _bytes: BytesLike,
    _start: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    readValue: number;
    offset: BigNumber;
    0: number;
    1: BigNumber;
  }>;

  "readUint32(bytes,uint256)"(
    _bytes: BytesLike,
    _start: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    readValue: number;
    offset: BigNumber;
    0: number;
    1: BigNumber;
  }>;

  callStatic: {
    readAddress(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      readValue: string;
      offset: BigNumber;
      0: string;
      1: BigNumber;
    }>;

    "readAddress(bytes,uint256)"(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      readValue: string;
      offset: BigNumber;
      0: string;
      1: BigNumber;
    }>;

    readBytes32(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      readValue: string;
      offset: BigNumber;
      0: string;
      1: BigNumber;
    }>;

    "readBytes32(bytes,uint256)"(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      readValue: string;
      offset: BigNumber;
      0: string;
      1: BigNumber;
    }>;

    readUint256(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      readValue: BigNumber;
      offset: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "readUint256(bytes,uint256)"(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      readValue: BigNumber;
      offset: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    readUint32(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      readValue: number;
      offset: BigNumber;
      0: number;
      1: BigNumber;
    }>;

    "readUint32(bytes,uint256)"(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      readValue: number;
      offset: BigNumber;
      0: number;
      1: BigNumber;
    }>;
  };

  filters: {};

  estimateGas: {
    readAddress(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "readAddress(bytes,uint256)"(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    readBytes32(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "readBytes32(bytes,uint256)"(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    readUint256(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "readUint256(bytes,uint256)"(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    readUint32(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "readUint32(bytes,uint256)"(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    readAddress(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "readAddress(bytes,uint256)"(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    readBytes32(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "readBytes32(bytes,uint256)"(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    readUint256(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "readUint256(bytes,uint256)"(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    readUint32(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "readUint32(bytes,uint256)"(
      _bytes: BytesLike,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
