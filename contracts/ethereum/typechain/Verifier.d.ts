/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface VerifierInterface extends ethers.utils.Interface {
  functions: {
    "compute_powers_of_alpha(tuple)": FunctionFragment;
    "prepare_queries(tuple,tuple,tuple)": FunctionFragment;
    "rescue_custom_gate_linearization_contribution(tuple,tuple,tuple)": FunctionFragment;
    "verify_serialized_proof(uint256[],uint256[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "compute_powers_of_alpha",
    values: [
      {
        zero: { value: BigNumberish };
        alpha: { value: BigNumberish };
        beta: { value: BigNumberish };
        gamma: { value: BigNumberish };
        alpha_values: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        eta: { value: BigNumberish };
        beta_lookup: { value: BigNumberish };
        gamma_lookup: { value: BigNumberish };
        beta_plus_one: { value: BigNumberish };
        beta_gamma: { value: BigNumberish };
        v: { value: BigNumberish };
        u: { value: BigNumberish };
        z: { value: BigNumberish };
        z_omega: { value: BigNumberish };
        z_minus_last_omega: { value: BigNumberish };
        l_0_at_z: { value: BigNumberish };
        l_n_minus_one_at_z: { value: BigNumberish };
        t: { value: BigNumberish };
        tp: { X: BigNumberish; Y: BigNumberish };
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "prepare_queries",
    values: [
      {
        domain_size: BigNumberish;
        num_inputs: BigNumberish;
        omega: { value: BigNumberish };
        gate_selectors_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        gate_setup_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        permutation_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        lookup_selector_commitment: { X: BigNumberish; Y: BigNumberish };
        lookup_tables_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        lookup_table_type_commitment: { X: BigNumberish; Y: BigNumberish };
        non_residues: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        g2_elements: [
          { X: [BigNumberish, BigNumberish]; Y: [BigNumberish, BigNumberish] },
          { X: [BigNumberish, BigNumberish]; Y: [BigNumberish, BigNumberish] }
        ];
      },
      {
        input_values: BigNumberish[];
        state_polys_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_grand_product_commitment: {
          X: BigNumberish;
          Y: BigNumberish;
        };
        quotient_poly_parts_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        state_polys_openings_at_z: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        state_polys_openings_at_z_omega: [{ value: BigNumberish }];
        gate_selectors_openings_at_z: [{ value: BigNumberish }];
        copy_permutation_polys_openings_at_z: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        copy_permutation_grand_product_opening_at_z_omega: {
          value: BigNumberish;
        };
        quotient_poly_opening_at_z: { value: BigNumberish };
        linearization_poly_opening_at_z: { value: BigNumberish };
        lookup_s_poly_commitment: { X: BigNumberish; Y: BigNumberish };
        lookup_grand_product_commitment: { X: BigNumberish; Y: BigNumberish };
        lookup_s_poly_opening_at_z_omega: { value: BigNumberish };
        lookup_grand_product_opening_at_z_omega: { value: BigNumberish };
        lookup_t_poly_opening_at_z: { value: BigNumberish };
        lookup_t_poly_opening_at_z_omega: { value: BigNumberish };
        lookup_selector_poly_opening_at_z: { value: BigNumberish };
        lookup_table_type_poly_opening_at_z: { value: BigNumberish };
        opening_proof_at_z: { X: BigNumberish; Y: BigNumberish };
        opening_proof_at_z_omega: { X: BigNumberish; Y: BigNumberish };
      },
      {
        zero: { value: BigNumberish };
        alpha: { value: BigNumberish };
        beta: { value: BigNumberish };
        gamma: { value: BigNumberish };
        alpha_values: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        eta: { value: BigNumberish };
        beta_lookup: { value: BigNumberish };
        gamma_lookup: { value: BigNumberish };
        beta_plus_one: { value: BigNumberish };
        beta_gamma: { value: BigNumberish };
        v: { value: BigNumberish };
        u: { value: BigNumberish };
        z: { value: BigNumberish };
        z_omega: { value: BigNumberish };
        z_minus_last_omega: { value: BigNumberish };
        l_0_at_z: { value: BigNumberish };
        l_n_minus_one_at_z: { value: BigNumberish };
        t: { value: BigNumberish };
        tp: { X: BigNumberish; Y: BigNumberish };
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rescue_custom_gate_linearization_contribution",
    values: [
      {
        domain_size: BigNumberish;
        num_inputs: BigNumberish;
        omega: { value: BigNumberish };
        gate_selectors_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        gate_setup_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        permutation_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        lookup_selector_commitment: { X: BigNumberish; Y: BigNumberish };
        lookup_tables_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        lookup_table_type_commitment: { X: BigNumberish; Y: BigNumberish };
        non_residues: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        g2_elements: [
          { X: [BigNumberish, BigNumberish]; Y: [BigNumberish, BigNumberish] },
          { X: [BigNumberish, BigNumberish]; Y: [BigNumberish, BigNumberish] }
        ];
      },
      {
        input_values: BigNumberish[];
        state_polys_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_grand_product_commitment: {
          X: BigNumberish;
          Y: BigNumberish;
        };
        quotient_poly_parts_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        state_polys_openings_at_z: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        state_polys_openings_at_z_omega: [{ value: BigNumberish }];
        gate_selectors_openings_at_z: [{ value: BigNumberish }];
        copy_permutation_polys_openings_at_z: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        copy_permutation_grand_product_opening_at_z_omega: {
          value: BigNumberish;
        };
        quotient_poly_opening_at_z: { value: BigNumberish };
        linearization_poly_opening_at_z: { value: BigNumberish };
        lookup_s_poly_commitment: { X: BigNumberish; Y: BigNumberish };
        lookup_grand_product_commitment: { X: BigNumberish; Y: BigNumberish };
        lookup_s_poly_opening_at_z_omega: { value: BigNumberish };
        lookup_grand_product_opening_at_z_omega: { value: BigNumberish };
        lookup_t_poly_opening_at_z: { value: BigNumberish };
        lookup_t_poly_opening_at_z_omega: { value: BigNumberish };
        lookup_selector_poly_opening_at_z: { value: BigNumberish };
        lookup_table_type_poly_opening_at_z: { value: BigNumberish };
        opening_proof_at_z: { X: BigNumberish; Y: BigNumberish };
        opening_proof_at_z_omega: { X: BigNumberish; Y: BigNumberish };
      },
      {
        zero: { value: BigNumberish };
        alpha: { value: BigNumberish };
        beta: { value: BigNumberish };
        gamma: { value: BigNumberish };
        alpha_values: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        eta: { value: BigNumberish };
        beta_lookup: { value: BigNumberish };
        gamma_lookup: { value: BigNumberish };
        beta_plus_one: { value: BigNumberish };
        beta_gamma: { value: BigNumberish };
        v: { value: BigNumberish };
        u: { value: BigNumberish };
        z: { value: BigNumberish };
        z_omega: { value: BigNumberish };
        z_minus_last_omega: { value: BigNumberish };
        l_0_at_z: { value: BigNumberish };
        l_n_minus_one_at_z: { value: BigNumberish };
        t: { value: BigNumberish };
        tp: { X: BigNumberish; Y: BigNumberish };
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verify_serialized_proof",
    values: [BigNumberish[], BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "compute_powers_of_alpha",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prepare_queries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rescue_custom_gate_linearization_contribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verify_serialized_proof",
    data: BytesLike
  ): Result;

  events: {};
}

export class Verifier extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: VerifierInterface;

  functions: {
    compute_powers_of_alpha(
      state: {
        zero: { value: BigNumberish };
        alpha: { value: BigNumberish };
        beta: { value: BigNumberish };
        gamma: { value: BigNumberish };
        alpha_values: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        eta: { value: BigNumberish };
        beta_lookup: { value: BigNumberish };
        gamma_lookup: { value: BigNumberish };
        beta_plus_one: { value: BigNumberish };
        beta_gamma: { value: BigNumberish };
        v: { value: BigNumberish };
        u: { value: BigNumberish };
        z: { value: BigNumberish };
        z_omega: { value: BigNumberish };
        z_minus_last_omega: { value: BigNumberish };
        l_0_at_z: { value: BigNumberish };
        l_n_minus_one_at_z: { value: BigNumberish };
        t: { value: BigNumberish };
        tp: { X: BigNumberish; Y: BigNumberish };
      },
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    "compute_powers_of_alpha(((uint256),(uint256),(uint256),(uint256),tuple[9],(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256,uint256)))"(
      state: {
        zero: { value: BigNumberish };
        alpha: { value: BigNumberish };
        beta: { value: BigNumberish };
        gamma: { value: BigNumberish };
        alpha_values: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        eta: { value: BigNumberish };
        beta_lookup: { value: BigNumberish };
        gamma_lookup: { value: BigNumberish };
        beta_plus_one: { value: BigNumberish };
        beta_gamma: { value: BigNumberish };
        v: { value: BigNumberish };
        u: { value: BigNumberish };
        z: { value: BigNumberish };
        z_omega: { value: BigNumberish };
        z_minus_last_omega: { value: BigNumberish };
        l_0_at_z: { value: BigNumberish };
        l_n_minus_one_at_z: { value: BigNumberish };
        t: { value: BigNumberish };
        tp: { X: BigNumberish; Y: BigNumberish };
      },
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    prepare_queries(
      vk: {
        domain_size: BigNumberish;
        num_inputs: BigNumberish;
        omega: { value: BigNumberish };
        gate_selectors_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        gate_setup_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        permutation_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        lookup_selector_commitment: { X: BigNumberish; Y: BigNumberish };
        lookup_tables_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        lookup_table_type_commitment: { X: BigNumberish; Y: BigNumberish };
        non_residues: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        g2_elements: [
          { X: [BigNumberish, BigNumberish]; Y: [BigNumberish, BigNumberish] },
          { X: [BigNumberish, BigNumberish]; Y: [BigNumberish, BigNumberish] }
        ];
      },
      proof: {
        input_values: BigNumberish[];
        state_polys_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_grand_product_commitment: {
          X: BigNumberish;
          Y: BigNumberish;
        };
        quotient_poly_parts_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        state_polys_openings_at_z: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        state_polys_openings_at_z_omega: [{ value: BigNumberish }];
        gate_selectors_openings_at_z: [{ value: BigNumberish }];
        copy_permutation_polys_openings_at_z: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        copy_permutation_grand_product_opening_at_z_omega: {
          value: BigNumberish;
        };
        quotient_poly_opening_at_z: { value: BigNumberish };
        linearization_poly_opening_at_z: { value: BigNumberish };
        lookup_s_poly_commitment: { X: BigNumberish; Y: BigNumberish };
        lookup_grand_product_commitment: { X: BigNumberish; Y: BigNumberish };
        lookup_s_poly_opening_at_z_omega: { value: BigNumberish };
        lookup_grand_product_opening_at_z_omega: { value: BigNumberish };
        lookup_t_poly_opening_at_z: { value: BigNumberish };
        lookup_t_poly_opening_at_z_omega: { value: BigNumberish };
        lookup_selector_poly_opening_at_z: { value: BigNumberish };
        lookup_table_type_poly_opening_at_z: { value: BigNumberish };
        opening_proof_at_z: { X: BigNumberish; Y: BigNumberish };
        opening_proof_at_z_omega: { X: BigNumberish; Y: BigNumberish };
      },
      state: {
        zero: { value: BigNumberish };
        alpha: { value: BigNumberish };
        beta: { value: BigNumberish };
        gamma: { value: BigNumberish };
        alpha_values: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        eta: { value: BigNumberish };
        beta_lookup: { value: BigNumberish };
        gamma_lookup: { value: BigNumberish };
        beta_plus_one: { value: BigNumberish };
        beta_gamma: { value: BigNumberish };
        v: { value: BigNumberish };
        u: { value: BigNumberish };
        z: { value: BigNumberish };
        z_omega: { value: BigNumberish };
        z_minus_last_omega: { value: BigNumberish };
        l_0_at_z: { value: BigNumberish };
        l_n_minus_one_at_z: { value: BigNumberish };
        t: { value: BigNumberish };
        tp: { X: BigNumberish; Y: BigNumberish };
      },
      overrides?: CallOverrides
    ): Promise<{
      queries: {
        commitments_at_z: [
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber }
        ];
        values_at_z: [
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber }
        ];
        commitments_at_z_omega: [
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber }
        ];
        values_at_z_omega: [
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber }
        ];
        0: [
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber }
        ];
        1: [
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber }
        ];
        2: [
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber }
        ];
        3: [
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber }
        ];
      };
      0: {
        commitments_at_z: [
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber }
        ];
        values_at_z: [
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber }
        ];
        commitments_at_z_omega: [
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber }
        ];
        values_at_z_omega: [
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber }
        ];
        0: [
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber }
        ];
        1: [
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber }
        ];
        2: [
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber }
        ];
        3: [
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber }
        ];
      };
    }>;

    "prepare_queries((uint256,uint256,(uint256),tuple[2],tuple[8],tuple[4],(uint256,uint256),tuple[4],(uint256,uint256),tuple[3],tuple[2]),(uint256[],tuple[4],(uint256,uint256),tuple[4],tuple[4],tuple[1],tuple[1],tuple[3],(uint256),(uint256),(uint256),(uint256,uint256),(uint256,uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256,uint256),(uint256,uint256)),((uint256),(uint256),(uint256),(uint256),tuple[9],(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256,uint256)))"(
      vk: {
        domain_size: BigNumberish;
        num_inputs: BigNumberish;
        omega: { value: BigNumberish };
        gate_selectors_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        gate_setup_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        permutation_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        lookup_selector_commitment: { X: BigNumberish; Y: BigNumberish };
        lookup_tables_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        lookup_table_type_commitment: { X: BigNumberish; Y: BigNumberish };
        non_residues: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        g2_elements: [
          { X: [BigNumberish, BigNumberish]; Y: [BigNumberish, BigNumberish] },
          { X: [BigNumberish, BigNumberish]; Y: [BigNumberish, BigNumberish] }
        ];
      },
      proof: {
        input_values: BigNumberish[];
        state_polys_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_grand_product_commitment: {
          X: BigNumberish;
          Y: BigNumberish;
        };
        quotient_poly_parts_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        state_polys_openings_at_z: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        state_polys_openings_at_z_omega: [{ value: BigNumberish }];
        gate_selectors_openings_at_z: [{ value: BigNumberish }];
        copy_permutation_polys_openings_at_z: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        copy_permutation_grand_product_opening_at_z_omega: {
          value: BigNumberish;
        };
        quotient_poly_opening_at_z: { value: BigNumberish };
        linearization_poly_opening_at_z: { value: BigNumberish };
        lookup_s_poly_commitment: { X: BigNumberish; Y: BigNumberish };
        lookup_grand_product_commitment: { X: BigNumberish; Y: BigNumberish };
        lookup_s_poly_opening_at_z_omega: { value: BigNumberish };
        lookup_grand_product_opening_at_z_omega: { value: BigNumberish };
        lookup_t_poly_opening_at_z: { value: BigNumberish };
        lookup_t_poly_opening_at_z_omega: { value: BigNumberish };
        lookup_selector_poly_opening_at_z: { value: BigNumberish };
        lookup_table_type_poly_opening_at_z: { value: BigNumberish };
        opening_proof_at_z: { X: BigNumberish; Y: BigNumberish };
        opening_proof_at_z_omega: { X: BigNumberish; Y: BigNumberish };
      },
      state: {
        zero: { value: BigNumberish };
        alpha: { value: BigNumberish };
        beta: { value: BigNumberish };
        gamma: { value: BigNumberish };
        alpha_values: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        eta: { value: BigNumberish };
        beta_lookup: { value: BigNumberish };
        gamma_lookup: { value: BigNumberish };
        beta_plus_one: { value: BigNumberish };
        beta_gamma: { value: BigNumberish };
        v: { value: BigNumberish };
        u: { value: BigNumberish };
        z: { value: BigNumberish };
        z_omega: { value: BigNumberish };
        z_minus_last_omega: { value: BigNumberish };
        l_0_at_z: { value: BigNumberish };
        l_n_minus_one_at_z: { value: BigNumberish };
        t: { value: BigNumberish };
        tp: { X: BigNumberish; Y: BigNumberish };
      },
      overrides?: CallOverrides
    ): Promise<{
      queries: {
        commitments_at_z: [
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber }
        ];
        values_at_z: [
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber }
        ];
        commitments_at_z_omega: [
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber }
        ];
        values_at_z_omega: [
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber }
        ];
        0: [
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber }
        ];
        1: [
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber }
        ];
        2: [
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber }
        ];
        3: [
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber }
        ];
      };
      0: {
        commitments_at_z: [
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber }
        ];
        values_at_z: [
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber }
        ];
        commitments_at_z_omega: [
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber }
        ];
        values_at_z_omega: [
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber }
        ];
        0: [
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber }
        ];
        1: [
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber }
        ];
        2: [
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
          { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber }
        ];
        3: [
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber },
          { value: BigNumber; 0: BigNumber }
        ];
      };
    }>;

    rescue_custom_gate_linearization_contribution(
      vk: {
        domain_size: BigNumberish;
        num_inputs: BigNumberish;
        omega: { value: BigNumberish };
        gate_selectors_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        gate_setup_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        permutation_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        lookup_selector_commitment: { X: BigNumberish; Y: BigNumberish };
        lookup_tables_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        lookup_table_type_commitment: { X: BigNumberish; Y: BigNumberish };
        non_residues: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        g2_elements: [
          { X: [BigNumberish, BigNumberish]; Y: [BigNumberish, BigNumberish] },
          { X: [BigNumberish, BigNumberish]; Y: [BigNumberish, BigNumberish] }
        ];
      },
      proof: {
        input_values: BigNumberish[];
        state_polys_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_grand_product_commitment: {
          X: BigNumberish;
          Y: BigNumberish;
        };
        quotient_poly_parts_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        state_polys_openings_at_z: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        state_polys_openings_at_z_omega: [{ value: BigNumberish }];
        gate_selectors_openings_at_z: [{ value: BigNumberish }];
        copy_permutation_polys_openings_at_z: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        copy_permutation_grand_product_opening_at_z_omega: {
          value: BigNumberish;
        };
        quotient_poly_opening_at_z: { value: BigNumberish };
        linearization_poly_opening_at_z: { value: BigNumberish };
        lookup_s_poly_commitment: { X: BigNumberish; Y: BigNumberish };
        lookup_grand_product_commitment: { X: BigNumberish; Y: BigNumberish };
        lookup_s_poly_opening_at_z_omega: { value: BigNumberish };
        lookup_grand_product_opening_at_z_omega: { value: BigNumberish };
        lookup_t_poly_opening_at_z: { value: BigNumberish };
        lookup_t_poly_opening_at_z_omega: { value: BigNumberish };
        lookup_selector_poly_opening_at_z: { value: BigNumberish };
        lookup_table_type_poly_opening_at_z: { value: BigNumberish };
        opening_proof_at_z: { X: BigNumberish; Y: BigNumberish };
        opening_proof_at_z_omega: { X: BigNumberish; Y: BigNumberish };
      },
      state: {
        zero: { value: BigNumberish };
        alpha: { value: BigNumberish };
        beta: { value: BigNumberish };
        gamma: { value: BigNumberish };
        alpha_values: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        eta: { value: BigNumberish };
        beta_lookup: { value: BigNumberish };
        gamma_lookup: { value: BigNumberish };
        beta_plus_one: { value: BigNumberish };
        beta_gamma: { value: BigNumberish };
        v: { value: BigNumberish };
        u: { value: BigNumberish };
        z: { value: BigNumberish };
        z_omega: { value: BigNumberish };
        z_minus_last_omega: { value: BigNumberish };
        l_0_at_z: { value: BigNumberish };
        l_n_minus_one_at_z: { value: BigNumberish };
        t: { value: BigNumberish };
        tp: { X: BigNumberish; Y: BigNumberish };
      },
      overrides?: CallOverrides
    ): Promise<{
      result: { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber };
      0: { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber };
    }>;

    "rescue_custom_gate_linearization_contribution((uint256,uint256,(uint256),tuple[2],tuple[8],tuple[4],(uint256,uint256),tuple[4],(uint256,uint256),tuple[3],tuple[2]),(uint256[],tuple[4],(uint256,uint256),tuple[4],tuple[4],tuple[1],tuple[1],tuple[3],(uint256),(uint256),(uint256),(uint256,uint256),(uint256,uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256,uint256),(uint256,uint256)),((uint256),(uint256),(uint256),(uint256),tuple[9],(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256,uint256)))"(
      vk: {
        domain_size: BigNumberish;
        num_inputs: BigNumberish;
        omega: { value: BigNumberish };
        gate_selectors_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        gate_setup_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        permutation_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        lookup_selector_commitment: { X: BigNumberish; Y: BigNumberish };
        lookup_tables_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        lookup_table_type_commitment: { X: BigNumberish; Y: BigNumberish };
        non_residues: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        g2_elements: [
          { X: [BigNumberish, BigNumberish]; Y: [BigNumberish, BigNumberish] },
          { X: [BigNumberish, BigNumberish]; Y: [BigNumberish, BigNumberish] }
        ];
      },
      proof: {
        input_values: BigNumberish[];
        state_polys_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_grand_product_commitment: {
          X: BigNumberish;
          Y: BigNumberish;
        };
        quotient_poly_parts_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        state_polys_openings_at_z: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        state_polys_openings_at_z_omega: [{ value: BigNumberish }];
        gate_selectors_openings_at_z: [{ value: BigNumberish }];
        copy_permutation_polys_openings_at_z: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        copy_permutation_grand_product_opening_at_z_omega: {
          value: BigNumberish;
        };
        quotient_poly_opening_at_z: { value: BigNumberish };
        linearization_poly_opening_at_z: { value: BigNumberish };
        lookup_s_poly_commitment: { X: BigNumberish; Y: BigNumberish };
        lookup_grand_product_commitment: { X: BigNumberish; Y: BigNumberish };
        lookup_s_poly_opening_at_z_omega: { value: BigNumberish };
        lookup_grand_product_opening_at_z_omega: { value: BigNumberish };
        lookup_t_poly_opening_at_z: { value: BigNumberish };
        lookup_t_poly_opening_at_z_omega: { value: BigNumberish };
        lookup_selector_poly_opening_at_z: { value: BigNumberish };
        lookup_table_type_poly_opening_at_z: { value: BigNumberish };
        opening_proof_at_z: { X: BigNumberish; Y: BigNumberish };
        opening_proof_at_z_omega: { X: BigNumberish; Y: BigNumberish };
      },
      state: {
        zero: { value: BigNumberish };
        alpha: { value: BigNumberish };
        beta: { value: BigNumberish };
        gamma: { value: BigNumberish };
        alpha_values: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        eta: { value: BigNumberish };
        beta_lookup: { value: BigNumberish };
        gamma_lookup: { value: BigNumberish };
        beta_plus_one: { value: BigNumberish };
        beta_gamma: { value: BigNumberish };
        v: { value: BigNumberish };
        u: { value: BigNumberish };
        z: { value: BigNumberish };
        z_omega: { value: BigNumberish };
        z_minus_last_omega: { value: BigNumberish };
        l_0_at_z: { value: BigNumberish };
        l_n_minus_one_at_z: { value: BigNumberish };
        t: { value: BigNumberish };
        tp: { X: BigNumberish; Y: BigNumberish };
      },
      overrides?: CallOverrides
    ): Promise<{
      result: { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber };
      0: { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber };
    }>;

    verify_serialized_proof(
      public_inputs: BigNumberish[],
      serialized_proof: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "verify_serialized_proof(uint256[],uint256[])"(
      public_inputs: BigNumberish[],
      serialized_proof: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;
  };

  compute_powers_of_alpha(
    state: {
      zero: { value: BigNumberish };
      alpha: { value: BigNumberish };
      beta: { value: BigNumberish };
      gamma: { value: BigNumberish };
      alpha_values: [
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish }
      ];
      eta: { value: BigNumberish };
      beta_lookup: { value: BigNumberish };
      gamma_lookup: { value: BigNumberish };
      beta_plus_one: { value: BigNumberish };
      beta_gamma: { value: BigNumberish };
      v: { value: BigNumberish };
      u: { value: BigNumberish };
      z: { value: BigNumberish };
      z_omega: { value: BigNumberish };
      z_minus_last_omega: { value: BigNumberish };
      l_0_at_z: { value: BigNumberish };
      l_n_minus_one_at_z: { value: BigNumberish };
      t: { value: BigNumberish };
      tp: { X: BigNumberish; Y: BigNumberish };
    },
    overrides?: CallOverrides
  ): Promise<void>;

  "compute_powers_of_alpha(((uint256),(uint256),(uint256),(uint256),tuple[9],(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256,uint256)))"(
    state: {
      zero: { value: BigNumberish };
      alpha: { value: BigNumberish };
      beta: { value: BigNumberish };
      gamma: { value: BigNumberish };
      alpha_values: [
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish }
      ];
      eta: { value: BigNumberish };
      beta_lookup: { value: BigNumberish };
      gamma_lookup: { value: BigNumberish };
      beta_plus_one: { value: BigNumberish };
      beta_gamma: { value: BigNumberish };
      v: { value: BigNumberish };
      u: { value: BigNumberish };
      z: { value: BigNumberish };
      z_omega: { value: BigNumberish };
      z_minus_last_omega: { value: BigNumberish };
      l_0_at_z: { value: BigNumberish };
      l_n_minus_one_at_z: { value: BigNumberish };
      t: { value: BigNumberish };
      tp: { X: BigNumberish; Y: BigNumberish };
    },
    overrides?: CallOverrides
  ): Promise<void>;

  prepare_queries(
    vk: {
      domain_size: BigNumberish;
      num_inputs: BigNumberish;
      omega: { value: BigNumberish };
      gate_selectors_commitments: [
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish }
      ];
      gate_setup_commitments: [
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish }
      ];
      permutation_commitments: [
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish }
      ];
      lookup_selector_commitment: { X: BigNumberish; Y: BigNumberish };
      lookup_tables_commitments: [
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish }
      ];
      lookup_table_type_commitment: { X: BigNumberish; Y: BigNumberish };
      non_residues: [
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish }
      ];
      g2_elements: [
        { X: [BigNumberish, BigNumberish]; Y: [BigNumberish, BigNumberish] },
        { X: [BigNumberish, BigNumberish]; Y: [BigNumberish, BigNumberish] }
      ];
    },
    proof: {
      input_values: BigNumberish[];
      state_polys_commitments: [
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish }
      ];
      copy_permutation_grand_product_commitment: {
        X: BigNumberish;
        Y: BigNumberish;
      };
      quotient_poly_parts_commitments: [
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish }
      ];
      state_polys_openings_at_z: [
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish }
      ];
      state_polys_openings_at_z_omega: [{ value: BigNumberish }];
      gate_selectors_openings_at_z: [{ value: BigNumberish }];
      copy_permutation_polys_openings_at_z: [
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish }
      ];
      copy_permutation_grand_product_opening_at_z_omega: {
        value: BigNumberish;
      };
      quotient_poly_opening_at_z: { value: BigNumberish };
      linearization_poly_opening_at_z: { value: BigNumberish };
      lookup_s_poly_commitment: { X: BigNumberish; Y: BigNumberish };
      lookup_grand_product_commitment: { X: BigNumberish; Y: BigNumberish };
      lookup_s_poly_opening_at_z_omega: { value: BigNumberish };
      lookup_grand_product_opening_at_z_omega: { value: BigNumberish };
      lookup_t_poly_opening_at_z: { value: BigNumberish };
      lookup_t_poly_opening_at_z_omega: { value: BigNumberish };
      lookup_selector_poly_opening_at_z: { value: BigNumberish };
      lookup_table_type_poly_opening_at_z: { value: BigNumberish };
      opening_proof_at_z: { X: BigNumberish; Y: BigNumberish };
      opening_proof_at_z_omega: { X: BigNumberish; Y: BigNumberish };
    },
    state: {
      zero: { value: BigNumberish };
      alpha: { value: BigNumberish };
      beta: { value: BigNumberish };
      gamma: { value: BigNumberish };
      alpha_values: [
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish }
      ];
      eta: { value: BigNumberish };
      beta_lookup: { value: BigNumberish };
      gamma_lookup: { value: BigNumberish };
      beta_plus_one: { value: BigNumberish };
      beta_gamma: { value: BigNumberish };
      v: { value: BigNumberish };
      u: { value: BigNumberish };
      z: { value: BigNumberish };
      z_omega: { value: BigNumberish };
      z_minus_last_omega: { value: BigNumberish };
      l_0_at_z: { value: BigNumberish };
      l_n_minus_one_at_z: { value: BigNumberish };
      t: { value: BigNumberish };
      tp: { X: BigNumberish; Y: BigNumberish };
    },
    overrides?: CallOverrides
  ): Promise<{
    commitments_at_z: [
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber }
    ];
    values_at_z: [
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber }
    ];
    commitments_at_z_omega: [
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber }
    ];
    values_at_z_omega: [
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber }
    ];
    0: [
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber }
    ];
    1: [
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber }
    ];
    2: [
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber }
    ];
    3: [
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber }
    ];
  }>;

  "prepare_queries((uint256,uint256,(uint256),tuple[2],tuple[8],tuple[4],(uint256,uint256),tuple[4],(uint256,uint256),tuple[3],tuple[2]),(uint256[],tuple[4],(uint256,uint256),tuple[4],tuple[4],tuple[1],tuple[1],tuple[3],(uint256),(uint256),(uint256),(uint256,uint256),(uint256,uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256,uint256),(uint256,uint256)),((uint256),(uint256),(uint256),(uint256),tuple[9],(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256,uint256)))"(
    vk: {
      domain_size: BigNumberish;
      num_inputs: BigNumberish;
      omega: { value: BigNumberish };
      gate_selectors_commitments: [
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish }
      ];
      gate_setup_commitments: [
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish }
      ];
      permutation_commitments: [
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish }
      ];
      lookup_selector_commitment: { X: BigNumberish; Y: BigNumberish };
      lookup_tables_commitments: [
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish }
      ];
      lookup_table_type_commitment: { X: BigNumberish; Y: BigNumberish };
      non_residues: [
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish }
      ];
      g2_elements: [
        { X: [BigNumberish, BigNumberish]; Y: [BigNumberish, BigNumberish] },
        { X: [BigNumberish, BigNumberish]; Y: [BigNumberish, BigNumberish] }
      ];
    },
    proof: {
      input_values: BigNumberish[];
      state_polys_commitments: [
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish }
      ];
      copy_permutation_grand_product_commitment: {
        X: BigNumberish;
        Y: BigNumberish;
      };
      quotient_poly_parts_commitments: [
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish }
      ];
      state_polys_openings_at_z: [
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish }
      ];
      state_polys_openings_at_z_omega: [{ value: BigNumberish }];
      gate_selectors_openings_at_z: [{ value: BigNumberish }];
      copy_permutation_polys_openings_at_z: [
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish }
      ];
      copy_permutation_grand_product_opening_at_z_omega: {
        value: BigNumberish;
      };
      quotient_poly_opening_at_z: { value: BigNumberish };
      linearization_poly_opening_at_z: { value: BigNumberish };
      lookup_s_poly_commitment: { X: BigNumberish; Y: BigNumberish };
      lookup_grand_product_commitment: { X: BigNumberish; Y: BigNumberish };
      lookup_s_poly_opening_at_z_omega: { value: BigNumberish };
      lookup_grand_product_opening_at_z_omega: { value: BigNumberish };
      lookup_t_poly_opening_at_z: { value: BigNumberish };
      lookup_t_poly_opening_at_z_omega: { value: BigNumberish };
      lookup_selector_poly_opening_at_z: { value: BigNumberish };
      lookup_table_type_poly_opening_at_z: { value: BigNumberish };
      opening_proof_at_z: { X: BigNumberish; Y: BigNumberish };
      opening_proof_at_z_omega: { X: BigNumberish; Y: BigNumberish };
    },
    state: {
      zero: { value: BigNumberish };
      alpha: { value: BigNumberish };
      beta: { value: BigNumberish };
      gamma: { value: BigNumberish };
      alpha_values: [
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish }
      ];
      eta: { value: BigNumberish };
      beta_lookup: { value: BigNumberish };
      gamma_lookup: { value: BigNumberish };
      beta_plus_one: { value: BigNumberish };
      beta_gamma: { value: BigNumberish };
      v: { value: BigNumberish };
      u: { value: BigNumberish };
      z: { value: BigNumberish };
      z_omega: { value: BigNumberish };
      z_minus_last_omega: { value: BigNumberish };
      l_0_at_z: { value: BigNumberish };
      l_n_minus_one_at_z: { value: BigNumberish };
      t: { value: BigNumberish };
      tp: { X: BigNumberish; Y: BigNumberish };
    },
    overrides?: CallOverrides
  ): Promise<{
    commitments_at_z: [
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber }
    ];
    values_at_z: [
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber }
    ];
    commitments_at_z_omega: [
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber }
    ];
    values_at_z_omega: [
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber }
    ];
    0: [
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber }
    ];
    1: [
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber }
    ];
    2: [
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
      { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber }
    ];
    3: [
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber },
      { value: BigNumber; 0: BigNumber }
    ];
  }>;

  rescue_custom_gate_linearization_contribution(
    vk: {
      domain_size: BigNumberish;
      num_inputs: BigNumberish;
      omega: { value: BigNumberish };
      gate_selectors_commitments: [
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish }
      ];
      gate_setup_commitments: [
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish }
      ];
      permutation_commitments: [
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish }
      ];
      lookup_selector_commitment: { X: BigNumberish; Y: BigNumberish };
      lookup_tables_commitments: [
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish }
      ];
      lookup_table_type_commitment: { X: BigNumberish; Y: BigNumberish };
      non_residues: [
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish }
      ];
      g2_elements: [
        { X: [BigNumberish, BigNumberish]; Y: [BigNumberish, BigNumberish] },
        { X: [BigNumberish, BigNumberish]; Y: [BigNumberish, BigNumberish] }
      ];
    },
    proof: {
      input_values: BigNumberish[];
      state_polys_commitments: [
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish }
      ];
      copy_permutation_grand_product_commitment: {
        X: BigNumberish;
        Y: BigNumberish;
      };
      quotient_poly_parts_commitments: [
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish }
      ];
      state_polys_openings_at_z: [
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish }
      ];
      state_polys_openings_at_z_omega: [{ value: BigNumberish }];
      gate_selectors_openings_at_z: [{ value: BigNumberish }];
      copy_permutation_polys_openings_at_z: [
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish }
      ];
      copy_permutation_grand_product_opening_at_z_omega: {
        value: BigNumberish;
      };
      quotient_poly_opening_at_z: { value: BigNumberish };
      linearization_poly_opening_at_z: { value: BigNumberish };
      lookup_s_poly_commitment: { X: BigNumberish; Y: BigNumberish };
      lookup_grand_product_commitment: { X: BigNumberish; Y: BigNumberish };
      lookup_s_poly_opening_at_z_omega: { value: BigNumberish };
      lookup_grand_product_opening_at_z_omega: { value: BigNumberish };
      lookup_t_poly_opening_at_z: { value: BigNumberish };
      lookup_t_poly_opening_at_z_omega: { value: BigNumberish };
      lookup_selector_poly_opening_at_z: { value: BigNumberish };
      lookup_table_type_poly_opening_at_z: { value: BigNumberish };
      opening_proof_at_z: { X: BigNumberish; Y: BigNumberish };
      opening_proof_at_z_omega: { X: BigNumberish; Y: BigNumberish };
    },
    state: {
      zero: { value: BigNumberish };
      alpha: { value: BigNumberish };
      beta: { value: BigNumberish };
      gamma: { value: BigNumberish };
      alpha_values: [
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish }
      ];
      eta: { value: BigNumberish };
      beta_lookup: { value: BigNumberish };
      gamma_lookup: { value: BigNumberish };
      beta_plus_one: { value: BigNumberish };
      beta_gamma: { value: BigNumberish };
      v: { value: BigNumberish };
      u: { value: BigNumberish };
      z: { value: BigNumberish };
      z_omega: { value: BigNumberish };
      z_minus_last_omega: { value: BigNumberish };
      l_0_at_z: { value: BigNumberish };
      l_n_minus_one_at_z: { value: BigNumberish };
      t: { value: BigNumberish };
      tp: { X: BigNumberish; Y: BigNumberish };
    },
    overrides?: CallOverrides
  ): Promise<{ X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber }>;

  "rescue_custom_gate_linearization_contribution((uint256,uint256,(uint256),tuple[2],tuple[8],tuple[4],(uint256,uint256),tuple[4],(uint256,uint256),tuple[3],tuple[2]),(uint256[],tuple[4],(uint256,uint256),tuple[4],tuple[4],tuple[1],tuple[1],tuple[3],(uint256),(uint256),(uint256),(uint256,uint256),(uint256,uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256,uint256),(uint256,uint256)),((uint256),(uint256),(uint256),(uint256),tuple[9],(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256,uint256)))"(
    vk: {
      domain_size: BigNumberish;
      num_inputs: BigNumberish;
      omega: { value: BigNumberish };
      gate_selectors_commitments: [
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish }
      ];
      gate_setup_commitments: [
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish }
      ];
      permutation_commitments: [
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish }
      ];
      lookup_selector_commitment: { X: BigNumberish; Y: BigNumberish };
      lookup_tables_commitments: [
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish }
      ];
      lookup_table_type_commitment: { X: BigNumberish; Y: BigNumberish };
      non_residues: [
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish }
      ];
      g2_elements: [
        { X: [BigNumberish, BigNumberish]; Y: [BigNumberish, BigNumberish] },
        { X: [BigNumberish, BigNumberish]; Y: [BigNumberish, BigNumberish] }
      ];
    },
    proof: {
      input_values: BigNumberish[];
      state_polys_commitments: [
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish }
      ];
      copy_permutation_grand_product_commitment: {
        X: BigNumberish;
        Y: BigNumberish;
      };
      quotient_poly_parts_commitments: [
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish }
      ];
      state_polys_openings_at_z: [
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish }
      ];
      state_polys_openings_at_z_omega: [{ value: BigNumberish }];
      gate_selectors_openings_at_z: [{ value: BigNumberish }];
      copy_permutation_polys_openings_at_z: [
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish }
      ];
      copy_permutation_grand_product_opening_at_z_omega: {
        value: BigNumberish;
      };
      quotient_poly_opening_at_z: { value: BigNumberish };
      linearization_poly_opening_at_z: { value: BigNumberish };
      lookup_s_poly_commitment: { X: BigNumberish; Y: BigNumberish };
      lookup_grand_product_commitment: { X: BigNumberish; Y: BigNumberish };
      lookup_s_poly_opening_at_z_omega: { value: BigNumberish };
      lookup_grand_product_opening_at_z_omega: { value: BigNumberish };
      lookup_t_poly_opening_at_z: { value: BigNumberish };
      lookup_t_poly_opening_at_z_omega: { value: BigNumberish };
      lookup_selector_poly_opening_at_z: { value: BigNumberish };
      lookup_table_type_poly_opening_at_z: { value: BigNumberish };
      opening_proof_at_z: { X: BigNumberish; Y: BigNumberish };
      opening_proof_at_z_omega: { X: BigNumberish; Y: BigNumberish };
    },
    state: {
      zero: { value: BigNumberish };
      alpha: { value: BigNumberish };
      beta: { value: BigNumberish };
      gamma: { value: BigNumberish };
      alpha_values: [
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish }
      ];
      eta: { value: BigNumberish };
      beta_lookup: { value: BigNumberish };
      gamma_lookup: { value: BigNumberish };
      beta_plus_one: { value: BigNumberish };
      beta_gamma: { value: BigNumberish };
      v: { value: BigNumberish };
      u: { value: BigNumberish };
      z: { value: BigNumberish };
      z_omega: { value: BigNumberish };
      z_minus_last_omega: { value: BigNumberish };
      l_0_at_z: { value: BigNumberish };
      l_n_minus_one_at_z: { value: BigNumberish };
      t: { value: BigNumberish };
      tp: { X: BigNumberish; Y: BigNumberish };
    },
    overrides?: CallOverrides
  ): Promise<{ X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber }>;

  verify_serialized_proof(
    public_inputs: BigNumberish[],
    serialized_proof: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  "verify_serialized_proof(uint256[],uint256[])"(
    public_inputs: BigNumberish[],
    serialized_proof: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    compute_powers_of_alpha(
      state: {
        zero: { value: BigNumberish };
        alpha: { value: BigNumberish };
        beta: { value: BigNumberish };
        gamma: { value: BigNumberish };
        alpha_values: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        eta: { value: BigNumberish };
        beta_lookup: { value: BigNumberish };
        gamma_lookup: { value: BigNumberish };
        beta_plus_one: { value: BigNumberish };
        beta_gamma: { value: BigNumberish };
        v: { value: BigNumberish };
        u: { value: BigNumberish };
        z: { value: BigNumberish };
        z_omega: { value: BigNumberish };
        z_minus_last_omega: { value: BigNumberish };
        l_0_at_z: { value: BigNumberish };
        l_n_minus_one_at_z: { value: BigNumberish };
        t: { value: BigNumberish };
        tp: { X: BigNumberish; Y: BigNumberish };
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "compute_powers_of_alpha(((uint256),(uint256),(uint256),(uint256),tuple[9],(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256,uint256)))"(
      state: {
        zero: { value: BigNumberish };
        alpha: { value: BigNumberish };
        beta: { value: BigNumberish };
        gamma: { value: BigNumberish };
        alpha_values: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        eta: { value: BigNumberish };
        beta_lookup: { value: BigNumberish };
        gamma_lookup: { value: BigNumberish };
        beta_plus_one: { value: BigNumberish };
        beta_gamma: { value: BigNumberish };
        v: { value: BigNumberish };
        u: { value: BigNumberish };
        z: { value: BigNumberish };
        z_omega: { value: BigNumberish };
        z_minus_last_omega: { value: BigNumberish };
        l_0_at_z: { value: BigNumberish };
        l_n_minus_one_at_z: { value: BigNumberish };
        t: { value: BigNumberish };
        tp: { X: BigNumberish; Y: BigNumberish };
      },
      overrides?: CallOverrides
    ): Promise<void>;

    prepare_queries(
      vk: {
        domain_size: BigNumberish;
        num_inputs: BigNumberish;
        omega: { value: BigNumberish };
        gate_selectors_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        gate_setup_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        permutation_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        lookup_selector_commitment: { X: BigNumberish; Y: BigNumberish };
        lookup_tables_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        lookup_table_type_commitment: { X: BigNumberish; Y: BigNumberish };
        non_residues: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        g2_elements: [
          { X: [BigNumberish, BigNumberish]; Y: [BigNumberish, BigNumberish] },
          { X: [BigNumberish, BigNumberish]; Y: [BigNumberish, BigNumberish] }
        ];
      },
      proof: {
        input_values: BigNumberish[];
        state_polys_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_grand_product_commitment: {
          X: BigNumberish;
          Y: BigNumberish;
        };
        quotient_poly_parts_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        state_polys_openings_at_z: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        state_polys_openings_at_z_omega: [{ value: BigNumberish }];
        gate_selectors_openings_at_z: [{ value: BigNumberish }];
        copy_permutation_polys_openings_at_z: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        copy_permutation_grand_product_opening_at_z_omega: {
          value: BigNumberish;
        };
        quotient_poly_opening_at_z: { value: BigNumberish };
        linearization_poly_opening_at_z: { value: BigNumberish };
        lookup_s_poly_commitment: { X: BigNumberish; Y: BigNumberish };
        lookup_grand_product_commitment: { X: BigNumberish; Y: BigNumberish };
        lookup_s_poly_opening_at_z_omega: { value: BigNumberish };
        lookup_grand_product_opening_at_z_omega: { value: BigNumberish };
        lookup_t_poly_opening_at_z: { value: BigNumberish };
        lookup_t_poly_opening_at_z_omega: { value: BigNumberish };
        lookup_selector_poly_opening_at_z: { value: BigNumberish };
        lookup_table_type_poly_opening_at_z: { value: BigNumberish };
        opening_proof_at_z: { X: BigNumberish; Y: BigNumberish };
        opening_proof_at_z_omega: { X: BigNumberish; Y: BigNumberish };
      },
      state: {
        zero: { value: BigNumberish };
        alpha: { value: BigNumberish };
        beta: { value: BigNumberish };
        gamma: { value: BigNumberish };
        alpha_values: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        eta: { value: BigNumberish };
        beta_lookup: { value: BigNumberish };
        gamma_lookup: { value: BigNumberish };
        beta_plus_one: { value: BigNumberish };
        beta_gamma: { value: BigNumberish };
        v: { value: BigNumberish };
        u: { value: BigNumberish };
        z: { value: BigNumberish };
        z_omega: { value: BigNumberish };
        z_minus_last_omega: { value: BigNumberish };
        l_0_at_z: { value: BigNumberish };
        l_n_minus_one_at_z: { value: BigNumberish };
        t: { value: BigNumberish };
        tp: { X: BigNumberish; Y: BigNumberish };
      },
      overrides?: CallOverrides
    ): Promise<{
      commitments_at_z: [
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber }
      ];
      values_at_z: [
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber }
      ];
      commitments_at_z_omega: [
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber }
      ];
      values_at_z_omega: [
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber }
      ];
      0: [
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber }
      ];
      1: [
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber }
      ];
      2: [
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber }
      ];
      3: [
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber }
      ];
    }>;

    "prepare_queries((uint256,uint256,(uint256),tuple[2],tuple[8],tuple[4],(uint256,uint256),tuple[4],(uint256,uint256),tuple[3],tuple[2]),(uint256[],tuple[4],(uint256,uint256),tuple[4],tuple[4],tuple[1],tuple[1],tuple[3],(uint256),(uint256),(uint256),(uint256,uint256),(uint256,uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256,uint256),(uint256,uint256)),((uint256),(uint256),(uint256),(uint256),tuple[9],(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256,uint256)))"(
      vk: {
        domain_size: BigNumberish;
        num_inputs: BigNumberish;
        omega: { value: BigNumberish };
        gate_selectors_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        gate_setup_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        permutation_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        lookup_selector_commitment: { X: BigNumberish; Y: BigNumberish };
        lookup_tables_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        lookup_table_type_commitment: { X: BigNumberish; Y: BigNumberish };
        non_residues: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        g2_elements: [
          { X: [BigNumberish, BigNumberish]; Y: [BigNumberish, BigNumberish] },
          { X: [BigNumberish, BigNumberish]; Y: [BigNumberish, BigNumberish] }
        ];
      },
      proof: {
        input_values: BigNumberish[];
        state_polys_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_grand_product_commitment: {
          X: BigNumberish;
          Y: BigNumberish;
        };
        quotient_poly_parts_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        state_polys_openings_at_z: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        state_polys_openings_at_z_omega: [{ value: BigNumberish }];
        gate_selectors_openings_at_z: [{ value: BigNumberish }];
        copy_permutation_polys_openings_at_z: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        copy_permutation_grand_product_opening_at_z_omega: {
          value: BigNumberish;
        };
        quotient_poly_opening_at_z: { value: BigNumberish };
        linearization_poly_opening_at_z: { value: BigNumberish };
        lookup_s_poly_commitment: { X: BigNumberish; Y: BigNumberish };
        lookup_grand_product_commitment: { X: BigNumberish; Y: BigNumberish };
        lookup_s_poly_opening_at_z_omega: { value: BigNumberish };
        lookup_grand_product_opening_at_z_omega: { value: BigNumberish };
        lookup_t_poly_opening_at_z: { value: BigNumberish };
        lookup_t_poly_opening_at_z_omega: { value: BigNumberish };
        lookup_selector_poly_opening_at_z: { value: BigNumberish };
        lookup_table_type_poly_opening_at_z: { value: BigNumberish };
        opening_proof_at_z: { X: BigNumberish; Y: BigNumberish };
        opening_proof_at_z_omega: { X: BigNumberish; Y: BigNumberish };
      },
      state: {
        zero: { value: BigNumberish };
        alpha: { value: BigNumberish };
        beta: { value: BigNumberish };
        gamma: { value: BigNumberish };
        alpha_values: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        eta: { value: BigNumberish };
        beta_lookup: { value: BigNumberish };
        gamma_lookup: { value: BigNumberish };
        beta_plus_one: { value: BigNumberish };
        beta_gamma: { value: BigNumberish };
        v: { value: BigNumberish };
        u: { value: BigNumberish };
        z: { value: BigNumberish };
        z_omega: { value: BigNumberish };
        z_minus_last_omega: { value: BigNumberish };
        l_0_at_z: { value: BigNumberish };
        l_n_minus_one_at_z: { value: BigNumberish };
        t: { value: BigNumberish };
        tp: { X: BigNumberish; Y: BigNumberish };
      },
      overrides?: CallOverrides
    ): Promise<{
      commitments_at_z: [
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber }
      ];
      values_at_z: [
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber }
      ];
      commitments_at_z_omega: [
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber }
      ];
      values_at_z_omega: [
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber }
      ];
      0: [
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber }
      ];
      1: [
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber }
      ];
      2: [
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber },
        { X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber }
      ];
      3: [
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber },
        { value: BigNumber; 0: BigNumber }
      ];
    }>;

    rescue_custom_gate_linearization_contribution(
      vk: {
        domain_size: BigNumberish;
        num_inputs: BigNumberish;
        omega: { value: BigNumberish };
        gate_selectors_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        gate_setup_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        permutation_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        lookup_selector_commitment: { X: BigNumberish; Y: BigNumberish };
        lookup_tables_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        lookup_table_type_commitment: { X: BigNumberish; Y: BigNumberish };
        non_residues: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        g2_elements: [
          { X: [BigNumberish, BigNumberish]; Y: [BigNumberish, BigNumberish] },
          { X: [BigNumberish, BigNumberish]; Y: [BigNumberish, BigNumberish] }
        ];
      },
      proof: {
        input_values: BigNumberish[];
        state_polys_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_grand_product_commitment: {
          X: BigNumberish;
          Y: BigNumberish;
        };
        quotient_poly_parts_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        state_polys_openings_at_z: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        state_polys_openings_at_z_omega: [{ value: BigNumberish }];
        gate_selectors_openings_at_z: [{ value: BigNumberish }];
        copy_permutation_polys_openings_at_z: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        copy_permutation_grand_product_opening_at_z_omega: {
          value: BigNumberish;
        };
        quotient_poly_opening_at_z: { value: BigNumberish };
        linearization_poly_opening_at_z: { value: BigNumberish };
        lookup_s_poly_commitment: { X: BigNumberish; Y: BigNumberish };
        lookup_grand_product_commitment: { X: BigNumberish; Y: BigNumberish };
        lookup_s_poly_opening_at_z_omega: { value: BigNumberish };
        lookup_grand_product_opening_at_z_omega: { value: BigNumberish };
        lookup_t_poly_opening_at_z: { value: BigNumberish };
        lookup_t_poly_opening_at_z_omega: { value: BigNumberish };
        lookup_selector_poly_opening_at_z: { value: BigNumberish };
        lookup_table_type_poly_opening_at_z: { value: BigNumberish };
        opening_proof_at_z: { X: BigNumberish; Y: BigNumberish };
        opening_proof_at_z_omega: { X: BigNumberish; Y: BigNumberish };
      },
      state: {
        zero: { value: BigNumberish };
        alpha: { value: BigNumberish };
        beta: { value: BigNumberish };
        gamma: { value: BigNumberish };
        alpha_values: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        eta: { value: BigNumberish };
        beta_lookup: { value: BigNumberish };
        gamma_lookup: { value: BigNumberish };
        beta_plus_one: { value: BigNumberish };
        beta_gamma: { value: BigNumberish };
        v: { value: BigNumberish };
        u: { value: BigNumberish };
        z: { value: BigNumberish };
        z_omega: { value: BigNumberish };
        z_minus_last_omega: { value: BigNumberish };
        l_0_at_z: { value: BigNumberish };
        l_n_minus_one_at_z: { value: BigNumberish };
        t: { value: BigNumberish };
        tp: { X: BigNumberish; Y: BigNumberish };
      },
      overrides?: CallOverrides
    ): Promise<{ X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber }>;

    "rescue_custom_gate_linearization_contribution((uint256,uint256,(uint256),tuple[2],tuple[8],tuple[4],(uint256,uint256),tuple[4],(uint256,uint256),tuple[3],tuple[2]),(uint256[],tuple[4],(uint256,uint256),tuple[4],tuple[4],tuple[1],tuple[1],tuple[3],(uint256),(uint256),(uint256),(uint256,uint256),(uint256,uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256,uint256),(uint256,uint256)),((uint256),(uint256),(uint256),(uint256),tuple[9],(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256,uint256)))"(
      vk: {
        domain_size: BigNumberish;
        num_inputs: BigNumberish;
        omega: { value: BigNumberish };
        gate_selectors_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        gate_setup_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        permutation_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        lookup_selector_commitment: { X: BigNumberish; Y: BigNumberish };
        lookup_tables_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        lookup_table_type_commitment: { X: BigNumberish; Y: BigNumberish };
        non_residues: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        g2_elements: [
          { X: [BigNumberish, BigNumberish]; Y: [BigNumberish, BigNumberish] },
          { X: [BigNumberish, BigNumberish]; Y: [BigNumberish, BigNumberish] }
        ];
      },
      proof: {
        input_values: BigNumberish[];
        state_polys_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_grand_product_commitment: {
          X: BigNumberish;
          Y: BigNumberish;
        };
        quotient_poly_parts_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        state_polys_openings_at_z: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        state_polys_openings_at_z_omega: [{ value: BigNumberish }];
        gate_selectors_openings_at_z: [{ value: BigNumberish }];
        copy_permutation_polys_openings_at_z: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        copy_permutation_grand_product_opening_at_z_omega: {
          value: BigNumberish;
        };
        quotient_poly_opening_at_z: { value: BigNumberish };
        linearization_poly_opening_at_z: { value: BigNumberish };
        lookup_s_poly_commitment: { X: BigNumberish; Y: BigNumberish };
        lookup_grand_product_commitment: { X: BigNumberish; Y: BigNumberish };
        lookup_s_poly_opening_at_z_omega: { value: BigNumberish };
        lookup_grand_product_opening_at_z_omega: { value: BigNumberish };
        lookup_t_poly_opening_at_z: { value: BigNumberish };
        lookup_t_poly_opening_at_z_omega: { value: BigNumberish };
        lookup_selector_poly_opening_at_z: { value: BigNumberish };
        lookup_table_type_poly_opening_at_z: { value: BigNumberish };
        opening_proof_at_z: { X: BigNumberish; Y: BigNumberish };
        opening_proof_at_z_omega: { X: BigNumberish; Y: BigNumberish };
      },
      state: {
        zero: { value: BigNumberish };
        alpha: { value: BigNumberish };
        beta: { value: BigNumberish };
        gamma: { value: BigNumberish };
        alpha_values: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        eta: { value: BigNumberish };
        beta_lookup: { value: BigNumberish };
        gamma_lookup: { value: BigNumberish };
        beta_plus_one: { value: BigNumberish };
        beta_gamma: { value: BigNumberish };
        v: { value: BigNumberish };
        u: { value: BigNumberish };
        z: { value: BigNumberish };
        z_omega: { value: BigNumberish };
        z_minus_last_omega: { value: BigNumberish };
        l_0_at_z: { value: BigNumberish };
        l_n_minus_one_at_z: { value: BigNumberish };
        t: { value: BigNumberish };
        tp: { X: BigNumberish; Y: BigNumberish };
      },
      overrides?: CallOverrides
    ): Promise<{ X: BigNumber; Y: BigNumber; 0: BigNumber; 1: BigNumber }>;

    verify_serialized_proof(
      public_inputs: BigNumberish[],
      serialized_proof: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "verify_serialized_proof(uint256[],uint256[])"(
      public_inputs: BigNumberish[],
      serialized_proof: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    compute_powers_of_alpha(
      state: {
        zero: { value: BigNumberish };
        alpha: { value: BigNumberish };
        beta: { value: BigNumberish };
        gamma: { value: BigNumberish };
        alpha_values: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        eta: { value: BigNumberish };
        beta_lookup: { value: BigNumberish };
        gamma_lookup: { value: BigNumberish };
        beta_plus_one: { value: BigNumberish };
        beta_gamma: { value: BigNumberish };
        v: { value: BigNumberish };
        u: { value: BigNumberish };
        z: { value: BigNumberish };
        z_omega: { value: BigNumberish };
        z_minus_last_omega: { value: BigNumberish };
        l_0_at_z: { value: BigNumberish };
        l_n_minus_one_at_z: { value: BigNumberish };
        t: { value: BigNumberish };
        tp: { X: BigNumberish; Y: BigNumberish };
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "compute_powers_of_alpha(((uint256),(uint256),(uint256),(uint256),tuple[9],(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256,uint256)))"(
      state: {
        zero: { value: BigNumberish };
        alpha: { value: BigNumberish };
        beta: { value: BigNumberish };
        gamma: { value: BigNumberish };
        alpha_values: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        eta: { value: BigNumberish };
        beta_lookup: { value: BigNumberish };
        gamma_lookup: { value: BigNumberish };
        beta_plus_one: { value: BigNumberish };
        beta_gamma: { value: BigNumberish };
        v: { value: BigNumberish };
        u: { value: BigNumberish };
        z: { value: BigNumberish };
        z_omega: { value: BigNumberish };
        z_minus_last_omega: { value: BigNumberish };
        l_0_at_z: { value: BigNumberish };
        l_n_minus_one_at_z: { value: BigNumberish };
        t: { value: BigNumberish };
        tp: { X: BigNumberish; Y: BigNumberish };
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prepare_queries(
      vk: {
        domain_size: BigNumberish;
        num_inputs: BigNumberish;
        omega: { value: BigNumberish };
        gate_selectors_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        gate_setup_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        permutation_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        lookup_selector_commitment: { X: BigNumberish; Y: BigNumberish };
        lookup_tables_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        lookup_table_type_commitment: { X: BigNumberish; Y: BigNumberish };
        non_residues: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        g2_elements: [
          { X: [BigNumberish, BigNumberish]; Y: [BigNumberish, BigNumberish] },
          { X: [BigNumberish, BigNumberish]; Y: [BigNumberish, BigNumberish] }
        ];
      },
      proof: {
        input_values: BigNumberish[];
        state_polys_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_grand_product_commitment: {
          X: BigNumberish;
          Y: BigNumberish;
        };
        quotient_poly_parts_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        state_polys_openings_at_z: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        state_polys_openings_at_z_omega: [{ value: BigNumberish }];
        gate_selectors_openings_at_z: [{ value: BigNumberish }];
        copy_permutation_polys_openings_at_z: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        copy_permutation_grand_product_opening_at_z_omega: {
          value: BigNumberish;
        };
        quotient_poly_opening_at_z: { value: BigNumberish };
        linearization_poly_opening_at_z: { value: BigNumberish };
        lookup_s_poly_commitment: { X: BigNumberish; Y: BigNumberish };
        lookup_grand_product_commitment: { X: BigNumberish; Y: BigNumberish };
        lookup_s_poly_opening_at_z_omega: { value: BigNumberish };
        lookup_grand_product_opening_at_z_omega: { value: BigNumberish };
        lookup_t_poly_opening_at_z: { value: BigNumberish };
        lookup_t_poly_opening_at_z_omega: { value: BigNumberish };
        lookup_selector_poly_opening_at_z: { value: BigNumberish };
        lookup_table_type_poly_opening_at_z: { value: BigNumberish };
        opening_proof_at_z: { X: BigNumberish; Y: BigNumberish };
        opening_proof_at_z_omega: { X: BigNumberish; Y: BigNumberish };
      },
      state: {
        zero: { value: BigNumberish };
        alpha: { value: BigNumberish };
        beta: { value: BigNumberish };
        gamma: { value: BigNumberish };
        alpha_values: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        eta: { value: BigNumberish };
        beta_lookup: { value: BigNumberish };
        gamma_lookup: { value: BigNumberish };
        beta_plus_one: { value: BigNumberish };
        beta_gamma: { value: BigNumberish };
        v: { value: BigNumberish };
        u: { value: BigNumberish };
        z: { value: BigNumberish };
        z_omega: { value: BigNumberish };
        z_minus_last_omega: { value: BigNumberish };
        l_0_at_z: { value: BigNumberish };
        l_n_minus_one_at_z: { value: BigNumberish };
        t: { value: BigNumberish };
        tp: { X: BigNumberish; Y: BigNumberish };
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "prepare_queries((uint256,uint256,(uint256),tuple[2],tuple[8],tuple[4],(uint256,uint256),tuple[4],(uint256,uint256),tuple[3],tuple[2]),(uint256[],tuple[4],(uint256,uint256),tuple[4],tuple[4],tuple[1],tuple[1],tuple[3],(uint256),(uint256),(uint256),(uint256,uint256),(uint256,uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256,uint256),(uint256,uint256)),((uint256),(uint256),(uint256),(uint256),tuple[9],(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256,uint256)))"(
      vk: {
        domain_size: BigNumberish;
        num_inputs: BigNumberish;
        omega: { value: BigNumberish };
        gate_selectors_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        gate_setup_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        permutation_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        lookup_selector_commitment: { X: BigNumberish; Y: BigNumberish };
        lookup_tables_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        lookup_table_type_commitment: { X: BigNumberish; Y: BigNumberish };
        non_residues: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        g2_elements: [
          { X: [BigNumberish, BigNumberish]; Y: [BigNumberish, BigNumberish] },
          { X: [BigNumberish, BigNumberish]; Y: [BigNumberish, BigNumberish] }
        ];
      },
      proof: {
        input_values: BigNumberish[];
        state_polys_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_grand_product_commitment: {
          X: BigNumberish;
          Y: BigNumberish;
        };
        quotient_poly_parts_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        state_polys_openings_at_z: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        state_polys_openings_at_z_omega: [{ value: BigNumberish }];
        gate_selectors_openings_at_z: [{ value: BigNumberish }];
        copy_permutation_polys_openings_at_z: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        copy_permutation_grand_product_opening_at_z_omega: {
          value: BigNumberish;
        };
        quotient_poly_opening_at_z: { value: BigNumberish };
        linearization_poly_opening_at_z: { value: BigNumberish };
        lookup_s_poly_commitment: { X: BigNumberish; Y: BigNumberish };
        lookup_grand_product_commitment: { X: BigNumberish; Y: BigNumberish };
        lookup_s_poly_opening_at_z_omega: { value: BigNumberish };
        lookup_grand_product_opening_at_z_omega: { value: BigNumberish };
        lookup_t_poly_opening_at_z: { value: BigNumberish };
        lookup_t_poly_opening_at_z_omega: { value: BigNumberish };
        lookup_selector_poly_opening_at_z: { value: BigNumberish };
        lookup_table_type_poly_opening_at_z: { value: BigNumberish };
        opening_proof_at_z: { X: BigNumberish; Y: BigNumberish };
        opening_proof_at_z_omega: { X: BigNumberish; Y: BigNumberish };
      },
      state: {
        zero: { value: BigNumberish };
        alpha: { value: BigNumberish };
        beta: { value: BigNumberish };
        gamma: { value: BigNumberish };
        alpha_values: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        eta: { value: BigNumberish };
        beta_lookup: { value: BigNumberish };
        gamma_lookup: { value: BigNumberish };
        beta_plus_one: { value: BigNumberish };
        beta_gamma: { value: BigNumberish };
        v: { value: BigNumberish };
        u: { value: BigNumberish };
        z: { value: BigNumberish };
        z_omega: { value: BigNumberish };
        z_minus_last_omega: { value: BigNumberish };
        l_0_at_z: { value: BigNumberish };
        l_n_minus_one_at_z: { value: BigNumberish };
        t: { value: BigNumberish };
        tp: { X: BigNumberish; Y: BigNumberish };
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rescue_custom_gate_linearization_contribution(
      vk: {
        domain_size: BigNumberish;
        num_inputs: BigNumberish;
        omega: { value: BigNumberish };
        gate_selectors_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        gate_setup_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        permutation_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        lookup_selector_commitment: { X: BigNumberish; Y: BigNumberish };
        lookup_tables_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        lookup_table_type_commitment: { X: BigNumberish; Y: BigNumberish };
        non_residues: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        g2_elements: [
          { X: [BigNumberish, BigNumberish]; Y: [BigNumberish, BigNumberish] },
          { X: [BigNumberish, BigNumberish]; Y: [BigNumberish, BigNumberish] }
        ];
      },
      proof: {
        input_values: BigNumberish[];
        state_polys_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_grand_product_commitment: {
          X: BigNumberish;
          Y: BigNumberish;
        };
        quotient_poly_parts_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        state_polys_openings_at_z: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        state_polys_openings_at_z_omega: [{ value: BigNumberish }];
        gate_selectors_openings_at_z: [{ value: BigNumberish }];
        copy_permutation_polys_openings_at_z: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        copy_permutation_grand_product_opening_at_z_omega: {
          value: BigNumberish;
        };
        quotient_poly_opening_at_z: { value: BigNumberish };
        linearization_poly_opening_at_z: { value: BigNumberish };
        lookup_s_poly_commitment: { X: BigNumberish; Y: BigNumberish };
        lookup_grand_product_commitment: { X: BigNumberish; Y: BigNumberish };
        lookup_s_poly_opening_at_z_omega: { value: BigNumberish };
        lookup_grand_product_opening_at_z_omega: { value: BigNumberish };
        lookup_t_poly_opening_at_z: { value: BigNumberish };
        lookup_t_poly_opening_at_z_omega: { value: BigNumberish };
        lookup_selector_poly_opening_at_z: { value: BigNumberish };
        lookup_table_type_poly_opening_at_z: { value: BigNumberish };
        opening_proof_at_z: { X: BigNumberish; Y: BigNumberish };
        opening_proof_at_z_omega: { X: BigNumberish; Y: BigNumberish };
      },
      state: {
        zero: { value: BigNumberish };
        alpha: { value: BigNumberish };
        beta: { value: BigNumberish };
        gamma: { value: BigNumberish };
        alpha_values: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        eta: { value: BigNumberish };
        beta_lookup: { value: BigNumberish };
        gamma_lookup: { value: BigNumberish };
        beta_plus_one: { value: BigNumberish };
        beta_gamma: { value: BigNumberish };
        v: { value: BigNumberish };
        u: { value: BigNumberish };
        z: { value: BigNumberish };
        z_omega: { value: BigNumberish };
        z_minus_last_omega: { value: BigNumberish };
        l_0_at_z: { value: BigNumberish };
        l_n_minus_one_at_z: { value: BigNumberish };
        t: { value: BigNumberish };
        tp: { X: BigNumberish; Y: BigNumberish };
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rescue_custom_gate_linearization_contribution((uint256,uint256,(uint256),tuple[2],tuple[8],tuple[4],(uint256,uint256),tuple[4],(uint256,uint256),tuple[3],tuple[2]),(uint256[],tuple[4],(uint256,uint256),tuple[4],tuple[4],tuple[1],tuple[1],tuple[3],(uint256),(uint256),(uint256),(uint256,uint256),(uint256,uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256,uint256),(uint256,uint256)),((uint256),(uint256),(uint256),(uint256),tuple[9],(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256,uint256)))"(
      vk: {
        domain_size: BigNumberish;
        num_inputs: BigNumberish;
        omega: { value: BigNumberish };
        gate_selectors_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        gate_setup_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        permutation_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        lookup_selector_commitment: { X: BigNumberish; Y: BigNumberish };
        lookup_tables_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        lookup_table_type_commitment: { X: BigNumberish; Y: BigNumberish };
        non_residues: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        g2_elements: [
          { X: [BigNumberish, BigNumberish]; Y: [BigNumberish, BigNumberish] },
          { X: [BigNumberish, BigNumberish]; Y: [BigNumberish, BigNumberish] }
        ];
      },
      proof: {
        input_values: BigNumberish[];
        state_polys_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_grand_product_commitment: {
          X: BigNumberish;
          Y: BigNumberish;
        };
        quotient_poly_parts_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        state_polys_openings_at_z: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        state_polys_openings_at_z_omega: [{ value: BigNumberish }];
        gate_selectors_openings_at_z: [{ value: BigNumberish }];
        copy_permutation_polys_openings_at_z: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        copy_permutation_grand_product_opening_at_z_omega: {
          value: BigNumberish;
        };
        quotient_poly_opening_at_z: { value: BigNumberish };
        linearization_poly_opening_at_z: { value: BigNumberish };
        lookup_s_poly_commitment: { X: BigNumberish; Y: BigNumberish };
        lookup_grand_product_commitment: { X: BigNumberish; Y: BigNumberish };
        lookup_s_poly_opening_at_z_omega: { value: BigNumberish };
        lookup_grand_product_opening_at_z_omega: { value: BigNumberish };
        lookup_t_poly_opening_at_z: { value: BigNumberish };
        lookup_t_poly_opening_at_z_omega: { value: BigNumberish };
        lookup_selector_poly_opening_at_z: { value: BigNumberish };
        lookup_table_type_poly_opening_at_z: { value: BigNumberish };
        opening_proof_at_z: { X: BigNumberish; Y: BigNumberish };
        opening_proof_at_z_omega: { X: BigNumberish; Y: BigNumberish };
      },
      state: {
        zero: { value: BigNumberish };
        alpha: { value: BigNumberish };
        beta: { value: BigNumberish };
        gamma: { value: BigNumberish };
        alpha_values: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        eta: { value: BigNumberish };
        beta_lookup: { value: BigNumberish };
        gamma_lookup: { value: BigNumberish };
        beta_plus_one: { value: BigNumberish };
        beta_gamma: { value: BigNumberish };
        v: { value: BigNumberish };
        u: { value: BigNumberish };
        z: { value: BigNumberish };
        z_omega: { value: BigNumberish };
        z_minus_last_omega: { value: BigNumberish };
        l_0_at_z: { value: BigNumberish };
        l_n_minus_one_at_z: { value: BigNumberish };
        t: { value: BigNumberish };
        tp: { X: BigNumberish; Y: BigNumberish };
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verify_serialized_proof(
      public_inputs: BigNumberish[],
      serialized_proof: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "verify_serialized_proof(uint256[],uint256[])"(
      public_inputs: BigNumberish[],
      serialized_proof: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    compute_powers_of_alpha(
      state: {
        zero: { value: BigNumberish };
        alpha: { value: BigNumberish };
        beta: { value: BigNumberish };
        gamma: { value: BigNumberish };
        alpha_values: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        eta: { value: BigNumberish };
        beta_lookup: { value: BigNumberish };
        gamma_lookup: { value: BigNumberish };
        beta_plus_one: { value: BigNumberish };
        beta_gamma: { value: BigNumberish };
        v: { value: BigNumberish };
        u: { value: BigNumberish };
        z: { value: BigNumberish };
        z_omega: { value: BigNumberish };
        z_minus_last_omega: { value: BigNumberish };
        l_0_at_z: { value: BigNumberish };
        l_n_minus_one_at_z: { value: BigNumberish };
        t: { value: BigNumberish };
        tp: { X: BigNumberish; Y: BigNumberish };
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "compute_powers_of_alpha(((uint256),(uint256),(uint256),(uint256),tuple[9],(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256,uint256)))"(
      state: {
        zero: { value: BigNumberish };
        alpha: { value: BigNumberish };
        beta: { value: BigNumberish };
        gamma: { value: BigNumberish };
        alpha_values: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        eta: { value: BigNumberish };
        beta_lookup: { value: BigNumberish };
        gamma_lookup: { value: BigNumberish };
        beta_plus_one: { value: BigNumberish };
        beta_gamma: { value: BigNumberish };
        v: { value: BigNumberish };
        u: { value: BigNumberish };
        z: { value: BigNumberish };
        z_omega: { value: BigNumberish };
        z_minus_last_omega: { value: BigNumberish };
        l_0_at_z: { value: BigNumberish };
        l_n_minus_one_at_z: { value: BigNumberish };
        t: { value: BigNumberish };
        tp: { X: BigNumberish; Y: BigNumberish };
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prepare_queries(
      vk: {
        domain_size: BigNumberish;
        num_inputs: BigNumberish;
        omega: { value: BigNumberish };
        gate_selectors_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        gate_setup_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        permutation_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        lookup_selector_commitment: { X: BigNumberish; Y: BigNumberish };
        lookup_tables_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        lookup_table_type_commitment: { X: BigNumberish; Y: BigNumberish };
        non_residues: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        g2_elements: [
          { X: [BigNumberish, BigNumberish]; Y: [BigNumberish, BigNumberish] },
          { X: [BigNumberish, BigNumberish]; Y: [BigNumberish, BigNumberish] }
        ];
      },
      proof: {
        input_values: BigNumberish[];
        state_polys_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_grand_product_commitment: {
          X: BigNumberish;
          Y: BigNumberish;
        };
        quotient_poly_parts_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        state_polys_openings_at_z: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        state_polys_openings_at_z_omega: [{ value: BigNumberish }];
        gate_selectors_openings_at_z: [{ value: BigNumberish }];
        copy_permutation_polys_openings_at_z: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        copy_permutation_grand_product_opening_at_z_omega: {
          value: BigNumberish;
        };
        quotient_poly_opening_at_z: { value: BigNumberish };
        linearization_poly_opening_at_z: { value: BigNumberish };
        lookup_s_poly_commitment: { X: BigNumberish; Y: BigNumberish };
        lookup_grand_product_commitment: { X: BigNumberish; Y: BigNumberish };
        lookup_s_poly_opening_at_z_omega: { value: BigNumberish };
        lookup_grand_product_opening_at_z_omega: { value: BigNumberish };
        lookup_t_poly_opening_at_z: { value: BigNumberish };
        lookup_t_poly_opening_at_z_omega: { value: BigNumberish };
        lookup_selector_poly_opening_at_z: { value: BigNumberish };
        lookup_table_type_poly_opening_at_z: { value: BigNumberish };
        opening_proof_at_z: { X: BigNumberish; Y: BigNumberish };
        opening_proof_at_z_omega: { X: BigNumberish; Y: BigNumberish };
      },
      state: {
        zero: { value: BigNumberish };
        alpha: { value: BigNumberish };
        beta: { value: BigNumberish };
        gamma: { value: BigNumberish };
        alpha_values: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        eta: { value: BigNumberish };
        beta_lookup: { value: BigNumberish };
        gamma_lookup: { value: BigNumberish };
        beta_plus_one: { value: BigNumberish };
        beta_gamma: { value: BigNumberish };
        v: { value: BigNumberish };
        u: { value: BigNumberish };
        z: { value: BigNumberish };
        z_omega: { value: BigNumberish };
        z_minus_last_omega: { value: BigNumberish };
        l_0_at_z: { value: BigNumberish };
        l_n_minus_one_at_z: { value: BigNumberish };
        t: { value: BigNumberish };
        tp: { X: BigNumberish; Y: BigNumberish };
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "prepare_queries((uint256,uint256,(uint256),tuple[2],tuple[8],tuple[4],(uint256,uint256),tuple[4],(uint256,uint256),tuple[3],tuple[2]),(uint256[],tuple[4],(uint256,uint256),tuple[4],tuple[4],tuple[1],tuple[1],tuple[3],(uint256),(uint256),(uint256),(uint256,uint256),(uint256,uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256,uint256),(uint256,uint256)),((uint256),(uint256),(uint256),(uint256),tuple[9],(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256,uint256)))"(
      vk: {
        domain_size: BigNumberish;
        num_inputs: BigNumberish;
        omega: { value: BigNumberish };
        gate_selectors_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        gate_setup_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        permutation_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        lookup_selector_commitment: { X: BigNumberish; Y: BigNumberish };
        lookup_tables_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        lookup_table_type_commitment: { X: BigNumberish; Y: BigNumberish };
        non_residues: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        g2_elements: [
          { X: [BigNumberish, BigNumberish]; Y: [BigNumberish, BigNumberish] },
          { X: [BigNumberish, BigNumberish]; Y: [BigNumberish, BigNumberish] }
        ];
      },
      proof: {
        input_values: BigNumberish[];
        state_polys_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_grand_product_commitment: {
          X: BigNumberish;
          Y: BigNumberish;
        };
        quotient_poly_parts_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        state_polys_openings_at_z: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        state_polys_openings_at_z_omega: [{ value: BigNumberish }];
        gate_selectors_openings_at_z: [{ value: BigNumberish }];
        copy_permutation_polys_openings_at_z: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        copy_permutation_grand_product_opening_at_z_omega: {
          value: BigNumberish;
        };
        quotient_poly_opening_at_z: { value: BigNumberish };
        linearization_poly_opening_at_z: { value: BigNumberish };
        lookup_s_poly_commitment: { X: BigNumberish; Y: BigNumberish };
        lookup_grand_product_commitment: { X: BigNumberish; Y: BigNumberish };
        lookup_s_poly_opening_at_z_omega: { value: BigNumberish };
        lookup_grand_product_opening_at_z_omega: { value: BigNumberish };
        lookup_t_poly_opening_at_z: { value: BigNumberish };
        lookup_t_poly_opening_at_z_omega: { value: BigNumberish };
        lookup_selector_poly_opening_at_z: { value: BigNumberish };
        lookup_table_type_poly_opening_at_z: { value: BigNumberish };
        opening_proof_at_z: { X: BigNumberish; Y: BigNumberish };
        opening_proof_at_z_omega: { X: BigNumberish; Y: BigNumberish };
      },
      state: {
        zero: { value: BigNumberish };
        alpha: { value: BigNumberish };
        beta: { value: BigNumberish };
        gamma: { value: BigNumberish };
        alpha_values: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        eta: { value: BigNumberish };
        beta_lookup: { value: BigNumberish };
        gamma_lookup: { value: BigNumberish };
        beta_plus_one: { value: BigNumberish };
        beta_gamma: { value: BigNumberish };
        v: { value: BigNumberish };
        u: { value: BigNumberish };
        z: { value: BigNumberish };
        z_omega: { value: BigNumberish };
        z_minus_last_omega: { value: BigNumberish };
        l_0_at_z: { value: BigNumberish };
        l_n_minus_one_at_z: { value: BigNumberish };
        t: { value: BigNumberish };
        tp: { X: BigNumberish; Y: BigNumberish };
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rescue_custom_gate_linearization_contribution(
      vk: {
        domain_size: BigNumberish;
        num_inputs: BigNumberish;
        omega: { value: BigNumberish };
        gate_selectors_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        gate_setup_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        permutation_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        lookup_selector_commitment: { X: BigNumberish; Y: BigNumberish };
        lookup_tables_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        lookup_table_type_commitment: { X: BigNumberish; Y: BigNumberish };
        non_residues: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        g2_elements: [
          { X: [BigNumberish, BigNumberish]; Y: [BigNumberish, BigNumberish] },
          { X: [BigNumberish, BigNumberish]; Y: [BigNumberish, BigNumberish] }
        ];
      },
      proof: {
        input_values: BigNumberish[];
        state_polys_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_grand_product_commitment: {
          X: BigNumberish;
          Y: BigNumberish;
        };
        quotient_poly_parts_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        state_polys_openings_at_z: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        state_polys_openings_at_z_omega: [{ value: BigNumberish }];
        gate_selectors_openings_at_z: [{ value: BigNumberish }];
        copy_permutation_polys_openings_at_z: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        copy_permutation_grand_product_opening_at_z_omega: {
          value: BigNumberish;
        };
        quotient_poly_opening_at_z: { value: BigNumberish };
        linearization_poly_opening_at_z: { value: BigNumberish };
        lookup_s_poly_commitment: { X: BigNumberish; Y: BigNumberish };
        lookup_grand_product_commitment: { X: BigNumberish; Y: BigNumberish };
        lookup_s_poly_opening_at_z_omega: { value: BigNumberish };
        lookup_grand_product_opening_at_z_omega: { value: BigNumberish };
        lookup_t_poly_opening_at_z: { value: BigNumberish };
        lookup_t_poly_opening_at_z_omega: { value: BigNumberish };
        lookup_selector_poly_opening_at_z: { value: BigNumberish };
        lookup_table_type_poly_opening_at_z: { value: BigNumberish };
        opening_proof_at_z: { X: BigNumberish; Y: BigNumberish };
        opening_proof_at_z_omega: { X: BigNumberish; Y: BigNumberish };
      },
      state: {
        zero: { value: BigNumberish };
        alpha: { value: BigNumberish };
        beta: { value: BigNumberish };
        gamma: { value: BigNumberish };
        alpha_values: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        eta: { value: BigNumberish };
        beta_lookup: { value: BigNumberish };
        gamma_lookup: { value: BigNumberish };
        beta_plus_one: { value: BigNumberish };
        beta_gamma: { value: BigNumberish };
        v: { value: BigNumberish };
        u: { value: BigNumberish };
        z: { value: BigNumberish };
        z_omega: { value: BigNumberish };
        z_minus_last_omega: { value: BigNumberish };
        l_0_at_z: { value: BigNumberish };
        l_n_minus_one_at_z: { value: BigNumberish };
        t: { value: BigNumberish };
        tp: { X: BigNumberish; Y: BigNumberish };
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rescue_custom_gate_linearization_contribution((uint256,uint256,(uint256),tuple[2],tuple[8],tuple[4],(uint256,uint256),tuple[4],(uint256,uint256),tuple[3],tuple[2]),(uint256[],tuple[4],(uint256,uint256),tuple[4],tuple[4],tuple[1],tuple[1],tuple[3],(uint256),(uint256),(uint256),(uint256,uint256),(uint256,uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256,uint256),(uint256,uint256)),((uint256),(uint256),(uint256),(uint256),tuple[9],(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256),(uint256,uint256)))"(
      vk: {
        domain_size: BigNumberish;
        num_inputs: BigNumberish;
        omega: { value: BigNumberish };
        gate_selectors_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        gate_setup_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        permutation_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        lookup_selector_commitment: { X: BigNumberish; Y: BigNumberish };
        lookup_tables_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        lookup_table_type_commitment: { X: BigNumberish; Y: BigNumberish };
        non_residues: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        g2_elements: [
          { X: [BigNumberish, BigNumberish]; Y: [BigNumberish, BigNumberish] },
          { X: [BigNumberish, BigNumberish]; Y: [BigNumberish, BigNumberish] }
        ];
      },
      proof: {
        input_values: BigNumberish[];
        state_polys_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_grand_product_commitment: {
          X: BigNumberish;
          Y: BigNumberish;
        };
        quotient_poly_parts_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        state_polys_openings_at_z: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        state_polys_openings_at_z_omega: [{ value: BigNumberish }];
        gate_selectors_openings_at_z: [{ value: BigNumberish }];
        copy_permutation_polys_openings_at_z: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        copy_permutation_grand_product_opening_at_z_omega: {
          value: BigNumberish;
        };
        quotient_poly_opening_at_z: { value: BigNumberish };
        linearization_poly_opening_at_z: { value: BigNumberish };
        lookup_s_poly_commitment: { X: BigNumberish; Y: BigNumberish };
        lookup_grand_product_commitment: { X: BigNumberish; Y: BigNumberish };
        lookup_s_poly_opening_at_z_omega: { value: BigNumberish };
        lookup_grand_product_opening_at_z_omega: { value: BigNumberish };
        lookup_t_poly_opening_at_z: { value: BigNumberish };
        lookup_t_poly_opening_at_z_omega: { value: BigNumberish };
        lookup_selector_poly_opening_at_z: { value: BigNumberish };
        lookup_table_type_poly_opening_at_z: { value: BigNumberish };
        opening_proof_at_z: { X: BigNumberish; Y: BigNumberish };
        opening_proof_at_z_omega: { X: BigNumberish; Y: BigNumberish };
      },
      state: {
        zero: { value: BigNumberish };
        alpha: { value: BigNumberish };
        beta: { value: BigNumberish };
        gamma: { value: BigNumberish };
        alpha_values: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        eta: { value: BigNumberish };
        beta_lookup: { value: BigNumberish };
        gamma_lookup: { value: BigNumberish };
        beta_plus_one: { value: BigNumberish };
        beta_gamma: { value: BigNumberish };
        v: { value: BigNumberish };
        u: { value: BigNumberish };
        z: { value: BigNumberish };
        z_omega: { value: BigNumberish };
        z_minus_last_omega: { value: BigNumberish };
        l_0_at_z: { value: BigNumberish };
        l_n_minus_one_at_z: { value: BigNumberish };
        t: { value: BigNumberish };
        tp: { X: BigNumberish; Y: BigNumberish };
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verify_serialized_proof(
      public_inputs: BigNumberish[],
      serialized_proof: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "verify_serialized_proof(uint256[],uint256[])"(
      public_inputs: BigNumberish[],
      serialized_proof: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
